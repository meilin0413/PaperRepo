%!PS-Adobe-2.0
%%Creator: dvips(k) 5.991 Copyright 2011 Radical Eye Software
%%Title: Stability of (n,k) nonlinear feedback shift registers.dvi
%%CreationDate: Wed Feb 22 16:14:26 2017
%%Pages: 6
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: Times-Bold Symbol CMR10 Times-Italic CMMI10 Times-Roman
%%+ Times-BoldItalic CMSY10 Courier rsfs10 MSBM10 CMEX10
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips.exe
%+ "Stability of (n,k) nonlinear feedback shift registers.dvi"
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2017.02.22:1614
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]/Metrics
exch def dict begin Encoding{exch dup type/integertype ne{pop pop 1 sub
dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get div def}
ifelse}forall Metrics/Metrics currentdict end def[2 index currentdict
end definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{
dup sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1
roll mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def
dup[exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}
if}forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}
def end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMEX10
%!PS-AdobeFont-1.0: CMEX10 003.002
%%Title: CMEX10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMEX10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMEX10 known{/CMEX10 findfont dup/UniqueID known{dup
/UniqueID get 5092766 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMEX10 def
/FontBBox {-24 -2960 1454 772 }readonly def
/UniqueID 5092766 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMEX10.) readonly def
/FullName (CMEX10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 20 /bracketleftbigg put
dup 21 /bracketrightbigg put
dup 56 /bracelefttp put
dup 58 /braceleftbt put
dup 60 /braceleftmid put
dup 62 /braceex put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23E7BC2A6E71BCF95FF3DA948
1A27320759222BD7BC7C1A533E90058824F06942F0234C68671083E0E4708398
D246C94F9C16DAB6563651BA33D86273FD2DB3C50C106F3CA95B1C79778D0BEB
B99D9CFB38E41BDCB4261A86A23E2CDEE4837D9B6F0E85ACEAA984C344A63709
EA35B61F08821338D363D172BD185A3658F43052AE1E61D879C99DED7F6D726E
FAFEBD881BDDEA91FB09DB75675FC74AA2BEA8771027C7A51BF849F8E765B870
8F7CC0871F301ADEF9B71EC3C607B2F51325AA5B3DD74A2C5426E7B329FAE84E
94A159C8C9C35E27A0FC93FB98A4D616750DAD50068A5F0EB96B8228946E5CC6
B69E93D262C92E3BC7161313156E380A2ABE27BE400A23DF95E65A4F76B3FFE4
CF3CD141B006C487EBC73A5A101466D4388FB2CF1D9439D0714720BB58537B7D
B3EE1F04AE117222CA5F0E5942F7A875D55D91D63958B1A02405D9DE08109B8C
7104F2D109EF7074852DFD74CBE02E0F3704F2BACA14E05EB1D0D9021EFAC23F
76C2389F8EA237D2E2AB6AFA83A725E16AECCAF025E05F1B1B5699D761F62A46
EC6F31B0FE4769BD0D66821592ADBAEFA9EB454CF1402FE870F5F96D09980C1B
8B6D2FE88BE56032C1959E6C3DC319B6A7353F3AC629CE5BCB947B4B235426E9
4769302817AEC1ADF50E50265AB488017634AF824D44D3C8423FC7CAD97F6D6E
6B34313637687FBDE3BDF6FC951CB41277D8EF49D14767B59656D214C9724DC4
0523EF896F4E48434FCC5D8423F07194C54D48C62AC29001B10C9C8B514B24C5
CEB60FF68D36749711E108DBB52738760FCF6571D5B04E58F24CC0247834B412
D0F6F8D7F1573F23E3E399D5A3A3A37FCFFEAFA044A5694D2458EFF2BC1F7650
8FB0A27C505A20C16776EDF94BEF9DF702F3C64DBC1939BEC0399B6AB283F832
DD8FB358F701CC075C596FA7B0ED7A9304DC73274C8169337D55124CB748CE26
A635B2704D8F65E23CC0FDA3C57ED451F8FDE7B6FBFCE2746F5AEA11B065A6DC
C3D200D962A034DD6757991BA62D8DC0408F49083D48799B6097B61343365A5B
30FB02E9CDFB5104FB751BE8A268EE55C1208DD8B29D5635014EDE9D0D94BB64
ED5643B3049027925BF2FD7EFCB631E01269B731AE12AA6226B2656F035C7E92
959C4A21BE40D7C138C8FF28C9FD4B768CF25F08859AE84FEE6EA18C033B3659
D9EE250BA5FF2568E8BF7684A93BED7852251D1ADE5DB815AF3AAC36D1A500C9
41D1BF3A1926828CD1F9E501ABE441A07B1B96612CF0728AD5FECF7480421F46
0B18E06D2FF1A5B1183459C59517976474698BCE18A728515CD489A83C001AFA
47BDA929F60D0FABCD8786AE16EE18615C37D18703571936A365D334BACA9BA3
08E2523132887B5EE95ABCE8581C78C3E858DBF35ADD56A1F6C2489AFA73D1B2
379C5064DAFD30FDA84581FDE268B470636EE35F21648955513714F6EAA08AF0
249C937721DB0E93D95C4DDDFB0948051953F39C6D2D811D3FFDC25F786E072B
2A8A1F4830F9CFC34666A1D3F13268980E9A26682CAB64817318A1E266F3D2D2
DE4EBB3EDAF0E7B526C838CBD7F37E74A35B1C3EB96DA4099DE689A53970D4CB
9AB355E93EB294B07DD09356C338BB4A61C147BEDC152E58DC92FA69846E4829
551A5330006793CD88523F7B3AF7B4475C531C67A4B66A603597EE72C4ADA491
BF13706F341125CABF37FADA554FDA0BA5534C7AC35F1829E250C885D9A9983C
5D1FE8CE24458A8B13E5C7EA22BF1608AFA96B83C700889A2A6C9C4052DCB892
6CAEEAA9E7D7F3E215019719B36A5DAFCCF2396FA0C04AD99A7C23772A7BAA64
D1FABE8E476EAE9FC1A3E08CD6D1DDC6E087934E676BDFD1528652B6B9A50A35
2029466364300AF4CA3C5883F6293A7104617D0858B3E43D43752F814654A938
A44C33410BA0E5EA7BF55D4F1D57E27921DB05C059DE29BAC1BFC9B607D2C5CB
1DDC47793984FBB18BD99E1DF7776B563A55E15DF024D6D8E6ADF62F16F602A6
7DDE1C68637672AA9C7A1250161502ADDDC1B4F6011A9BD5605B73AEDC37CE4E
4467C838B7692C4D541EF87DB41123F9DCCFFA971553A5D9B0E7EC539A28750C
8554383585CD8B93DF731A301D85BA9ADC95B4A3A237794C30230A82300B6756
AE5A46A090958109C5565EF60B0B16D6C0A16A56644B05D3371DABBB67ED9BB8
9BD3983575D371419C7568B2556649402AFB9843106729E4EA87B3F9038218A1
F820B098A1271E330708432567297CCDA332B555A40C62BAEB16330175D28AA6
13AE6939CEFA2334E3E890B66A73277F0B63B1FA59F856ABECC5FC0A50571F5B
0747FA554F5FC72A51E215304B2E44701A13E41D91397B204C66AAB3D101004C
7FEF2D87DA558EA057BD492CD6EF93601CB63F78426B502CDC5C8E9EF4FF3692
376601B1FAADD801602668370B5ACEFFDBACA8F8B3F4E850D07A20F6F47440FC
FD39504F0FDFCA35AF2ED0DA8BAB63AD42EA8CDA912CE17F5E62192DDD912333
3E9FA0884117F07221642490044A72E359D5F25D9591A8FAD568A3DEE435C354
11995C0EFCFEA21735DF44A30F79F747510E28767A4266461D1394F81344F6DB
1FA8D0B0D9E5F52FBB663C8F1E91192E5608FFEAA178B93F8298F70510A65BEE
12ECB5D675311B5B3B19205476512D92B1D16262720484049370A76F78D9BDC3
02EB96AC1E5B3CB078D2F219988FD0F36B043ABBF347B22D36CF541A8F80F791
8E4F92D900B7E7B64DFD500882EFBBF23565FA470103B2E0D2D14E3E4D7827D1
BAA0F84713A8CDE5904FFF2794850871DEADDDC53B77A502F5CA98B0744BB656
2FC40ED2AEBCC5CACE2301E983E6C18CF16AFB9FD8CA49DE51B22F4259D43076
DDC1BD4974CDF2E733EAB6334B1D5614288CC81FDCC722CEE193635D1088FB29
F80AD5CB96394AE89D920DF8E1F271585AF019190F17DB51FEC9064B54C3A53E
3FD33C3B553FC79F743BEC9674743BF0A821051261DE4527A2BEF4A04E293E97
02B181EC5F5EED3E26060F2C9EF6852B7433CA1BC1690C30424B03C522A087EE
92016EBDAC4B787133B4A22BFEF0B6CA564C6EB910E1DBF983CB4CFC3A1F8A26
45329CED7F5A8704ACE9D4233583365A5A97342A053EF403F0567E9D0A62EBCD
84B5D7145BBB11D31046BC2CF5B450CC68B85DA0E78EF8902F8D37DAAA9D4242
455288C0D73748F9BFEB1B1769D6FB84B94993D5F7C2B9CBDF75AEF2C930F277
210B3CCB8A0299F50AFE2548A4B8DF5ABB52F098ECDD56FCB8D3A406EFD95088
92D7EC39FDC7EB1824ECA24D0CBC6EC6F4C6A7F9590D593B269D2CC0BFBD961C
AA8BB4296B4E4411B54367A341A5EDA97288DAC370A015FDE6D7FB0A4CECEFBD
1A67DF3A3703E922BEF2C414FDDA42482EB35D5DBB206B44C76C412A435A0842
6845EAD204BDF87065CE2C99B05D2D4080D5D11CFC3316967472C7DA44CC1F9D
51B83B4BE9B882D6E9ECB482F9855D024ABFBA502CCD624E0F88164A6F13CED4
85F20DC01BB15C7D78B1C79FD9FF71F4B043F59DB5C297768115542BC7C8A99E
ACE39A268D32122541FB441FF1364FCBA2B7627F12C49ED038BC044B6D9D533B
A72D35317A5AB8D91A9AC56CA90D1DAE9F967605C63BC9F406FB3D5BAEB4B38F
4934EE3D2F5FE434B45CF5C2D0E5E417EC279DCEC4F16504EE40E837B11620B7
7526AFF23381ED3E9A92DA4DBF4EA2BE4FE444B9A74AB60EFC818E20DD8B852B
DF8CB659C0A3956D0DA61F49A9DD467726E57E9B32EFF540D551A67213D40273
AEAA6E319D92B4B406377D36DAB85662C755D76ADF5795C52D54ECCF0DE81E30
B84F951233A0A400CB063911837F0AACF44AD2441A7CE08818D64705E1ACF7E0
F59AEFC5DD812981C5508385274817056B2CDCCA4C9F3103C92838917EBFEC94
21D5737AC634B23B6F7F63B166D60C6BAA8F33AF44379C5A7337E737190EB3EE
14272B905D08C01EA118964D3444A03676FF3B62E7626168FA1DC6220699780A
0BD5776DDFA26BF0BB335B3C978CDD5CF1A419D4B5C562B3974FECFCF0118199
E547EB287CD92E32E881F344420FA3CD97333BFEF5D7E1BA31FD20622E5B4F95
692DD0ACAF01D413B21C8608FA87B470191C3CC5AD333263C955B4ADF4370FCE
D6667FC93495003F4B6AEE4F83603D55F19EFBF56F955FC9CC01E494804952CD
D426FE706C13D41F87C5C668D8B6BE50AE0370E07F52AC0534ECAB1C19851099
FC0BB1EC2A649795A62299F73CA606EDFB1D28183DC63ADF67294553115E8C57
7CB603CC491A6065802B925E6DFBF42917EE6E44C714228AE452851D61BF70AC
844B5D800EF029357FD659B8A648445CED0ECAE1474E443124F4B3644F54C556
A330D92EABEC7F607C6B13FACF69CA928F835056BD1A8ADA20EFE6BD5CF4A1A0
8B9E415E4A5FC6F209EF05ABF2E0C55F6E3060D1C72967E1E68791499F303C8B
3960C5A1F2DF6306710DFA98C8D0815A06B5590374554DCCDBDC4C295B3BA6B8
8BE3200CD4421A521C06BE39D4CA495BC63F3F982CAE3C82AD38DCB537E617D3
34BD96EFDA7C6A0F6D97A6BC9F084645390E194E7A11399FCE4EEB9A965909BA
6EC69D34DBA081BB3F18BD1ADB1AE1B7FBF96E4C546498667690857EB6931841
46C427A5B7C7D99FF889582C4AD11A7D267B301C5A5AAD9DA99D5BFD438238DA
62DEB899FF0F7B7997F781315B2CC328BE3572A3903A33EC901AC6BCC7F152A9
8A6865C6CB17189A4EEB699006A5F9D4482D53A76E88438E444F9302C79F0DC4
B3033D29D303B38F5959F020337EE6619DC8A8C3912101B02CF8AD113BF4BC29
8C6B9D25AF6B6A787F222C05964475B49B6751E3A3A6EBBEA03677D5B136B9DC
6D9AC20193BFB0759E89831C9E2AF68BD45ECC81175DFE80DC0879069ADFA8E5
24CF3C84121CD9739A28BACB9891945FA4E72EC07136682E18FCA81938FA6A3B
8CEFBAED60121530E33C1C0E698B5923D6AFC4E907A99B1367C3D435CAEDEF5F
878237453B8DB2FE53073CF3319FD096343F42D68F097759D051AEE17E4FCFC9
86E17099799DE82A38F22D870BF7AB90890E3B5264976700BAE594C8563A218C
C985D9A5A7D7BD959F7E4E66286833C86E89203ECECD6FC4C6FE1F04010218FA
A5714881C4C846E85F13BD68AC250CD0E488DBF60BB10B2CD7AE2E30F9C21DFA
0E84F76B4E996AA1C5C056E64BAC85622C160B56DEFD4DEF86887C1201F7C20C
076D4A27BA69572BE9C89FF3A9D3BAA5CAE0A6F2187AD01ED497798A305E3BD8
422DBFBF45E3F4AD35240B07285128B59FA9E83D9F6A2E620CAF6DB05129D930
44CB241CFF84E776315114C3AB61FBC0A8368D9154CC5066E2B162E89DA51165
F9CC075F2524F9A8624D2B56ABE64AF93B9F0407CC770C1F2C76CCDC06345D03
7B173C2FAA201D8E1F6C0315987A7A13902F4AA5ADF081C2B0A01C77E4F7A3E7
6A4AAEDDC577E855D69D38AF6A1D271B02AB496D94D81996FB078FBED17F833D
C6C0BCE141BCDE277D530951DD6574B9CB3CF0370D74211E9AC00C7CD3A67842
0B4B72ED517E4906409DEA7993D0B8E92D418139960EBC86BE63A1B1D417C451
8BA13C230DAE1EC4E466F23351D410D9FC4A7BBD477D5FA07659B71CE9921B1B
6755C67AB3D4988064004CF75948879D16174E8097C91F7544352474C2D9A1F8
A1813BC6F4BA13E952678F5707F19B4799ADB3BD186DF650821DF58CF3C78D67
84E4E1DF8DACEC50D15647C3DBBC3C4355E602D3A03171FE1CB36FEB940211EE
0A5300841DD7B7CF91C02B3FC5D89C691156BFF8A38C6C72789DF260B868AAA1
895046E405661D97FA9A0048AF114A89E3ADAEBCE541753E4FFCD902391B5372
6A97E32F0257FA9FA1DC15BD3140EC7F0CA5A68AABCEDBE73C38B35FDF195F96
0F9DB0F592C188D72D73512F4DD92D2371D1A59254BC477CA084E68184AEAB6C
266BB21DC3AAF874DE999AD2A17C79621AE322612EE4B6D5BDAC511418EDE90A
AE75066AF19662C4AD855E4200A5D67BEE4ADA9A399192C74D35E59B15FB61E7
BB167282D32D538029ED22CC5C9860C1F6B7BA7F33D5CF108D4BEEFAE7B37E67
39391F9934DE17956303532ABB011540645DB8420749C9B9A019C3CE86ACD566
1EE8D8D5E0D8D0DEAB33B5413EF10D4EE650F82417002E436E0B3B628A657F84
074098C2E9F897D9AB692E0FB9F268E6728F94A79CF4D6B0A07C8DFDC1D67FD5
EDD5863EA8949D180B1596D0009D662FC429449D76BF13D83F0D0CF165982443
E9CC288CF7C5F2E17EB7F3736D1FB814196CCEAB8C833720E3733BF594E1B536
BC0063080BC751F9DA1741522B2967D07DDDA169E7D3417B4A39EFAC15EA5E8E
DE3473CC9DF991FAD2A971F44B09635085DB02D692F149F144F3DCDB69B72C53
A2AF34C65DF0D5F35E82102E67B733750646EC03A4FF47138F7998607BD93AB2
B63A0B82E8E225FFAD5DC468077FBE8C8C8E5B4BB10A8FE836B07367D742BD6B
D36DF5304B9DF363120504C279453452EB177FBCDAA6F6FB78A24848F4A1D94D
1E49F6C46CB36796F3F4C9739346381F28AF085C5EBDB2A02DC0570C7A21E097
77522D4947B51182431BCBF3E55CCDDE93A916AA40CEB577277FA512380816DF
9111C56F36341381D62368E70462577D0C135BB3CB4462B269AA8E0F03245BFA
D01DB8E23F2DFD5DAA88FCAFDD51D48E562EC649DB1FFDA0FD8CC8C48E6A9207
260ABE35733D75630053CC74A07E5AF6FE87BD5FEA69CB6AA20122276AD92853
6B225BC9E3350D1B1362E04C7795D473F1266852B02C83D02D938C55D8F0C671
7A9205F8CD058304DFA034D99A6BC16C582F02484A089602D42DF30D7A5716C1
D42A4CE56C19E40C01DC7DED931FA13679CFD2700B3826A1E6539AAC12293DA8
664DE251C5D1761BB45FE364CE3F7F7E9B67F86EB31D9626CCACE4DCE03EF3C1
0D2FD1B12B5774510D46C5C5CBF0A34847418B9A1DF0C67789422D0EC2D49576
9DDE72D63A4A98613461A6F730A05336C691583F96C3CAD2AF7C4BFD3AEB3814
D909858B6598FE19397006C8C4D549AA1635968F47144E7861A2BCE8AB4CA7F0
4D253949AA0127559FAE3161C810A8CE22A3079602E747C9398F9C8B2A868F23
D77D7AD6B980FEB038E0557E58E1D7AE471036CBB96B83595D9C96A4895971CD
C2A810651A045F876A1F5AE470BEF39F856808B1F8D736030A722E1576BDB3B4
4DF06F73D38D313C8A0D3504EFBC774750C9F6E687ABCB1927FA1BB3882AABC1
2306A030CEBB259AECAA646C6497712F6C1E9DB7E1365A60EEC5AEDD5147A77B
1E3A10D73C477876D54FEE853D953EE75F7EDFB287550B93CFA8250D1FE2FE7D
D34441F1224F3DB1D355188819EBB98A94DB193B9CA23803869DD10776647BF5
5BB42031AC44A7339DC036AD0292AB9B732E6FB79BEE852A103C3788BB0F4B72
EF37BB62356F9B2DF7F5899A26F1FE0A3D6469C1034B8AB14F52555EBF6DC592
3F24D6DB395A3A182ED4B8ECEE8254661C19CC942F236CA40BAABE818EC312D8
7F5762C210FCE8A3CB9A23A24D0A751A09F4FCFB72DD0FB3AAE0575CF97D126E
1669203BE1C8F8FF626F49E8AFA7B29EF26618C6D8336D4471314D5D009BEC8C
D914E74D0BE7D7C3A2511C0DDEB6FE04360D54FB3283AD67D9DCDE211FAFD19C
449E201F2913232DDAFB2043F674EA73C9F043EB73CC9A96289B3CF819DB3E56
5FE403D8C387C99979ED9F8EB2F0B1F91BB33D169BC54F45D5CA872DB5B46B0B
A029964C2E1D66752E114A0B3B5AC5FEA689F9C07862F709CB1A7A5326BB7A20
CABDD834986C77DD5BA9DB5CED898EF991D16634FFC9C58D33E4ED38288B2C01
247257D9CC0FFBE8B755156D07D83005C491F6DEA301F0225E51EE8285E33775
F4798F8B0EAB0793C86C501CCC19BE67F9CED3FE03F57D1F89D55A1F9BFDF47E
63B2FA3DD70DC09CC23ED01576856438244DF394FE4C93BBBAC5FA9809613E1C
C1F31E02DB8A5071423734D01A17D5BB499B08E93C682568E8A377660A37DD1B
606E5BEB89651E5FD387BB9331797889A60F7DC71AC62E32544D620C8F874B50
7FFCC7759D73337996E94267F166C1D0483D2A62E891158DE00B09A7ABEF5C9C
72FF830112D166BD3B29A7F78F5D2E5BB2F291603A55876FD66D30693027E91D
D6F71429BAC0FD685C60821BBFF8F8D5CC79DEC61D19619A2892660E0F4F9960
BF5BE4BCB3A387DDEDE53D970421B2AB885E2E509B21D1F996C77EB6D8C33EE2
4C63B5D448AEDD315F59639A4A599B4D50FC89148AEBCCA43C29DE4D0455CCF4
9B92440CC4E167D8FE8C7D2D52326433C97CB3A17CA4E75AFB14DA87DE71AD3A
52E9044BB40CE1FB455D1EC803B5BA5C44F53094E2C806773133154574CE3EA3
CAD6143885694F9870C67273E7B509F3E0E98020FB2FE9E4FF4A00743FFD7780
EF09707EC1F0C414514093545147439DD0DE0133F12A029548C5457D58EBCBE4
61B7F15E53E1826CEA582ABC2E98681672306BC8C04004F7DE2441EEF2BAE040
B447D8C02C45B9BE08D75FB3BF5074DECBDA1FE8E3473F3D78EF8AB0BF429DE5
A56A0D25CEE73BA646F67C22FD558D4E9E32BE3EBA06FF95041489E28F5050BD
096984985AB2E2A084AB937466F5217E109231AB24DC9DA348DCA79A1F0DAADC
2685E591E4DD61BB4F8255F11829660AE16682CB0A2C72D55626592A797EF70D
AD680FDB5BD590FAB376CE65D4662D0260D30D03B44630E61AAD2156EBA85A45

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSY10
%!PS-AdobeFont-1.0: CMSY10 003.002
%%Title: CMSY10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY10 known{/CMSY10 findfont dup/UniqueID known{dup
/UniqueID get 5096651 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY10 def
/FontBBox {-29 -960 1116 775 }readonly def
/UniqueID 5096651 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY10.) readonly def
/FullName (CMSY10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /minus put
dup 2 /multiply put
dup 3 /asteriskmath put
dup 5 /diamondmath put
dup 8 /circleplus put
dup 10 /circlemultiply put
dup 15 /bullet put
dup 20 /lessequal put
dup 24 /similar put
dup 33 /arrowright put
dup 50 /element put
dup 54 /negationslash put
dup 56 /universal put
dup 58 /logicalnot put
dup 91 /union put
dup 94 /logicaland put
dup 95 /logicalor put
dup 102 /braceleft put
dup 103 /braceright put
dup 106 /bar put
dup 110 /backslash put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A581BE543D73F1FED4
3D08C53693138003C01E1D216B185179E1856E2A05AA6C66AABB68B7E4409021
91AA9D8E4C5FBBDA55F1BB6BC679EABA06BE9795DB920A6343CE934B04D75DF2
E0C30B8FD2E475FE0D66D4AA65821864C7DD6AC9939A04094EEA832EAD33DB7A
11EE8D595FB0E543D0E80D31D584B97879B3C7B4A85CC6358A41342D70AD0B97
C14123421FE8A7D131FB0D03900B392FDA0ABAFC25E946D2251F150EC595E857
D17AE424DB76B431366086F377B2A0EEFD3909E3FA35E51886FC318989C1EF20
B6F5990F1D39C22127F0A47BC8461F3AFDF87D9BDA4B6C1D1CFD7513F1E3C3D3
93BEF764AA832316343F9FE869A720E4AA87AE76FA87A833BBC5892DE05B867F
10FA225E233BCFA9BB51F46A6DF22ADCEACC01C3CD1F54C9AEFA25E92EFAC00D
7E2BA427C25483BA42A199F4D2E43DFCE79A7156F7417ACF78E41FCA91E6C9EF
B933450D851B73A6AB6AEA7EE4C710CB5C14270D1674FA334686653793FCB31B
491E870D3C2BC654D2C1DE463EC9BA29D7371AA1078800EF93D3F66263A2EBBB
F5723697BF7448BD0D2E301544BECF497FD475B85DFEF52AF4F8F8BE445CABE6
019318806D10C5952157FF8F8286C1EE701545C8F60EFA854EAE66835A2046A6
915D395F1E0366EFE0C0391583FE001FF16D82A2E2DA5F57754A2C6F69306E36
356ECF8EFC3F1188AD6FCD2427E0580C97A5B69B4E0E09B85EEDE142F5ADD2F0
5DE51D6DB72B127412A0D57106C19CA493048A4F815129ABE767D51715B1515D
9C21067CB5BC88741B7298C83EAE36A866DFA87D8981F179B1C31292F56BBB64
3C430779468AAF07C8A8B4934E1E775FE3F35186BD1FA6EE3689C1C750678AF1
FBF9B23195A124C5C991FE670AC0C86FD39D2B07B9A319E74EFD498B45820252
720ECDF7294F7B0B137CEB86D33BFCEB8606985A3260FD669E461C8BE94216C5
D434FD8854F44EE66E5A289A9F9E32BC36AF645D53F96652602BAED418C8D726
BD04A1B4617551FE4DEF54083D414F7DCE004E6BB2DC9C2EF7CE232B254BA2C5
7DCBD36C2072ED46FF711F121A701E2284BF1B718B3164382B8F453D68FA0377
DFE106503B8401D4DB87F5402A3AC9A442FA060B0610A9524D530C7157C26B56
AC970FCC1D5655FFFFA39246E6420CF97D08ADFB7B05822679BD40C638DDF0E7
A97BFE8918B611A145AC965C203F1428812F9D340AF499B3A915B22BE798594E
0F520109FC81E452180AE45B170FF999C5FC2761C6CECD8742A5A6FC97F16743
AD4EFCC6572A6D3F3E4E330C5CB2FF6FEA48A5B64DD3DBE943BD9918D4A18E18
CBCF598AEFBB6AB3CD2CBC9BFD6099272F6543F3E532E0E21E614BD2880B1023
0AC234CB705827BF016DB84E00E8C255FDEFA0101A842929540B7B4AA8A089BD
5EFF05B72356B6BC3727817823B5CDBB1B963103000D7F2A4E2A1472FC3E614B
5CBCB6D6D784023173DEFEBFA8F9ED87EC1A0A9EE98CA59CFC964CF943DC683F
E9E00DA718C4425A705A69D99988EC6F152525C790912C2E46A2381A569424AB
54DF4798BC2D7E7A361E7991641D4B756CE2A7FF4A2848927092C59C2C4B8809
E13AB84FB6B111E680D7FB9F2FFC2C5C66B0B501E4447C2E46C10E2F6124476F
A140C404CFE2DC9E0199BF61E035CEB481D438139A9630934E541D261FFD2906
4CAD99E20655FA746AFB81EDBB5601F5FD6B1D6832A01D585E2C55053F6A7378
4DAACCAC7608DBDADAAE732D66B3E7F87E79756337C1A961E53A4651BE7C77F4
038B89C87F650C54A2A90EB7F1D525BB353F33318551EE8D84A6A83C718EA5A4
B2AC0F7306B1E095819B87015A90CA3ED739B09061782C28CDB36BA4BD5E5308
5CBB70414E4112193DAC4A1FA30996327230D1E021F3CD8115E12D239D93FFDC
B645910EB29E40D830E7BAF2DB255FD7C4E776557BB38157917D993EAC245837
A3B515147043574157B8342D829C7228CCEA843ABC89D1785A9672A5923FC4CD
2F3FF27E6FCACF84E2D3136CA2C0FD3EF1EE7354CD04C38B5FB874553646ED2D
CEDF7E362EADD04B18051F20A8FB0DE18E152385B9D05F98A3A7EF177824E246
455ABE69E2F700EB78185CCFC07E3B4C6FA301112528D977367D30D0D5D59EDE
FAEB706DDC970A9E296236C725B2B55B09B9C336B8E23CBA5FB8692D56F33B03
16294E5FC7FAA42E96395A57CE51CA8DDD77442F142E2E576B778373FB31C81C
16840BB422CA827E30A81829648BDF1CA36700EA32AD888D097C1FE0A05B2D9F
483AEE40269DF09AF0D1AD3DF80C45DDC59C2A03FBB661C79B87853737C6D352
67626B657321B16198DBD6DB98A092F17878AE4698121E1006E53D6F9B0A3BE2
3FB68828EF854A0CDBAA68B37ABCA6AD4A3D809AAF0BAB1697A81FE59C98C472
1E33CD70A75A22C249DD11D76C2575ED3370A25892A16D2FD569CDA70C130770
93F493C7D47D6F9A5424A7A542BAD726BFC3AB225DCEBBE6AC4BE006F8C7C0EA
051424B08305BF2D951AB2986AAFEA04E078CA79B399585BFF0F1ADCED02E15B
8765EB6BF6A8E4D0901EFF2C3AA104924EAD9637A35D877E0C51A3C37DA78CD4
8643C8CE6DCDDE3F116A6C2390F948E5371BEB5AD2E87B41C5F01FB5C196C436
6E256A88D082E3F46E4EFFBF605B2EFF1E9D9AD5EE4DDC323A137CD9451EDEE0
06F7D82898D71FAF2362C0FCF1F726F97F820305B7CE20728CA08C63575083A7
84BA28B7DE2B916432475510E274C12FFD1660A717F51DACFDF0A102D85224E0
D6DB607BB72569ABB8A7BC6A10354CBBC01732EFE35B72062DF269CB25EA3DE6
DC603B04C90C5912D2C38D7A5ACDCDD3F6F116D884F0D8C528F69D5D47BA20DB
0A9E585C7D8CC3C324FE8A1DF150279F7E8FB43BDB720E624E5E9918032C02CD
8020636AE5C38DA2484B7F4B34163E0D0A561B43B80E97746DC05C871AB620EC
C5D47101ECED4A7E25F291184BEF8B80024AA7BB456C1B83A907652B331DEA34
754226C39C6889EBEEFDAD081E01EF8FE47751987667836FDE4C8BB8A3FD4406
1E643B4EA37BD370734D1A2DB17C2F4B74B4ED75098B433601F75A88C9A37A05
CCB157EF6E32023BFA33973F3E655A4D58289136996FCFA61EEABD70791B6523
1FF5DE71AB8A17038923118A5EED8D59C4C58D246FFA9BB26472346B40C8741F
153D19CAFF20DD2A86C6DB89154A630FB1761929FC3F0448EE2F089C1C953E02
905BA8DE75D101A982A611056C4B237596C10951DD98BAB838B742D3CF7DE718
617DB72E5268583223E37E029D1C8FD3F1D21690151F76B76C52C725CA135CA2
8666553E863CE188BFC9B99AF56AC2DB5BFEBEB12FB563D00244EB89E478657A
98AF2E1223C1ABC25A4500E8119B86EB3C26B8A2F3505A3E5610F89B7C34E278
53FA0A54A7F46D84A35EFEC36AE660A9E3C37EE3864106702DE5AF6C45ABF64B
888A4A51323138CE77DB935576FE6B4824B6942DF80625098CE1B5B32B234F1D
052A9D6039697118A9D793793775D8729D8574A2E74D7109C7B7E23BC5E2E87A
CA8E019203952A4892544E1AD3D4EDD22971611358AB230E9A2ABDF00A288501
A01B67C42B33F6B78C39562DB50F4663B922D9BE0D8A150311AE44B83C1F129F
07337323E9A23211EE58E16043E127C6F9574019179F5635648A011266677B56
B5D0201A4E1470B952A1579B57AB2329CD4C615395023C653F784D36B5EE3672
10D191F29EA508CE84763CA4CE7C2C5229E38E241255A5CABCD6C7CBAED901A2
CA53B5E24111921CDDF83578D33D463D70EDACA0E470D8F592303FB6BFD68B4D
3F3BE2D7C5EC8BBF10C90111A33E205F2649B56E8443F6FAA6C721C66575AE12
D4C40F1F46CF9E9DA675AB5D5840D938780CD9E4AD6736ECBEB6A4397613586F
849B51048AC5F9405E03E14540A5E5582F61CDCDB57EDDF95A8C6705F433EE16
648F098C03DED8A2AD94AE3DE202D629B9422ABB031318D48F2C85F9DBFA17BE
84708AA3B6C9F81F4508F7A5CB7B6646AB8722ECF817877B77D473F577556DAA
2BA0ABACFCF5DEA7498C47328E873019A956FBB250FD9D8885D21D368FA70CBD
2709D2DA44EE7A9869963EAB48789541906DE49FAE785ECE1F18A22C7E7ED204
9768896B78E9EB7A2BD6EEC1B26083940656ECD689D92942CC8AF05CBF82AED0
B45A7DF4DD7AA6526FB597322560B9ED3087A65B5EEF1371C328A021411BFE3B
D9B5088B2F1AAE381FFED52D2D1E02CD0DA78683E3B06171CBE94BE9760005D7
135893D7CC2DB097F6AC664D9594CF1C650F84DA80D2EDE04802DBA33CE3DAFE
EB7A37E8AEFA4FDA6252FF21E8673DD98E67124D5DBC7BACF361E57077B71939
C1D1FB923E4E35C075CD1BCBE0E80DAEA1320D55B43EAB45D9B26C366B278782
7519FDC482D98839BF0DF2E7C3A56A1C1A3FC0E57A75CA414F6536C1FE8EB7A0
4ADFEE3BEDA0F53BE8CF5F64230784A797133E8CD46BCCB3BF38BCE38A73CCE2
9E073ADE792F7128231DDD1F63E6156ADB2609C200837C2E8A2D93D2A7BC9171
050C709A71E44E32B1B03C92EB5CF1D3BAB1C38E027DC4ED9AED633D98CD7486
3F773ACF8AE332631CF2ABE6D606607593FE862ADE31803964E3F4DC3CE3A271
C76BDD95C87CDB3B87BC26FC7A16D567EEC62E6FF0D471B4853DB8A94D4CACF8
843824F818083F10E88D52FC4253E8203292CB40F1414AE7E51DD7347007C342
CD70E8E9F2D2A13D71213B841DDEAAB208AD9EA644591C15DEB084165F9DF24B
B91D3BBEEC2E34E38EF16A0C3F00700A7BDCBBFED2EC0D09601AD6538288DB50
3478B051B5E16B604A0341FE621A58718D960D699D3FAD284310DCF54EB13175
19A75A539EE98E804AEA24689D3540F0F12951A3C01FACCE9A7BAF4D0DAFA946
FF65A4D2A4C39969607272C6886F44E90ABE27CA3A1F12A29D9B32E60E8E34F0
17C5FE43D0E69A99A922D98909B2BBCD145E59A5E7F5426B3988F73B09A525F6
8BD4915663C1301323180E760BE81CB874B020FDA3AE63340E4261E4F3E4949B
CC0966BDC4426190BE9F5D77F76A72AD925662E5FE1CEF9CCAB68F0BD33DA003
F11EB91AC4502FBD6AE48DA0F9D07C35B96B103E379B8A83A05FE728F1716194
1F650F75BEBADB2E3810388F3E2DC7B19F1BA9E32925F2FD9F19F4E8701F3E4E
4069125D7C401144740691E7A460021A47B1E27997FC1DDABEC5BD0EE0B20194
2D579C7D6727AA124083242BDA46D8E116E2751C5F298851A62B60AEBE82A929
9B9F2492BA35690D1EFD16215B8EF14E7A3803B93C28FA41D971B05B6AF3B593
E74AD1E68A5FCE12A86E63B78BFEA87D3949FD164F12277A4688BE96356791CB
8671C49365608F3EDECC109321AF92B4C29CAF073DA3A7D73E913D0D83FAC5EB
BD884D4C686056404DAAAD6F82F94F803FA1FB0DD8908D1DF08FB87A8BB83027
04DE0CBB1C6FEB6B517FBD7CF065120079E608CE41893C2BC96A347826CCDFD5
C69E161217F2127A59F1A6F22037641613F191F22D5B4CDCBCC2EE5615623404
ABA7BE6C5FE475481615B2AC1A2412E54688DD21E44CC9AF5F16E634AFCA389C
4D740B7B51BB141BFAD1080E7C726C1606A28ED492E6BDE9F800EFACD1513909
84E98CEB6A0B7A2A6F3E1D1DCC3B2552795E0932673E59ECC56DDD37A1D52BA6
C3F0E905978AB568941A163F4CE3AAB5C5B16F86016EC47BA6F3F7AAAA77C3B6
09C8C3ABDB6D514A76ECD37C37AA88B5860630B3406B494F7725975596F84777
D9CF48686EC9C5DBCC1D78513F591C7C10AB9D153B3D41426B7BF668B0D04503
56BCB686258462C1DC61095724B9F3312316262FD7C1AEC6E54DE7E5A7BD8EFF
035299B8FD8A4A7B0F51404F4A760F4D8B4C0FB7A32FA4B2383AB6E9C78FDEDB
FE6A5788D38A6701B123630C2A6D820A684166FBBC83DB17069494FBD411B333
CB37E2491C5BD035A33867A6D3A3D420CC31ACF43AA07182CAAE67E40EC63663
B678F71D4C6E0EC3A0AAF904CD3AA66E0DE5E3CDE049E94249B39A1C06E3CE9A
F974B2484BB2CDA14282B9511E505B3C89F9C802218AE40D1A7541335C5736DD
CD565D4B9F4CC78F3A393737EDB4FBD0DA299E21CCFEBA5478EEF013F0552A8B
0BB11FF46CCDB784E8BDCF730A16363E66572049E42C695886EAB42A9AD9094C
B635DF4B5B9BD9B9AE8455DFA3EEFC77653190F9A8B1E93B7281C2A21EA7DDA9
33484745BDF7E3DD63C7AC66C286C9A5A698A5E4D7A91710B7FF943FB23609B6
4B442F83CB795788FAB5E9CF3F75D5487DA26170E4561C7941C910B088C3B86D
F844B0F340CF82786A3FCF347048463EBD2006281A816627065DDA6CD4D3AC5E
2024BC96C7D896381BBB567951E7A1F29D4E95351298B000D29E5F3D0448CB5A
CFDAE1BADE9403B90371C3A07D208948AFA022A69C519434B6813086ADF518D5
88E0B92072A44BA1B3EBB630A13B7AB90992E85B6D67361C8D96F3E0D826FF37
17B67E4B1EB7BADFD98D7F4FD17BECE740ADF13C141EBF0A91CB105DABB32FE0
55086D56A0D358841D15FD349E6B95512E4EDF4C430216FF85C2ABE995E4B40A
A6044CC8820AD885C07E052B3F91C2E9A1D163BFFD210F7BE95B923E2500DB50
2075106DB541C267BD450B25B670CE80BCD068D4DBFF2D82634175B61FBD3BC3
406131F44C7D6F18D375D1F2270829DDF29DC14DBB58A30AC193245D18DE91F8
AB88AB548D8138605BB5A50073295534E314366E26665AE70482B890E4101D6B
60E4F3B37ABCA1346DAAE8FDB8DD9C832EFF3E73BA470E2BACE7B8515CB43388
C27AF99FF9322175CF8D4947E6B3846AFF5163E972156847F58A66660EC8A3A6
5FB47C9F637B4CBB4C73B6A080B0CF6FD1E9665E92032540570FFCC747C67C50
822811AADC404BC7ECD1673E8AA6C3A2F1D82F39430B58C29145E2F1B679C46E
94EDC711883F1E4EA84117A54757E8895A40401A26E1437B39A2F65CAADD6E02
D71FA8AF7453668DC613F326A3344F74AD7AC67569AF399385500ABDA5EDD3BA
343CC5EDD4B558467626850E752B9959FEF1454E53E7A3DCBC2255AD8F6AB4FE
894455118A61C58840CB68A925ACCAD75CEACE863D806916228F0614191A1CD5
DC9BAE256018615AA3725834519449B0A88B4F396654E74099C007930ADB1327
DD119BF799FE3B0B223E1EDA04FE2DA7A1C879143E1C33B6C6344F4BA033AD6F
8E88C33DEF1977796B454BAB2494C930F492A518E8198C708A75FFEF8C49C324
A718AB59B889DED521229E741FFE53F98EBE88B0405AD523254FD3FA4BBE96DA
DA1C27C1C979A0DD4E61C3B1F4C4DE01E42F1C4435EECFC02D97994BC8AF5270
E7CB1458D76ED0229C5FFB4A23B8716018F9050970895D51722CDE8F2EA3D947
DFF374D84915D5C5D16463A6FFCD079D1ED416C4347BF831FF0C4ADFB61295DC
4D5785BB0852BF472CFC97EC174491CAF961AB90629F055E75DAA6D9898E8653
5BCF379816CAE46FEA62E7BE8E9B953466E51828172C4DBD0E1BBAD1CE28B5B1
02B3E36403BE80B49A47446A6677FCED438F01D60EB10F478C89528FA337D0D8
88D3FC123C076507ACDAF783A9A6E24ED73BF24B6E0F11C13E532DE5F70B1058
93FAF9435086F4932783C7D4837170DB0EA31A11EE76B1B9DFA42BD7AC6B7A02
60798C30DA069C1E3F3211861EA327F5E48E1F440F6ACFCD1FA8A7E239B78825
56FED1C49BCEC941D4BBFED805E0AFCFBC77850BD291FA4F8FE707CB4E8CBD1B
1EF055DBB7929E9666F539079840B5A6B6E1AF4FB0AB0CE7F517E28F67D1FC76
2965CD2C4EB718886E4FF6A9F8F6EFAF9552AD1D7CE47CC42473F8BBFD598652
5AF9535A2078DD3E501DF0241EEAC306DB1C2695D6DAFCD4F28DF3EEA1AF6EFE
970EA9398CFF7BF2CB96FF5C8466B532329C1A1C692AF1BCA770BEF3EFB2A9AE
7EAE9D9BCB3A2BFFA4E1AC78BD4BCFB3F8ABE7FCF57A38EDEE243732C37D7C00
D1EB611FAB9C43B42E060EFB666E37CC88A3897C796E7888C308AC989C902067
EC814CCC3CFD9BCF5CC98FA817B5B18F75412585B4ABE9566ADAB63231D47AB8
10EF99EDA69160B0F34BE6F66BCEF2C09E14B911A0A78C455C560DD52D1C26B5
96C4BF214AEE04362F706283C7C60A1D9E7E1FD69388281F0AF776D75DCD2B4F
E22AE09DF3F3600FE89631FCCFA1C86D5599908A58208C6891EF2A7E3DFDFD80
8A3210627D8ACD389A891F44757715B5DE31BA99A18DCBA005579E975F06D383
0DEBBB647E190D2B4FE79BAD850E252B5E497D9D7E2C657F69018EADDFE7AA24
DF936EF090A072B12A54B08E28B207615C21E2F69C1874E7DFEDB67DED8A92DD
B426A45FEB5D3972B2A1CD95EABB92D06FF84A16F18D71E879B9DF64FDA4CED2
4860BDFF44A40F73E8B8B74D95F56BE2C3E2FEFF275A0A7A86DDD9B18BBA4C4D
36319AE0FEE8134AD49FC0BBBC88F169C0A98CBC205F1325555392C602728ED6
BDEAD6E16698E241BEE3F4D1F8DE14B1F176934FA8434459555FE53578DEE28F
AD55C4DD3DD4EDFDE13ECA429D0E22A4D1843FCA026DE6A18E1C7B7AA89A8E24
F4718D75EE4F7E6EF769C75B0425204BBD60B19F6BA9F9FBDB2C612E225948B8
F0B29EDDCAD241CEEFFDFB96F10183CD1AC682A34136E9807BBAE4A107F6E997
7EDC772F5F5E20463A4692C08E8795B042FAD075C7407F0B02F907BDFE0D0F59
F2B9892E564C911BD0A55FE101A31B50A49CE6E73C84F174DAEC8046F226C679
E4E72DB5B56C62C1C0FCE1717330A9E42033FE445048B1C6ACD66967FDFEF8C0
CEF2531704442CD90A2F985C8DC6F726EDDB6938FF6D2290DD3CB3FF76668026
F1ADDE0478C9FA50B9DA41C1B97CA8A4B09A8FA56CFF0508707F720E517C6BEE
A161B32FC2BD1C2C38DDD27517E03903801BCDFBA25C728008A0209D4FD9262D
A1ABBC48269E998A8BEE709E2ADF6A3B11CB2D41AF76C1293DFDC13C02B9817D
DD31AD9EFDFBE298FE130C6886033B934FF54C29714FD3DDA1843CFFB1F66A5B
87BF14CD1763DC7724A5EE7F10FD04479236E686A272F61A2AA0CA48FC9F8436
6D584A7F892028166B3C14AED01D2DDE49934DFAF23FBD0D48569AE0930DC752
E9010AA144A468CF66C6ABE7D64E573611F6C452D4582BCE260044705E47F8B3
2F2E9A38A7901621A837420BC52D7A3676925D2E65E172A09EC0BAB259B867D5
37549AA13370329419821AC73668EB0C00B610D541A722BCC16229F8BCD298DE
5065EF50444823ABF3DB6301A87474DBDDC7CCC6490D4849DD7AB4F6FE6CD6FF
CBA2DA65E1683133DFDE4519F59EA07DF8610DF73D0AF8653EF3AF88986B2766
6F267D8C49B54056F299A1FA97541404179EACDF6D033AE8C289BB65908F8F4D
0F5AB516447D3BC4DD111057F1998D3E98801EDF3E91C8F383169426068E3E68
2325D3F4663BE9836287923FFC893FAC76AA34EAE2BF4428E1F2ADC486385BCD
11A6ADF3329B95845A6FC2871334C875D56152038E3288EAEF9AB74268C48CB6
FC3B37C98DA7E21798BD6BD474AF0789734886A43060EEB1F391AD2EB29E68BC
F06EED86658AED94AB16577D30D88500EAC47842E030991C5B878C0BC0737549
C2A0613D7E43DA1BF67825400D4D367349D0513A2A8DBF40AA9ADAD8453FCDA9
9F336B778D1C71658BA957BE1ED0D5A8354437530292FA4723738E1B94C3025C
A18768335902002DC37F8AD93973FA5C6EC3DED02E9AA0004ADC7B70F3C5FF3D
F656792AEAE93070B96F06D4DB2CC78F656AC60123DEFA0248CDEBE20E2D36B9
C417942738C51DB56440A6FE2C391D237FE7C2C5503F399BD352BFEA7CF8E7CC
1A49285718644039C7939C97B0275B1CF81D7B9DB6A9AEBD1E49ED3D44C7527D
AC507AD6B279071CDE932480FB6B605CD0CF33353BBA34DFBBFFCA9599F143F1
F9299A49466D3936DBF7D6E009795E4BF9651BCD34AB9F383201681F3FA117E0
33D3F2132D5669B5A9C403C69B4A90351E868ABDF786FACD72995A4CBF6944D0
5F2AE93C0AC77DE80B4DD8EDB0234082B2E4CE62A0960601ADD9CCA023922458
C03C8B3887E21FBAF85B2741B896BC16729747D20B4A14E472C4E2E6E99910BC
C8EF192E0B1CBB4C168386ACE87BB99D8C5B720F3B0354635D0668A8D2889929
F6B6B01315CF058D0AE460F2A4967CA9FEB761E17731779B3DC7808C8667D0E1
4A719F7B025D84DF515F79342ACE69B7F97F64F1113C87AB9A3960D818F5E8B6
D7488304A960254CCAF2E39D5692B5AE7E1EC9A79CA6B8C91FF58A31E4CACD51
BC9D91DAA09FE3067A51F4645E1663DE94B1438B4AEB72DDE3C0C98C847048FB
28EC5877B0F0756AF77FB79F56A0657B17B11FF58C133766180F98ACAF744F05
7E69A4A294AD4EB93F4A4D7F0EADF97C4346F59290E8EA694CAA236196A6AEF4
3FA08297291BE8B3616FD23E1A4DE46B44A5379DA6CACD7CE5A5AE82DEA4DED7
6033E9DB25D8DCF818C01EC10241F094782C8C2702F8C22282771202EFACD338
EB52D664247C16A4E7B623599A3E989C48CC105FAF035ECB2C4D97E900FCD6F4
5F42E946C8D8A6756D9EB985E45AC064B38CA8F4749E811964207D49CB5B7A96
8ACF660DD75982BF27A3E30B75BC40B7870D7DBA44E7DD2F65C460DEEC622B51
F0DFBF8F34C5439576C93D7CB534EE038177ABF904502C5D1CCD295CA59AF62B
9F873BB02D57309A04AC28DCBC709901447D4C2B87180278229AAD981D97E65C
26E92C4C37558D1B7A9B2B63B92014DE426C272D0254A770915648C0B155D383
389F4031122C223E12BE7503EE3DB171A7220F10A21FBB5035538AE3BDFBDB82
95B0D5F985A7E54A4F00BEA26D08BCC1C5A7189084383407CAA3AB7DAFD879D8
019026AE1C20E30DA7FB54D0AF1DEEFC4A922511D8E82B870C9FCFE9DEC455DF
2B17C76E11F2DF219D372F01CC9034F6FB83EA54A786DB827D3A680BD9DD0A01
63636B944667F0F2CD049F1BFADC46D83A24775DF714C182799375E4B6F32713
96CB9B593EB3FC191D7F9B9AB97A43A937C6E65A16B60532377FD45A76410A73
999AC908A421EDF1709A4A5A3FD3EA50182AB44AB876E726D73A03E934CCBB50
5AF4B39613DDA296069571B8AA67FB82DC5898B76E1B237DC6146FC62253FFFF
135454154F32B2C11FB9727EEDEC6F15E7F3F48B416A52C346F1A77AA7E803D1
61C58C7407FE2BB8BFD821AA9C239DBFA379E6B976450AB0DCD3E7E21AA36960
38539F33EEAA408EC98FA9665F5C0E8BBA3F5F3E6B1B4B4415AD908BE1AF3C61
2DBBC94D56DD8FCF8DED9AD6712A3E357BD886CABFE0142722D81DB6D3E71BAF
AEB4B0BE5CE51D10F3E6EA34CA2996FD6B4C77E0C8AC466C39C166144AE1DC02
32CD6178A584901F15F3F04845517CC37AD48357D05E36932D72D9D36F9D35AE
9E14FF1683A1C8CB635E9A46AE0485235F2CCE74E44E68C1CB42A3F558AC1E4B
E772EDDE46500B8FDE630E11EA520836CA068D0592DD7D6C7045FB8FDD76D7D0
F4469CD7F518AB4EEBF088F488429DBF54E1DD4F752CB58751A1896863F7943F
8B47F32593C4809C15B3D0A3BC4484739EE026BCA993CBD00551EAB422CF7D8A
A76A5CED53E0EB42B462860D5A420F1EB2CF9332B5FD19202D78D5FCC485B879
D44B77B72587D88D31F8A72BC1355CA5CBC04EFB2AB0AA795F5FD89ED6A09BA3
402609C313FE341178CA574251CA8DBE38D2673E6952D2006B171BC74763613C
A630E1DAE9CD29142C18B13F6037277F7025D44531B26581E71CA588B1A1871B
2F15B7C6C03957BF0F931BA2FFEAFB430805520CF0FD902A096ED868E867CB71
C7960C7EFB8759622796DB18E77CC7CD6077423D4F84F13DE2BEF624E4904F97
DFF6BC882C91983FC56E92FD363FC2EEF96BF17DBE42526F3CFD9497CAC45CDA
D72AFD1C623F76B6518F9DE9ED2EB78DC915EA8865C78F2FA56532C6CB0A772E
CE7616FA610E4B92CDFF4466817CDDCFF70F686043A31CD77AC794819BBD1BD4
C8D2A6D87CFC1D8E3464E63D5E5AE47C13113D2EF7BF76082EFF3750989B358E
CC8084A5F5E40F01493992757D927A9683FBDB070612D7859AFF12A72F5B49CA
7691E017B7C288A192942ED9658E29B5E823960A3237F3294DB44CC3C654A5ED
5DAD819D6B63EC7070375C24E041D64E65D912DA3A7F72023799336474B9D5AA
9A97EA4F3443E0
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: MSBM10
%!PS-AdobeFont-1.0: MSBM10 003.002
%%Title: MSBM10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name MSBM10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/MSBM10 known{/MSBM10 findfont dup/UniqueID known{dup
/UniqueID get 5031982 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /MSBM10 def
/FontBBox {-55 -420 2343 920 }readonly def
/UniqueID 5031982 def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name MSBM10.) readonly def
/FullName (MSBM10) readonly def
/FamilyName (Euler) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 63 /emptyset put
dup 82 /R put
dup 110 /multicloseleft put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943E919FB4E3240FEEED78EE63
0677FAF39AB2543D18C08A2B98B97451CD42CB7893DA8601CC0F45A65BEAFC64
EF72554395DA801CF2E9E3B03F65F1BD98F8C5F8EA06D7457842303C1A817E7D
69821807328AF426B9DDBC188A79A66FBB9E6193B4A3EDFE3136C6574B9C4C94
E2CBA4FE7997F949BB2DAC0D329C2AD8E4095BD18A037AC9F77B794FC389E5CD
56CC4C0B74D64FB0D02C92B88942C18B6DA84D4CF482DAF3A01E80BE483AC6ED
AE98F5F3E49BC762EF6BA937D528E751D9588B0A1E82EF0A5998150EC3854472
5A91EB983915BC1D6E2C3E615E0267B39D6937ECE0EC16162FE76676E5B69F3C
BC1AD934BECA284B89F0613B70876247D768BCD246883CFF4D819D6265302730
7E4BE6B2FFE7E91CCB8C6D2AFACDB4C5DB9688153E1D6B2DE136BF7068418A4F
2D1C0CA301B1B97290B46EE14B8286A81E709980F67382A5132F01B2D44DCFF0
9753E776AEAE2141D580E64C82598DAA6DA4057FFA9D02C3B77AE15A50AB457F
3FA5A10A3C986B22F8E154C1E564A55D3BE4487677613DCF793F7E1B57C9A925
BC57746C25FE567719A9EAA9CC44F1D0FF8F92C03132B205F57E3AFE9FB66632
D3FB3EF5BDFB9848030527FE759A5273CB81DBA2719611355F43E34F8FD7D0EC
9BE47685A2D122C9B60198A430C5F5E3F972376F0FF4BA52BAFF64095F7ABCBA
022622692231FF87514FD912B80C07A0EDCEECFA629E2734B5EFE2604E8DCB24
32A4C691DB4CCCF19EF897A9F4EA5B2B5AFCDF87AC06B93669F3007C1295E016
FF0A99324B80E37020B1080E80949525B3278DF111ABEA48E7182B6F4DE2DC90
B8D31A953343D5DB78B1F2CC6CE631EC7E3D0041A823DF2A4702AAC0F0A2F018
E5ADCD42EF2EC8AFF6F4705D30042BE7B6F866C14AEA1CEE04DFF82BF14931B8
D297C38E6DA6E587C23EF0864F69BB0DBC9C1EFBBB97B92BADC336A4AFAC6A91
0A6B158DC42E975CB5D8D2054CEF367FB112456AF50684C41F80B1E7ACAEA855
15895421CD4FB9817B90833D98C453B3E6E24D9CEB5516F3FF8AFD668F97C05F
88DAD038B253EACACE1A07F2ACD650686D1BC9BCD7708FBBC949FFD786A0AFE6
22A65A46C2B74C0C47A1ADD9C56C1BEC7F9EACE36C8AF3ABB950350D2135955D
E3784D1B0EAF98A568A6CDA74D65FF39D00474391657A34AB0BBEC38DCBB0281
45C6EFA13E241E76CB8136480492BEABA0CEE2A9B11D13067C8FA99E252460E6
0CFA4AE08699B6ECE8D7997596DA70BD7738E375B78E562B34F4CB06DBD79ACA
3ACBB5D4E20CBC86EF41DBE35569888F9697F80591C900323EA65DFD2ED28A60
3EBAF1BADFBC8535E29200166C7754AC4D3C44A43470CB16959C20CA6F3E38D7
F94333BBCD5E9F15DBC0F5D3778EA62ABB306851AFCEE730EC0238E5D025DAF8
F34B2EDE467DE1DEF3BDC427A991DC927F34A1D7190D864A807AF8D7C410FCE3
CA89D351004C7112F7A8AF89CB929A4240F7DB3F1C9BD1480C0A93E9F0169AE4
094504606F9DBF72ED1B61087ED68945A9B32D8FA4C2DB4A39DF1B4A560CFF57
4438331F517A01A878F1FE0DEB27EF839DB28A7B0412AB4352FC598E5848C64F
4D5CF07F01DC6B6232635B520E28AF57E5F689082BAD25997C888D2B90B01250
00858C9D219886E26A496F9DFC1EF224D0362B7D3C463A229A1056B580E9DFBC
E92AB9DB170C18703B78AB995D940397093C57450460667C64257E6F1AB313C8
8D4BA9805C368224CE4554E3FCFDA609851968F95FF8EF038DAD0C7EDB7BA70E
07A6B7BB60863D23B4D5A8B8F1E5C0094DCE44B68797FE3039B58EE97B475014
2F4B810A60DB637486F5A5AE1644897196DB9A77C99D7E5F72F14C5B0E12FC1E
9F672BB6662BD26A920931D03E4ECC40CDB49CDD0EF39487564F204D426A6CEF
22B5F28CB21EC1103F3E1E7E61E232900EAC5B50AB93F2628907D042E1C3621F
DFD5418D9C8A2A4F6272D97A58854412B725B7F3082073D51D0F9F5AD2B322EE
0057CF94DCC8C5A33C3325B3A5BBFB6B547222767BC4BE906358C41F18E4E471
883E86266A3A1957E37BB62C90C6F808B6A551BF48CB5765361DCBC46140A761
B436B8F1BF3624BD2B8B992FF8B921CF71A02E6A75C1CB4685BFDA280940090C
99E372C6CECECBD4F69AF43F48B9BFBF
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/UniqueID 5000793 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 61 /equal put
dup 91 /bracketleft put
dup 93 /bracketright put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E0B5622DF6FC4BF52147208D9A91EB49B03BB40DE7F8FBFB566F251942C8FFB1
1DFA50465919400C21CE4724D12E4EB47AA5F392BA927329DBCA28A78FC1DF2E
6FF27F4E4E3F8971D7BCB5F3FBF8F30C214A26E5E32E0E8CBC71BF20AE573BBB
163DD66E89F2C4E2B1A1532AE81C060146F755A1ABA3F1365FEA30B403DE7B22
76F43ED8EF5C8884274EC7FD5E57E10CCA8B09C0D3FAFE7F9122F1F259E133CC
DF1DC4CD54AFABF522EB5F04445F241CEA612AD474377E241B56E22412356E46
2A7E818027FFB057270EBFE11971EBE66E203F3FE3B48BCAB8E6DC985E41510C
37D22F2AB42B414279EFFEE416CF4B52A51B214D3F826575C60D5D4C4CDAF96C
2A8AE2BAA62C353B3B81BA71CF70354594D933D4A6BF0124981F4156244DDB78
9330619D5B18F788760796E2BEF60B790CE855AE62039F6E23923F4DD6309DD3
E47CF1FA44EF753246BA20720ACB9D861F331CA1739CE12AF94A7F3B9119027A
D8275C9A1B5B84158686025BBE2AFAB98AC164C9FF51091FD936D27583C816D0
73CD893B009FC205B27310E65C1ECB79F35C1F9BDF4D32E3AECF0E6F4EFE0D61
F15C34E770DBBFD4E49ECB5FAEE2F5EF559C1C677C648926B5CD10691FB92B0A
A345AE441E622CA540193951C15763CBFF6A344893E0DE5A50355054738D70B4
DC61569A9CB25021A1AB26F7C1DAC7BA99E4416C6B379D9487FDDB85B3F7617F
747B71E7FB759E402F8D559FC4AEC1D1CC40672A120DC0E9B50E4C603CDED14B
3FDF8501E76B80E3B89A010793F4E2895BDDB400214CEFC5AE111A59FCECEC01
F1ED67AAF9B8970DB7AF25E32F81C637405E3292C48DAAA023A3F56A2884B8E8
84D9F426AB774A7BF5190A15EE9BE0C7219D5A81242E3E6C280CF6E73BE0C3AB
BA0621D15EB0B957204CE3CF8764FDEFC911B5E379FF2A5191D8A7F3F060D1FE
3A087D7E9CD5DF45EB900CFCCEBCDA451565EECF00E5EB279F9AA6E2F0C79EBD
F0075A6941D1B39FA89EEA50FE11AC5FF0A590473E33BB560A349839F83EBB58
84FA406ACF07081EE23B0ADD014967C6F33BB023EDBA0192D2F7D229905B2783
CB6F2C6544FEBF93BB0FE0320DDFC90E3FC09BF16EE599334EF23956BECC8431
C1B68717673328AACCF795D5F5EFCCD9BFCA0968381F3AE06B1468849270A5C9
C75EAE740402DED7F97F1134D15742D94C8C8CB48E3C9B06E2
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: rsfs10
%!PS-AdobeFont-1.0: rsfs10 001.000
%%CreationDate: Sat Mar 21 18:47:14 1998
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.001) readonly def
/Copyright (Conversion from mf curves by Metafog (c) 1995 Richard Kinch) readonly def
/Notice (Copyright (c) Taco Hoekwater, 1998. All rights reserved.) readonly def
/FullName (rsfs10) readonly def
/FamilyName (rsfs10) readonly def
/ItalicAngle -12 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Roman) readonly def
end readonly def
/FontName /rsfs10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 67 /C put
dup 68 /D put
dup 76 /L put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox {-2 -300 1240 728} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DD8F41F8A25
4AF1DC3456B9DA8108CE7F2380A151DBB59CBB616BB498185CD0D0DE28290A9C
1DB96124F5F796C7A2FC57B079E292DD1A2E5EBB88585421F81BBDC63FE33ABC
2DF705A2BE4F6BE21BED49C3E2FC3D528A348CBEF34339397282607E56471B4E
B78EA8C9F24AC14AB83068335F7974D7262C18BEC4AC5FB4CB5E0D7C410A3F08
57FAC1C117ED77399C1E264A853EDDA05A6117D3DFD28F96E44B1B8D3995E42A
E0B030F113EC027670E66FF845D9F93808284DC73F51F44B4C210997E261644C
59B3455D7C3D3AFBD65E28D1AA774273FB1B6E9AB4F56464B0D56911EE6CB802
F1C90982836A63EAACD2B2E9D07850C716F7D1291C59433A10F31CB9FB2F2512
1CE1F7F343CC06008D111D235C75DBEB8CE22E88E207F0ADDD18772276176BFC
F43EEE4F51613C545A2A49B34E4237BE57CEDEF63179B73879C2674AF40B79AE
024EF39D4D01AA6E8E83BC1D5F393AC1F78D133A004DE64C4AE52897C279CFA1
C87E605E5C1CFC2F4C72A0D0F9ED40A8B4F8E9EFEBDC1D60E353DE792A091B4C
39738379EBB7BDCE4D06844931D77A2BA45D857EC30ECCCB37F85274F283C27B
4C9BDB119847F4422B1FBB4059A5ADEAC44D234520322E2259CFDA894D6148CC
1E0EFAEF5666358F343AA0C6ACCEFCE6F3BFE30C43C85ED1FC565196555E51C1
0395BAF253393AAE179F635A2DC0AF3A9BD67D385A9A96A5009D09BE5AA164FE
8A48F5DFBC3C2C7244F57C91356ADF25AE852673C48C9C3D4A2D1F06BED56256
869E52850D83D2A78DA51010268631BCF5562B70ECF818A741398D63ECA44D23
567F5932BDFDA9520FEC5F94C434FC369F0BE91DFC66ADC9B2FE8F982129D9B5
C6F445770C486BB3A1DD266A5E734914DA7311F69B964357A54060BDA2660513
829F5444920C52081A7B4B17509455B20B12790277EA78B067E06E2E4289DFFD
5EBEEF83D6964019034E3947078CA66EB88EEA8E8B74F9FC08D98CAFC92EA0B6
BBE53ADC954B9B3E544D9823CF55920502D0BCF9BCD5F00DE2C2A20299A4423C
3ACC13EE7A52F33F5224C40CD4580FF125D61EE0B245E0F8ED79B87E300E3F5F
6B8B75612B9483BF4BEFBAA7CB84492001F49EE9AD1F15AC084A4B9C7CDE9AB1
2D3014B696EF104221F47D4750A5501069A10329EF0785276D08858ED36F7F94
048ED226E77ECFD3A13D2D1BA728ED2DCEBD8D3032A07CBB36B8FB7CA00ACD89
0470A2D7D5646742761EB700766D975EFEA333972193DBACA28063EA72DB6C8E
32FA349461C1A8946B78E05C111908E46A3BBF2B8B22DAE7BC3650E52286E6F7
0B173D50C16C7ADA4B3A932692615492C046257CAC1E154F6CB3C4C682AF7623
0200A94EEAE036D17BDA41C7A0CEA77D22EBE6B980F6B2787FCE39B566F1E106
973DA41EA098FC48061FF5440E6486E47A6E9FF167D5A98201A8AEB89E30C0CF
49A83DAD168CC6D148DB30F3C5EDC75F48CCF6811DDB697A35A70BF28CD25D4D
949958A23E1AEABEECBCAD9B8436EFA653650A4C03584C7CDECF5CBAD46578E8
E438FFC49B3B754B5CF1AC2E826ED806E37B7805A0CED7C26E24B0347FD347B5
F5328A0DCD45258386C9BC24D496820074133B7D764F042A08159E2F5580C1D0
1CCE2EED81417C13E56259E0647EB0FBA59BC1823AB55E0292EC424ED1CDA926
9846B4DCBE6CC10060A05C42AAD592DDA0F00EF322C14FE877B822205AC843D9
6F4F1FA4FF8DA87B67D2550E07422002B79DF965A0F0B78A00B4CF55F3E629B9
3755EC3B3F8409311CD2EBFFD373A272EFB24F539901B1C6E279B8BA812507CD
DB5CED250E6E00677ECD2C8A16270C1D4D5001D53A4A0DF4237220EA2B2D5F47
73FF28C325F8055BD86EEFB6A29EE838D3D933E0DFC55B5BC46A25A4DEDF375E
B11333F1F9FB18086B786B189A3914D44C2472156F653D92F3A29B24B46CD972
3E766601153066779A0F0FECA7EB851571A49B22664FA8DD99A7234C0156C033
08CA0E7D3A15877D99D1D4CAEFC629A69139D97226AC852EC6B8346B3662D48B
C6DF9093F4CC330800A21F05870D92A787502F12669797AA82552C4A23CECE7A
41176ECAE8E53F7F28B468E9E83B2A898601065F7E9DFEE0D73CF266315EFD3B
685E3AD116CC135B3654AE8B32E8F0FB2049F39C77E8665A68E57003D0EE959F
2F7E5F29C8A6B0D397D16DE512AAF455AE6D68DCCBE48EC2FD163324F1D8825D
7E8041DCDA23DCE19D607BE49DCF2883B0396EF81D7DF761049F59BE729B418B
D18B623C122D5A8D771A4285C8E623253AE991D406AB4C1576B0D77883881EEB
48C46C46FDA5B65AFC6A4E667D2A203D5392B7D24629CF3772ABD297D3DCCF13
524CCF2E4D3F7CDB4F1B3F0130D25F3E8EAADDFEA692992FD834C61F15BC123D
0E532F136C20A15252AA9853675A7777B3DF08EE4FE641CE784E0482547810A4
442ECACAEA4FC9A9A777F70E3B45A291D0E558930AAFD58ED6FCA03A0468AE3C
E4F842FB0B849A04A9DEDDC4CDEEB9FC535C73F094CDCD6FF6886BDC8B8265CE
F767024BC61450C7C5BC10F3D8364C3B821C05B47744C950F6C46BFF940EEB2C
AA486979DACE845754A1B4FD0F7DBBD7BECFD3006803BE68BF8F5967F62FE959
7B9620F991345252E07A666DC9577F1E7A8C43942054692C686AD75C9DB83756
504AAD665948AE41EE7442326CFC8C983DB92777F3F94EDE040B796FE1D9ECC4
F98B413928CCB396673C67C4EA7FF11A6C445071E9592D7196980091D2FCA419
BBA8067C6D0E0A8B1740BA60D06285152ED20FE752C711BD463F2689D8FF6EEE
95E67118408F11C81DEA0CB9E2E63DCAE26D1D9B14311A27B4B9614B9C4BA44C
9C416C746B6EADF3704A0E32DFC90B324CA1AA0B96665A866D873D2CD951AFF5
325E4A4CDD6C6BD09DA445F686AB6FC6BA2FF4AFB5670BF4A4BB9DB9853AFB76
8954397E1B05FBE3FE7E0472911D20C99100B07D31FC0F0901BAF280D9149EE2
0B6FC2DCD72AE3076B2F56A779A100005422B532E9D78F9D1E743DBA1121567A
D1B2EAFC502ACE15A107F8A98436C8324B911ACE876D380333D618CC1C33B3B9
F29841D5B558CBF256B42DC7CAEB1A2F5AA6C553EAC0DA7CA253568FB6B01B7D
C8DE48D9B0FD66FA864961CBF066F27F616A40BD4FA7B31081ABACD5582CE172
F5C66B164E86551FAD306939BC864ABF830467F367770C2A873B15571E0D3C86
87F4915BDED5EDE76BFAC2FDBAC97B144A9C3A6534BF35F3A2810C6E297877C9
10C9B6EC56A8547B6F023CC3AB3AFD73485DCA7CC1BDC6562A899B2D2804A8AE
0ABBF797A6B7ACD25B5E28A9F1B154FAD575491D2DB5BF8302ACE394B6A527F0
768EAE6E4D07A1959A47BDC7ADCA042D91C7D7172BB4C91B47C8F803FD7A2DF4
B20FC7BA10
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.0: CMMI10 003.002
%%Title: CMMI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI10 known{/CMMI10 findfont dup/UniqueID known{dup
/UniqueID get 5087385 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI10 def
/FontBBox {-32 -250 1048 750 }readonly def
/UniqueID 5087385 def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI10.) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 58 /period put
dup 59 /comma put
dup 60 /less put
dup 61 /slash put
dup 62 /greater put
dup 63 /star put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBC7878DFBD546AC2
1EF6CC527FEEA044B7C8E686367E920F575AD585387358FFF41BCB212922791C
7B0BD3BED7C6D8F3D9D52D0F181CD4D164E75851D04F64309D810A0DEA1E257B
0D7633CEFE93FEF9D2FB7901453A46F8ACA007358D904E0189AE7B7221545085
EDD3D5A3CEACD6023861F13C8A345A68115425E94B8FDCCEC1255454EC3E7A37
404F6C00A3BCCF851B929D4FE66B6D8FD1C0C80130541609759F18EF07BCD133
78CBC4A0D8A796A2574260C6A952CA73D9EB5C28356F5C90D1A59DC788762BFF
A1B6F0614958D09751C0DB2309406F6B4489125B31C5DD365B2F140CB5E42CEE
88BE11C7176E6BBC90D24E40956279FBDC9D89A6C4A1F4D27EC57F496602FBC4
C854143903A53EF1188D117C49F8B6F2498B4698C25F2C5E8D8BD833206F88FC
BD5B495EB993A26B6055BD0BBA2B3DDFD462C39E022D4A1760C845EA448DED88
98C44BAAB85CD0423E00154C4741240EB3A2290B67144A4C80C88BE3D59AD760
E553DAC4E8BA00B06398B1D0DFE96FB89449D4AE18CE8B27AFE75D2B84EFDB44
143FD887F8FB364D000651912E40B0BAEDDA5AD57A3BC0E411E1AD908C77DCE3
981985F98E258A9BB3A1B845FC4A21BCC54559E51BC0E6C22F0C38540F8C9490
88A0E23EA504FA79F8960CC9D58611C519D3ACDC63FB2FBCAE6674357D7F2285
4BCC9F54D3DA421D744D3A341DA3B494BB526C0734E1A8FC71501745399F7683
FD17EC3044419A88C3979FD2ABA5B0130907B145A8462AAF0A9B511D2C8A7C7F
347FF6AC057E6512902BFD2918E2CD31DE615F5D643764E900B60287670AE18F
FDE15545D8BC69591A8CBBB275AFFC9B14BD68DF0AAB32268FB84844D4DBC7BB
C591C1AC5102C50A9C7BAAA848DA88B0519F0F5F0813BF055CF0E3C86F633A04
B779D2E8E656DB1E09A66A85FE21CA8BA5523F472A229E83F2C4E91ABA46C733
F3C7B5775B06C97782BC225C46385BEBDC61572458EFC5CF4190AB7A9C1C92DA
29F84BAACF552089195966E3AD9E57CC914D20B6962BE80429A16D4DF1ECAA66
36C4343FADF0B2B48F12E2EB8443C4AA29D00949255F3968617F98B8ABD4CC12
048B838EE243A21AC808BD295195E4AE9027005F52258BFCA915C8D9AED9A2C0
80814F79CF943FBE3594C530A22A92E11BE80FCEC1684C4F56712D5846B0749C
9B54A979B315222F209DEE72583B03093EC38F7C5B9F9BCB21DBE8EDDAE9BE8B
75ACE6B12A31083AC8348EC84D1D29D2297A266284B7E9734E207DAF59A25F4E
4AA38509E993C5394FED76E6A2F25462685C4C86C6E8CFC9863338EC1428BDFC
74616BB1BC8948B0ED4C87C15B4405F3A7796F9DB3798FFFE8BD0A94E834817B
D5E9812E308D0CC920470A6F2CD088FCB80462BF7CB3F039A7DF3DAF5B2B5355
E083A385CD2EAF0FC181E40E96DD7E9AB9EF5C7E6866A13B8A54718E950FE097
EF0951A357114F18CE9933D28B3A77AA71E3CE884661F13284BCED5D5FD1A86D
543E588FF473DC2CF9A4DC312500135F29C2D0174B32018C8DBD40EF9A232883
710A1F2AB2CD11312300ACDF789A9B7B93D2035D81D1C84984D92D78A53A00C6
EDA94B24BBAC1AD17774A4E07E6F74ABD90415965616AD540C8ECD8C3A44EE4F
7F4F6BB6238C5062D63FA59B7BF08BE93FAEA70A2AB08FBEAAF7DBF56B95FD93
03CA406543BA6C9527D0DF01F5108D31A51778A5EB1C93F27B72B46146A353A2
01CACBC829603B9989A87CF64528682CCBA0562A8165B185C58A5C6BB72F5E89
500ACCAAB8ECEFBB2640E99EAEEC4EA979AA793D013D61D8ACF8784FF8D9398F
F6A252A709324FB39509F0B3A4E725E82F53543383C6765BE556CC897C758208
AA3AD37B0406E4A79F8F0A6C1983FC73E71CD858C0DB66ED66D5D992978614EE
1EA91EBE191E082EBA1FC040AF19A2202575C2EBEB8058833E3520FA03D2F915
85C1ED337E457B9FEEB0C6EF2735EFDA6E0D05FA641BCF698AC6B97751E8306C
4DF00A39B8581FF53DB8F8525FDB196D85950906CCB59B8EF171349AA3B567B1
6A00819947A995FB383C3C1709C9A2C113B2E40BB832B7D4A0FBA0B16A2C455F
55809CC425C403E9668DC66BE45B71A81C332FD4DB279D22A2959962304A8F18
085893DAC61317D24A8F198FDAB95F3B86F0AFD35047B868A9A17037A2829A02
BAB042F75F349E197A7EED41984C2859754CAFD0251439921C248B463B516951
2E1322C80D73F9CBCAA63A585450275AC2492E4D3FB78E800F788254DB5E610D
CF788DF5C70FF99892BCDF16133E34B24B77C8F097F546B87C603DDB8998B66E
BACB68BA27462AF54AA405682EC96D701F0D474DECD5F95CA2102DF639EB169E
D518162C2BAE45FF698B6DE15FC6E7DE48C336C40A670FD26952A6BAB09115E1
991F0073419F2CC2A1C08BE91096936AA0C37E4ED3CCCEE235476074B8FF1125
6BDE3701F85532D8BB64CCC927CC335281C95EA689706F0AC717DC2CF680C754
E5EFD7FA4BB8880B2B727A964C876D4A223069D4E6001771F0E23EAD2A4BBC80
E76675297B2EF05F52BF4E71B3EE2BE3048CF088C79540113C66AE98B2FD3CB1
B0741A215FD070882C52765009D7D711DAA2508F19AE7DDA15229A856AC49BC3
4DDF40814FF96500E4B9B02D412E94623C5FDCC76C0FB8E42DF56A904FE49D65
1DA7C53901B2EA71AB658A464D3ABDE27D9DB8D9E0B48F64E61A2495AD5D8DAB
B5E72424AD017DF37964AF911BD7FA21A5EB4775DC8E95EF0C0EB856B00D89D7
8172A1DE8530767D317B8256103E53CFB877E10686A04F5A08F8DC58D843DEBA
FD5F40597588663D103689F6EB3EB14D06E18C8078F2538B43E712DF491FC5C6
AF639256C8C6134B64D560D8476DEA6329D995E46CC4BC78841C59E73648B47E
BFA7DE0846422F738454AE77E822A083405289247BD7C478BE4974F742CD6051
E99FBB1D1B3FBABFEE855174734EE45E87D0AADF32B1283B911162A9955847FD
38944D70584FAA6B1A7191C5C134B73F98EB632B69E2F0C0F94156787C34C8A3
7622A029D58F9626B74F8A8A1F3803E0BC20E0EADEB1E99B70F1BD9F980FB751
2A842843DE42EB142A84D5D3138629AE9EAF6F3479C423E8829C8816FA6EFA27
DCE5580E65AA9854B1C64163DC318420CD993C15BFD76A8BA1182860A6B03D6D
22B8CF43CFE6C8AB27C64842E239CAE707D3086BADDE1D7C94E3BC96319470D6
8D26915C575CFDD03271D6BB9DE86A0EB6EEA6E768B224A626C62A9AB48A6EDB
44F70BB5AF991CDF9736D65933E81CC57A78F623F33EC9AF535F2F25FA4EEC90
D50DB7E87F31E971A75A33A301CA6013EEC5A4E179D695B33DADF2C98364434A
42926776000B610E17524162253F6FA638D6581C18F99EA0BD1D2E24D2424ADF
C05010D08192485153DD03930C7BF45237593E484F9851E6D464FA10FECA5D9E
0C8CCC97DE029030900CDBB491C5CF226DBF903CFE7735D939C3FDF3A20B70CE
66579B28B99313FEE914E295388C7BC8E055A2E54EA3A8206D3C8F4F7C0BA5E6
E519419FD8CE215F7B8E9BEC604A9E3FE272A0328A24E31997C8A91E0946BCF1
6943A97CBED2AB9FC636B49828BBB8B89E0BBC2653796431224895ABA5DAC41E
1854BD9764E86147FD7624F736F40DE3B7582EDDFD15C2BDE3F22B5A54D7DF10
B87A1301CE85CFC061689A890A321412A13314AE96DCD3EDA75035FDD8F4AB9B
897A2C68263A68457032C469987970648BA2D88B1C5375DFEAA35A917B8A952E
EE670427942AEDB3CB599C5746180E392837D371E15D860620ABDB6AA7772C40
A5E346661673ACA530BE3D8E3FFB895E5DA3DC23B1B43C080C77F7E47847F0F3
F3AA5CA9E4BF75FC5EBD18D19F21A7DAA3B11CABC6E4070A15F7DBC8B05EB6AA
A02EF1B078EB66D61D6AFE41DA9B36FE7EC9EF94D1EA26282A9871E2CACB3126
2AD49C2D9B50A6E47D8F2CCAD50992D1B430979A45FD9E76182A19964BB2A1F6
51779A2B258DC1DF4C2F3074621286831F3848AC152DDD2BA561E6586ADA88D3
598A2CE2CD048F027CE0008B828BD915887D7785341E8305DF2346ADB76BE99F
87B02173BDC334E9221C8DF54114A6B24C1C5340299512FA6C8C51AB4C8778CE
178CEF531C6D1B5FF0A1BE8EFF767F959BD4C345C52699A29A17B2A230842BF6
4B011217D6D24EDAC3F6D53482786F1CA33169B90ECD499407D37CE9B70DDF78
7B7547B32952535BA9ACD1E244447AE3FCED3AF28717083CF9590A09780984D6
AF0743C82AE4FB3E2BB2856A4153A3967A023FFC35382D6C22D84A924900B6A6
3DDD400E6D2418DA6C27F2FA34C075C902B89EBAE658B3C9A18EEE449DA5A379
337DE95CB7AB3F0970CF1A5D8FAD8090E495570FDFB2FBBA79244780D8035547
C5A55BB21A2270F724BF5D442CDC5BB9F09BE0CAE59B1C2270F0BDACE698F2C5
DE8F66BFB9634904B161F5BA2B1950048300D69BABD312D58D89C4ED527AF7BA
7DA2478EDC2CDEE3473DD8A8ED9D891CD1FC21F23013228BB3281B71FCE959BD
6F8E9059D682A7FCC5265A0620992D4FA8D78377EB34CE3ECA070EE3707239BC
98907DB0120CE42ABA32CF97127E28382BDDFD685674279F588D4F951216C355
821361790F64C2CC720DE97E8ECB57326C43EE47367628E05769E106868B54F4
C33C9951908DF6FC4F5ED2C7787BD8FA591BBB3E9C6C1DA94CC5E38D9B20C886
7D237572FF46DD896A4D6163408EA6CEFAC398EE041EAE29D577E75326CA17A6
B072D47A7B13EC441CE6DAA042ECD02134CBFA6809A435050413817193DAEB16
A5882C8AEA44BCF36E74E9ECCDFE7E19FF5A5DD7A94E5AB4F8702C3DA7F42325
23C808670A0490F5B373DADE40814FF9650241D3D69C91FBC5ECE728F827D9BF
C928602E05477903449E079164CA39859C4BCA60C579F490AA455F82B5050BB3
969AFB478E0D4A257B3356EA3CD62051FCE6C6B1929CFF85BFDF166BEF658E10
3A55E007F38EBBB248B3F0B8ED1925106B499B762E45113AE1AC9DE09644C84B
9C08034B297314EE69BC32DB6E7D7FB9913CE5AC17E7335979E9DCCE2BAB3725
1976155551F9706A576FE0E3ADCCF72C87683291528ECB749CB0ED291966E239
B5E3630676BD409E08F85BC1AEC9A2D4135376284A96EA24431243BD6FE8B966
95F11A4BB53F392E0AEFEA623064FF8A7002367B0A515635CB2D2DDFB9B4A8D7
FE721754E81BBA548848A235B91AD4E4F7DB19CCE2F61D277FC00AB956EB93BE
44AB4970CA56BF59506C94ED160FB1E25D3DF2988A532BDB787BFB8539D22986
FDC378AC31444E63C4727FEE121A43751043849E6DCAC5B59D0FC703AAFBBFD4
E8B7C268F21615AD02CE9DABEFA27B5FE6A6441B619539CAB1F810F1263447AA
633F5DAF483752EF1A0421740E3A811D2D2898CBF53E7F686C9223FD7235F02D
6F90D2D48CC20AB87778DE3C6FB335E0F0EC20B5DC5B65223FE117526DE2C72F
FE839DF93CB2A7D66CD900CB325F891E311BEC932F703FB4FEFA29DB8B9C88DD
375EC71B3D58C7BC59ADA91971A3BDA1ADEA629CE6CC92BD542CDDFAA7706FB2
6CDDE2DF07E56D6741916AE8E8744339816F3E6C38062747AA9FDA2A2678A6B7
EFEA870AA3A4D71B25EE3013EAB1DBA34401B867C7A41AE51E0421D41D3BB83C
E120C8FEABA6E5DEC53A689C21426D4BBCB68CB37568761C360E6D4E3596FB7D
F4DEC7918E58C0293D12D6DDA7E9DCDAAD7C939F55CD1BC4A228B31E9A904156
DA6B40B08E6ACE674618B768DD681C772A3E55FE096CF949CF3B0460ABDCD891
D17B37B355B29AB5137899C036F31DA026244FA25FB798FBE5105BDA29F46538
D3D3AC1001A7BCECE64DE94FFE6C354166A0F97256137BDFA07F6E22A3D1D2F4
9588DBAE95E895BC5E64DDCBBAA8D0A22C229B42CB717FC711E7E9DF793DF80B
9F14754585A3C7E17F37B32924B9F9870DA8635E3E18BD1DCD81EDF01834D9C6
B33F23C956C2FCBFA47D84422F583459D827D1E120B97694D12F1F54D02379C0
D288F7104F3FFCF4F76E3494F4ACBD1BE3A15543CC680924C78A473F8E311ADF
8FE00A04C6C393DE61AD3EDA5BC031E2353076A2489391B52632387CA28A7B93
FBB065A6EF3658AE80B1ADA47E9B2539E73A71FA75645F85ED8ECC257FB4CF26
B6C912DE9D0F9899E70BECCB934AD32CF49A093371A9F73DE6255EBC39DE1E7F
00D0CBDABD4D0383977E694890E71FBE5C376BE5F3A80C28987417504F515C50
909F3D31178BB9B1D085BE514F71B910A9085BD6122DDC72A150BFE266920E49
5661BCB4BAB51D6DEFE32B616963DBD989FCDD1637B294CE4E288655FBEFA1BF
7F25BBF8CF17C2D5FD161A7C2CC9CC7490D9BF15A1D35B3BFA43ADE256E88BDA
BD490D92907C57BAC408A575EC84D6AEE070148C7C9A91C03B09FDBD792E8FF0
C0B886AAD2EDD86541E5E579359D40E3AC312ACD3D8FD49F71BD533DDF8859B1
BAF17F1884E331DD07CEEF93B71D492AEBAADF7A263450A7A72210CE630A0D37
BF024BDC09ACC882816B8C22C62AE38A3A8D0F6EBC2B1B2C0B8161A8B076DD5D
4B779C0788546BB4CF57332230D237856B00D79C28A7C01D11F44B7304F69075
94B97A745DA43D1BE561372CE611C345A843834E46AD9DDB16CABCD3FA33D6F1
F6B5C0497F5EE5400B305CDC16A7EC286AA4D45D0EEBB9DA06AC9C5294D68EC9
E4DC3CA2B92CE8FC0526184A86EDC7AB34D67E60AC12D9CA8FD300235EC968BA
92C6FBDA47572BC5600F25249F60AD287CBDAE980E747FCBE7EE5CD323E733F0
63553B494D3DDEB9CC1480B5C3BB79A28E419AA65B18CB297AB383419E890E2A
CE6F98C9900CCB4675280A10CF060B8D220DDA1BE55DFA65715EABCC1AFAA271
B1F8732341613E17B231231A0D24D4D7FC198AE04D89A99C4536217769C6FBD9
5EE24A6302F97438F7C0E311C878F674B4477A5ADA3952CDE4055AC408B8174E
86F8FB797646DFFFE0ECA25D1BAB9A9F71F3926D3D85AA63E7A8C931D71E79E0
AF1EAC26FADE468F4FF7F3861D14C10E3BE1F9EAFD6D3A544E8108D5DAB5B180
3950C74818BC8AF4758A108F462EF1826647A49667F5E482038C54716856D9BC
35F29922846D2148F92F943E951D7438C73D6A60459A8003174036C64E1629CD
155D47FD04B03C023AD67CD5A70C98AB556EEAB8C48169706E5B352F6505D580
AC945171BFE62E81F8F500438AC3B64D857BA5BC54C2C4BBB237F8FA51296255
E66A92A61FE13FDE781D393557EB72CEBAD86511035F775FAC39A0479CCD400F
226709118F887F47CC2ECC8F79816D4A945B2845F50AFD62D8C9A9BBF4739496
9E644BC9F7B04803B7EE75A09EAE94365F6F374B4FCEB0B506C76297564B9B6B
8B812BC3A33929AA94692572B010E6210AEAA312BDFC88BF302244AB9D587A9B
919823FD01DE12438D960944D1977800FEB49E638C32E5B188B1CA033E0C37EE
A142F746367888AA119535F0CCAF7EAA461B790EB089D2D6962E28A398439BB7
9C9943654D7A2D765B46BC0DD1F915327F369162E1BA1BA83110B93F442905E0
523BFF5E279508A98568CD5CFD18FABBE9D17265A9081E7BF64155A2CE3C0DF7
88D00671AD65654709589BAD7EA65BBA811387ABA5CA0BC3F66D3D48597A0D1D
2C268375DF47CCF62166262AE4840AB03BF49BE67A05EF66328EC729F03CA5FF
AD3937FC053E223303565DC771ACF32E63DFB96D5030E787961D72D02C195C66
B48E9AF0309DC169CFE8D16E2818DA94693A18F027DEA0D913FCF244BF664E52
6105E2DDFC0AF5591370BB319E653A6A2AA7FCD80CABD3F952FA948239E2D270
07F90D70B52F66AB3347D85BF23E1B39323C00BDACA8903DE5EF2BD64D648C56
70B2C7F1210721DC766876AEDD11FA6F9E672BD85785EA3AA4DE0F69E4A40AD1
B016B5E73F8B0DB9EEFAF6FB97D686BB2E09EAE3FC177931130E716A455AA655
735B338DF1A855FD2D437443B2A4BFB616692F8628D69636DD99D8A7F16E23D7
2EAE1B0FA57BA2646733E233D89C7CBA4B7D3CBA3E6173A4070C91BF3EB49C48
7F5B9C54C95B201C54900657F018FF2277D43D736CFE6FF873241AAAF8B9BEA3
77664CC6F62527F948DAEC79EBDCA6AD2A2C233A45EF61EC3DCBED321E02AF17
DBA1102B2A3D0C72F018BA8DB288F564790A2CD346E2EF36CB2371DD8E4660B2
6868002913D93B34AA9CB52BC0CA098616EE1A3CA3819B59B06AC529DA1F8645
0DC5BEEB3CE5FA698345AB3FA86919CCF10DDF3EFAA1ACB90E36B95499B40CED
3A99C6844A57ACED6D40D10FCB91167E4F5FEF461388F1FD86300C4EE43BDC55
9CC949744E10AC0AFDB5B8953D295323248A35188BDC34A24D3B1A221D04E794
803BEC893C0870B225E24E6E923332C5B2B6A2C07A46E4D52C53EB9FDF0B63DB
C6141BEB1AE15C50AC8F5F0B789BB402A20411E085177E114AC5F3E8082667A8
66995A6FA15BFCE5D23CCE5537CC7712A4195A8BF691073A49DCB5610EE1052B
07EC4E797157332B2250AD03C9DC8C5CF48F2701E086C52341527E5ADF3E9F2D
0A10F53C742C620BEF520BAB8BFFC4725BBA401E2724C8A119E5F45EB3E8C7B9
1ED661136743765DE73E7A5A583F3DDD4E26C0D303B63C67380F18433B84108E
23349C7FC4D28C6EE35462EE6F7A66BE84199E67C37004EE95E192C3725887A4
B6C4DDA6D4737F9DBB6EE36D057B5C3895FC3D57753A4637D5756B1A6768C898
9FB91ACFE5F2BBDD40BABB18994EFA68534EFC9979DA4400957AB115CDE15386
E2889D165275291F75326D0B92F12E2273BD96DB25B4EFD25F672F649AF60194
3A1EED1CD925AA669005A5BE078636C0B91FFE4220E6BCDA8DED3037B508EE81
4AB02BEA
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258431 52099146 1000 600 600
(Stability of (n,k) nonlinear feedback shift registers.dvi)
@start /Fa 134[29 1[44 1[33 18 26 26 1[33 33 33 48 18
29 1[18 33 33 18 29 33 29 33 33 12[37 33 41 1[41 1[44
55 37 1[29 22 3[41 48 44 41 41 19[22 6[52 38[{
 TeXBase1Encoding ReEncodeFont }37 66.4176 /Times-Italic
rf /Fc 136[60 1[46 28 32 37 2[42 46 69 23 46 1[23 46
42 28 37 46 37 46 42 31[60 13[42 42 42 49[{
 TeXBase1Encoding ReEncodeFont }23 83.022 /Times-Bold
rf /Fd 255[39{}1 49.8132 /CMSY10 rf /Fe 26[85 15[98 213[{}2
119.551 /Symbol rf /Ff 193[74 1[74 1[74 1[74 34[44 44
20[{}6 83.022 /CMEX10 rf /Fg 145[65 27[60 18[65 63[{}3
83.022 /MSBM10 rf /Fh 194[39 61[{}1 49.8132 /CMR10 rf
/Fi 204[25 25 25 49[{ TeXBase1Encoding ReEncodeFont }3
49.8132 /Times-Roman rf /Fk 135[22 7[25 1[25 36 14 22
14 106[{ TeXBase1Encoding ReEncodeFont }7 49.8132 /Times-Italic
rf /Fm 194[48 17[48 1[24 24 40[{}4 61.4362 /CMR10 rf
/Fn 188[41 67[{}1 61.4362 /rsfs10 rf /Fo 198[31 31 31
31 31 31 31 31 31 31 48[{ TeXBase1Encoding ReEncodeFont }10
61.4362 /Times-Roman rf /Fp 26[44 229[{}1 61.4362 /Symbol
rf /Fq 149[17 49[34 5[41 34[31 12[48 1[48{}6 61.4362
/CMSY10 rf /Fr 138[45 1[45 1[45 2[45 45 45 1[45 4[45
45 45 1[45 32[45 7[45 2[45 1[45 45 45 45 1[45 46[{
 TeXBase1Encoding ReEncodeFont }19 74.7198 /Courier rf
/Fs 135[27 2[31 3[31 31 31 31 44 17 27 17 17 4[31 27
15[31 4[41 4[20 73[{ TeXBase1Encoding ReEncodeFont }16
61.4362 /Times-Italic rf /Ft 196[17 17 58[{}2 61.4362
/CMMI10 rf /Fu 155[30 100[{ .167 SlantFont }1 61.4362
/Symbol rf /Fv 162[23 1[23 29[65 17[65 1[32 32 40[{}6
83.022 /CMR10 rf /Fw 179[73 7[64 55 67[{}3 83.022 /rsfs10
rf /Fx 187[51 68[{}1 83.022 /Symbol rf /Fy 145[42 3[23
2[42 42 6[55 55 2[55 32[55 3[0 3[55 16[83 8[65 3[65 9[65
1[65 2[42 1[42 65 1[65{}19 83.022 /CMSY10 rf /Fz 134[37
37 2[42 23 32 32 42 42 42 42 60 23 37 23 23 42 42 23
37 42 37 42 42 10[51 1[46 42 51 1[51 60 55 1[46 2[28
60 1[51 51 60 55 51 51 6[28 2[42 42 42 42 42 42 42 2[21
28 42[42 2[{ TeXBase1Encoding ReEncodeFont }50 83.022
/Times-Italic rf /FA 192[42 65 42 65 23 23 58[{}6 83.022
/CMMI10 rf /FB 155[41 100[{ .167 SlantFont }1 83.022
/Symbol rf /FC 80[28 52[37 42 42 60 42 42 23 32 28 42
42 42 42 65 23 42 23 23 42 42 28 37 42 37 42 37 3[28
1[28 51 2[78 60 1[51 46 55 1[46 60 60 74 51 1[32 28 1[60
46 51 60 55 55 60 3[47 1[23 23 42 42 42 42 42 42 42 42
42 42 1[21 28 21 2[28 28 28 35[46 46 2[{ TeXBase1Encoding ReEncodeFont }
70 83.022 /Times-Roman rf /FD 105[33 1[29 29 24[29 33
33 48 33 33 18 26 22 33 33 33 33 52 18 33 18 18 33 33
22 29 33 29 33 29 3[22 1[22 41 48 48 63 48 48 41 37 44
48 37 48 48 59 41 48 26 22 48 48 37 41 48 44 44 48 6[18
33 33 33 33 33 33 33 33 33 33 1[17 22 17 2[22 22 40[{
 TeXBase1Encoding ReEncodeFont }73 66.4176 /Times-Roman
rf /FE 145[37 2[33 107[{ TeXBase1Encoding ReEncodeFont }2
74.7198 /Times-Italic rf /FF 196[21 59[{}1 74.7198 /CMMI10
rf /FH 214[29 29 40[{}2 74.7198 /CMR10 rf /FJ 104[75
29[37 37 54 37 42 25 29 33 42 42 37 42 62 21 42 25 21
42 37 25 33 42 33 42 37 12[50 42 54 1[46 1[54 4[29 2[46
3[50 19[19 25 19 2[25 25 40[{ TeXBase1Encoding ReEncodeFont }39
74.7198 /Times-Bold rf /FK 135[37 3[21 29 29 3[42 58
7[33 37 33 37 37 12[46 10[29 7[50 65[{ TeXBase1Encoding ReEncodeFont }
14 74.7198 /Times-BoldItalic rf /FL 138[46 3[46 2[46
1[25 2[25 3[41 3[41 19[81 56 1[36 29[23 44[{
 TeXBase1Encoding ReEncodeFont }11 91.3242 /Times-Roman
rf /FM 145[71 2[63 107[{ TeXBase1Encoding ReEncodeFont }2
141.137 /Times-Italic rf /FN 196[39 59[{}1 141.137 /CMMI10
rf /FP 214[55 55 40[{}2 141.137 /CMR10 rf /FR 134[71
4[47 55 63 2[71 78 1[39 78 1[39 78 71 47 63 78 63 78
71 13[78 4[102 78[{ TeXBase1Encoding ReEncodeFont }19
141.137 /Times-Bold rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 365 22 a FR(Stability)53
b(of)g FP(\()p FM(n)p FN(;)16 b FM(k)r FP(\))52 b FR(Nonlinear)g
(feedback)h(shift)h(r)m(egisters)1483 284 y FL(Meilin)33
b(Li,)f(Jianquan)d(Lu)p Black 0 TeXcolorgray -109 547
a FK(Abstract)p FJ(\227In)43 b(this)e(paper)-7 b(,)43
b(the)f FH(\()p FE(n)p FF(;)8 b FE(k)q FH(\))43 b FJ(nonlinear)f
(feedback)g(shift)-192 630 y(r)o(egister)32 b(\(NFSR\))e(is)i(r)o
(egarded)f(as)h(a)g(Boolean)g(netw)o(ork)g(\(BN\).)f(Semi-)-192
713 y(tensor)c(pr)o(oduct)f(\(STP\))g(of)h(matrices)h(is)f(used)f(to)h
(con)m(v)o(ert)h FH(\()p FE(n)p FF(;)8 b FE(k)q FH(\))28
b FJ(NFSR)-192 796 y(into)22 b(an)h(equi)o(v)o(alent)f(algebraic)i
(equation.)d(Based)i(on)g(STP)f(of)h(matrices,)-192 879
y(a)h(no)o(v)o(el)g(way)h(is)e(pr)o(oposed)g(to)h(study)f(stability)g
(of)h FH(\()p FE(n)p FF(;)8 b FE(k)q FH(\))25 b FJ(NFSR)d(and)i(the)
-192 962 y(periodicity)19 b(of)h FH(\()p FE(n)p FF(;)8
b FE(k)q FH(\))21 b FJ(NFSR.)e(First,)g(the)g(stability)g(of)h(the)g
FH(\()p FE(n)p FF(;)8 b FE(k)q FH(\))20 b FJ(NFSR)f(is)-192
1046 y(in)m(v)o(estigated,)27 b(and)f(we)i(pr)o(opose)f(an)g(algorithm)
g(to)g(judge)g(the)g(stability)-192 1129 y(of)e(an)g
FH(\()p FE(n)p FF(;)8 b FE(k)q FH(\))26 b FJ(NFSR.)d(Second,)h(the)h(r)
o(elationship)f(between)g(the)g(minimal)-192 1212 y(period)29
b(of)g(output)g(sequence)f(of)i(a)f(cycle)h(of)g(an)f
FH(\()p FE(n)p FF(;)8 b FE(k)q FH(\))30 b FJ(NFSR)f(and)g(the)-192
1295 y(length)24 b(of)g(the)g(cycle)h(is)f(r)o(e)o(v)o(ealed.)h(Third,)
e(we)h(in)m(v)o(estigate)h(the)f(minimal)-192 1378 y(period)34
b(of)h(output)e(sequence)h(of)g(a)h(cycle)g(of)g(an)f
FH(\()p FE(n)p FF(;)8 b FE(k)q FH(\))36 b FJ(NFSR.)d(Some)-192
1461 y(existing)20 b(methods)g(can)g(only)g(in)m(v)o(estigate)g(the)g
(cycle)h(of)f(the)g FH(\()p FE(n)p FF(;)8 b FE(k)q FH(\))20
b FJ(NFSR,)-192 1544 y(while)26 b(in)h(this)f(paper)-7
b(,)27 b(we)h(simultaneously)e(in)m(v)o(estigate)i(stability)f(of)g(an)
-192 1627 y FH(\()p FE(n)p FF(;)8 b FE(k)q FH(\))27 b
FJ(NFSR)f(and)g(the)g(minimal)h(periodicity)f(of)h(output)e(sequences)h
(by)-192 1710 y(using)h(the)h(method)g(of)g(STP)-8 b(.)-109
1796 y FK(Index)44 b(T)-7 b(erms)p FJ(\227)p FH(\()p
FE(n)p FF(;)8 b FE(k)q FH(\))44 b FJ(NFSR,)f(stability)l(,)f(minimal)h
(period,)g(semi-)-192 1879 y(tensor)28 b(pr)o(oduct,)f(Boolean)h(netw)o
(orks)533 2086 y FC(I)t(.)45 b FD(I)t(N)t(T)t(R)q(O)t(D)t(U)t(C)t(T)t
(I)t(O)t(N)-109 2232 y FC(Information)18 b(security)j(is)h(v)o(ery)e
(important)f(for)i(our)f(society)-5 b(.)21 b(There)-192
2331 y(are)35 b(man)o(y)f(con\002dential)g(information)f(about)h
(\002nancial)h(status,)h(re-)-192 2431 y(search,)22 b(products)g(for)g
(dif)n(ferent)f(or)o(ganizations.)e(In)k(order)f(to)h(protect)-192
2531 y(the)34 b(con\002dential)e(information)g(from)g(leakage,)h(the)h
(stream)g(cipher)-192 2630 y(has)24 b(been)f(widely)g(used)h(in)g
(encryption.)d(The)j(main)f(b)n(uilding)f(blocks)-192
2730 y(of)37 b(stream)h(cipher)f(is)h(nonlinear)e(shift)i(re)o(gisters)
g(\(NFSR\).)g(NFSR)-192 2829 y(can)28 b(produce)f(pseudo-random)d
(sequences.)-109 2932 y(There)39 b(are)h(tw)o(o)g(types)g(of)f(NFSR:)i
(\(1\))e(Fibonacci)g(NFSR;)i(\(2\))-192 3032 y(Galois)32
b(NFSR.)g(Fibonacci)f(NFSR)h(is)h(sho)n(wn)d(in)i(Fig.1.)f(Fibonacci)
-192 3132 y(NFSR)38 b(consists)g Fz(n)f FC(binary)f(storage)h(elements)
f(from)h(left)g(to)g(right)-192 3231 y(as)e Fz(n)14 b
Fy(\000)g FC(1)p FA(;)9 b Fz(n)14 b Fy(\000)g FC(2)p
FA(;)9 b(:::;)g FC(1)p FA(;)g FC(0.)31 b(The)j(v)n(alue)g(of)h
Fz(i)p FC(-th)f(0)21 b Fy(\024)h Fz(i)f Fy(\024)h Fz(n)14
b Fy(\000)g FC(2)33 b(bit)i(is)-192 3331 y(updated)21
b(by)i(the)g(v)n(alue)g(of)f Fv(\()p Fz(i)9 b Fv(+)g
FC(1)p Fv(\))p FC(-th)23 b(bit,)g(and)f(the)h(v)n(alue)g(of)g
Fv(\()p Fz(n)9 b Fy(\000)g FC(1)p Fv(\))p FC(-)-192 3430
y(th)27 b(bit)g(is)h(updated)e(by)g(feedback)g(function)37
b Fz(f)j FC(depending)25 b(on)h(v)n(alues)-192 3530 y(of)d(bits)h(of)g
(0)p FA(;)9 b FC(1)p FA(;)g(:::;)g Fz(n)g Fy(\000)g FC(1.While)22
b(the)i(Galois)g(NFSR)h(sho)n(wn)d(in)i(Fig.2)-192 3630
y(is)j(dif)n(ferent)e(from)g(Fibonacci)h(NFSR.)h(In)f(Galois)h(NFSR,)g
(the)f(v)n(alue)-192 3729 y(of)32 b(e)n(v)o(ery)f(bit)i(is)h(updated)d
(by)h(it')-5 b(s)34 b(o)n(wn)e(feedback)e(function)h(which)-192
3829 y(at)h(most)g(relate)g(to)g(e)n(v)o(ery)f(bit.)h(In)f(order)g(to)h
(impro)o(v)o(e)e(the)h(speed)h(of)-192 3929 y(output)26
b(sequence)h(generation,)e(E.)j(Dubro)o(v)n(a)d(proposed)h(a)i(ne)n(w)f
(type)-192 4028 y(of)k(NFSR)h(named)e Fv(\()p Fz(n)p
FA(;)9 b Fz(k)q Fv(\))32 b FC(NFSR)h(in)e([1)o(].)g(An)g
Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))33 b FC(NFSR)f(can)f(be)-192
4128 y(considered)19 b(as)j(a)g(generalization)d(of)h(the)h(Galois)h
(NFSR.)g(In)f(an)g Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))-192
4228 y FC(NFSR,)31 b(e)n(v)o(ery)d(bit)i(is)g(updated)e(by)h(a)h
(feedback)e(function,)g(which)h(is)-192 4327 y(a)34 b(nonlinear)e
(function)h(relating)g(to)h(v)n(alue)f(of)h Fv(\()p Fz(i)14
b Fv(+)g FC(1)p Fv(\))p Fz(mod)36 b(n)p FC(-th)d(bit)-192
4427 y(and)23 b(up)g(to)h(v)n(alues)f(of)g Fz(k)11 b
Fy(\000)e FC(1)23 b(other)g(bits.)h(E.)g(Dubro)o(v)n(a)d(also)j(pro)o
(vide)d(a)-192 4526 y(method)26 b(to)i(increase)g(the)f(period)g(of)g
(output)g(sequence)g(of)g(an)h Fv(\()p Fz(n)p FA(;)9
b Fz(k)q Fv(\))-192 4626 y FC(NFSR)24 b(by)e(composing)f
Fz(m)i FC(smaller)g Fv(\()p Fz(n)958 4638 y Fs(i)978
4626 y FA(;)9 b Fz(k)1047 4638 y Fs(i)1069 4626 y Fv(\))p
FA(;)32 b FC(1)16 b Fy(\024)f Fz(i)h Fy(\024)f Fz(m)23
b FC(NFSRs.)h(But)-192 4726 y(there)33 b(is)i(a)f(weakness)f(of)h
Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))34 b FC(NFSR.)h(The)e(period)g(of)
g(an)h Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))-192 4825
y FC(NFSR)37 b(is)g(not)e(necessary)g(equal)h(to)g(the)f(length)g(of)h
(longest)f(c)o(ycle)-192 4925 y(of)30 b Fv(\()p Fz(n)p
FA(;)9 b Fz(k)q Fv(\))32 b FC(NFSR,)g(which)e(caused)h(some)f(problems)
f(to)i(observ)o(e)f(the)-192 5025 y(period)d(of)h(output)g(sequence)f
(of)h(an)h Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))29 b
FC(NFSR.)p 0 TeXcolorgray -126 5205 a FD(Meilin)21 b(Li)d(is)h(with)h
(the)f(School)h(of)f(Mathematics,)i(Southeast)g(Uni)n(v)o(ersity)l(,)f
(Nanjing)-192 5280 y(210096,)k(China)h Fr(220151318@seu.edu.cn)-126
5354 y FD(Jianquan)39 b(Lu)c(is)i(with)g(the)g(School)h(of)e
(Mathematics,)j(Southeast)f(Uni)n(v)o(ersity)l(,)-192
5429 y(Nanjing)25 b(210096,)f(China)h Fr(jqluma@seu.edu.cn)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2146 897 a @beginspecial 0 @llx 0 @lly 393 @urx 98 @ury
2160 @rwi @setspecial
%%BeginDocument: fsr.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ImageMark Software Labs
%%For: () ()
%%Title: E:\mypaper\fsr.eps
%%CreationDate: () ()
%%BoundingBox: 0 0 393 98
%%DocumentProcessColors: Black
%%ColorUsage:Color
%%DocumentFonts: Helvetica
%%+Helvetica-Bold
%%+Helvetica-Oblique
%%+Helvetica-BoldOblique
%%+Times-Roman
%%+Times-Bold
%%+Times-Italic
%%+Times-BoldItalic
%%+Courier
%%+Courier-Bold
%%+Courier-Oblique
%%+Courier-BoldOblique
%%+Symbol
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_screens_AI5 1.0 0
%%+ procset Adobe_typography_AI5 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_blend_AI5 1.0 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_Illustrator_AI5 1.0 0
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI3_TemplateBox: 0 0 393 98
%AI3_TileBox: 0 0 393 98
%AI3_DocumentPreview: None
%%Template:
%%PageOrigin:0.0000 0.0000
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI5 1.0 1
%%Title: (Typography Operators)
%%Version: 1.0 1
%%CreationDate:(6/10/1996) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI5 68 dict dup begin
put
/initialize
{
 begin
 begin
  Adobe_typography_AI5 begin
  Adobe_typography_AI5
  {
    dup xcheck
    {
      bind
    } if
    pop pop
  } forall
 end
 end
 end
  Adobe_typography_AI5 begin
} def
/terminate
{
  currentdict Adobe_typography_AI5 eq
  {
   end
  } if
} def
/modifyEncoding
{
  /_tempEncode exch ddef
  /_pntr 0 ddef
  {
    counttomark -1 roll
    dup type dup /marktype eq
    {
      pop pop exit
    }
    {
      /nametype eq
      {
        _tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
        put
      }
      {
        /_pntr exch ddef
      } ifelse
    } ifelse
  } loop
  _tempEncode
} def
/havefont
{
  systemdict /languagelevel known
    {
    /Font resourcestatus dup
      { exch pop exch pop }
    if
    }
    {
    systemdict /FontDirectory get 1 index known
      { pop true }
      {
      systemdict /fileposition known
        {
        dup length 6 add exch
        Ss 6 250 getinterval
        cvs pop
        Ss exch 0 exch getinterval
        status
          { pop pop pop pop true }
          { false }
        ifelse
        }
        {
        pop false
        }
      ifelse
      }
    ifelse
    }
  ifelse
} def
/TE
{
  StandardEncoding 256 array copy modifyEncoding
  /_nativeEncoding exch def
} def
/subststring {
  exch 2 index exch search
  {
    exch pop
    exch dup () eq
    {
      pop exch concatstring
    }
    {
      3 -1 roll
      exch concatstring
      concatstring
    } ifelse
    exch pop true
  }
  {
    pop pop false
  } ifelse
} def
/concatstring {
  1 index length 1 index length
  1 index add
  string
  dup 0 5 index putinterval
  dup 2 index 4 index putinterval
  4 1 roll pop pop pop
} def
%
/TZ
{
  dup type /arraytype eq
  {
    /_wv exch def
  }
  {
    /_wv 0 def
  } ifelse
  /_useNativeEncoding exch def
  2 index havefont
  {
    3 index
    255 string
    cvs

    dup
    (_Symbol_)
    eq
    {
      pop
      2 index
      findfont

    }
    {
      dup length 1 sub
      1 exch
      getinterval

      cvn
      findfont
    } ifelse
  }
  {
    dup 1 eq
    {
      2 index 64 string cvs
      dup (-90pv-RKSJ-) (-83pv-RKSJ-) subststring
      {
        exch pop dup havefont
        {
          findfont false
        }
        {
          pop true
        } ifelse
      }
      {
        pop dup
        (-90ms-RKSJ-) (-Ext-RKSJ-) subststring
        {
          exch pop dup havefont
          {
            findfont false
          }
          {
            pop true
          } ifelse
        }
        {
          pop pop true
        } ifelse
      } ifelse
      {
        /Ryumin-Light-83pv-RKSJ-H havefont
          {/Ryumin-Light-83pv-RKSJ-H}
          {/Courier}
          ifelse
          findfont
          [1 0 0.5 1 0 0] makefont
      } if
    }
    {
      /Courier findfont
    } ifelse
  } ifelse
  _wv type /arraytype eq
  {
    _wv makeblendedfont
  } if
  dup length 10 add dict
 begin
  mark exch
  {
    1 index /FID ne
    {
      def
    } if
    cleartomark mark
  } forall
  pop
  /FontScript exch def
  /FontDirection exch def
  /FontRequest exch def
  /FontName exch def
  counttomark 0 eq
  {
    1 _useNativeEncoding eq
    {
      /Encoding _nativeEncoding def
    } if
    cleartomark
  }
  {
    /Encoding load 256 array copy
    modifyEncoding /Encoding exch def
  } ifelse
  FontName currentdict
 end
  definefont pop
} def
/tr
{
  _ax _ay 3 2 roll
} def
/trj
{
  _cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
  /Tx
  {
    dup
    currentpoint 3 2 roll
    tr _psf
    newpath moveto
    tr _ctm _pss
  } ddef
  /Tj
  {
    dup
    currentpoint 3 2 roll
    trj _pjsf
    newpath moveto
    trj _ctm _pjss
  } ddef
} def
/a1
{
W B
} def
/e0
{
  /Tx
  {
    tr _psf
  } ddef
  /Tj
  {
    trj _pjsf
  } ddef
} def
/e1
{
W F
} def
/i0
{
  /Tx
  {
    tr sp
  } ddef
  /Tj
  {
    trj jsp
  } ddef
} def
/i1
{
  W N
} def
/o0
{
  /Tx
  {
    tr sw rmoveto
  } ddef
  /Tj
  {
    trj swj rmoveto
  } ddef
} def
/r0
{
  /Tx
  {
    tr _ctm _pss
  } ddef
  /Tj
  {
    trj _ctm _pjss
  } ddef
} def
/r1
{
W S
} def
/To
{
  pop _ctm currentmatrix pop
} def
/TO
{
  iTe _ctm setmatrix newpath
} def
/Tp
{
  pop _tm astore pop _ctm setmatrix
  _tDict begin
  /W
  {
  } def
  /h
  {
  } def
} def
/TP
{
 end
  iTm 0 0 moveto
} def
/Tr
{
  _render 3 le
  {
    currentpoint newpath moveto
  } if
  dup 8 eq
  {
    pop 0
  }
  {
    dup 9 eq
    {
      pop 1
    } if
  } ifelse
  dup /_render exch ddef
  _renderStart exch get load exec
} def
/iTm
{
  _ctm setmatrix _tm concat
  _shift aload pop _lineorientation 1 eq { exch } if translate
  _scale aload pop _lineorientation 1 eq _yokoorientation 1 eq or { exch } if scale
} def
/Tm
{
  _tm astore pop iTm 0 0 moveto
} def
/Td
{
  _mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
  _render -1 eq
  {
  }
  {
    _renderEnd _render get dup null ne
    {
      load exec
    }
    {
      pop
    } ifelse
  } ifelse
  /_render -1 ddef
} def
/Ta
{
  pop
} def
/Tf
{
  1 index type /nametype eq
  {
    dup 0.75 mul 1 index 0.25 mul neg
  } if
  /_fontDescent exch ddef
  /_fontAscent exch ddef
  /_fontSize exch ddef
  /_fontRotateAdjust _fontAscent _fontDescent add 2 div neg ddef
  /_fontHeight _fontSize ddef
  findfont _fontSize scalefont setfont
} def
/Tl
{
  pop neg 0 exch
  _leading astore pop
} def
/Tt
{
  pop
} def
/TW
{
  3 npop
} def
/Tw
{
  /_cx exch ddef
} def
/TC
{
  3 npop
} def
/Tc
{
  /_ax exch ddef
} def
/Ts
{
  0 exch
  _shift astore pop
  currentpoint
  iTm
  moveto
} def
/Ti
{
  3 npop
} def
/Tz
{
  count 1 eq { 100 } if
  100 div exch 100 div exch
  _scale astore pop
  iTm
} def
/TA
{
  pop
} def
/Tq
{
  pop
} def
/Tg
{
  pop
} def
/TG
{
  pop
} def
/Tv
{
  /_lineorientation exch ddef
} def
/TV
{
  /_charorientation exch ddef
} def
/Ty
{
  dup /_yokoorientation exch ddef 1 sub neg Tv
} def
/TY
{
  pop
} def
/T~
{
  Tx
} def
/Th
{
  pop pop pop pop pop
} def
/TX
{
  pop
} def
/Tk
{
  _fontSize mul 1000 div
  _lineorientation 0 eq { neg 0 } { 0 exch } ifelse
  rmoveto
  pop
} def
/TK
{
  2 npop
} def
/T*
{
  _leading aload pop
  _lineorientation 0 ne { exch } if
  Td
} def
/T*-
{
  _leading aload pop
  _lineorientation 0 ne { exch } if
  exch neg exch neg
  Td
} def
/T-
{
  _ax neg 0 rmoveto
  _lineorientation 1 eq _charorientation 0 eq and { 1 TV _hyphen Tx 0 TV } { _hyphen Tx } ifelse
} def
/T+
{
} def
/TR
{
  _ctm currentmatrix pop
  _tm astore pop
  iTm 0 0 moveto
} def
/TS
{
  currentfont 3 1 roll
  /_Symbol_ findfont _fontSize scalefont setfont

  0 eq
  {
    Tx
  }
  {
    Tj
  } ifelse
  setfont
} def
/Xb
{
  pop pop
} def
/Tb /Xb load def
/Xe
{
  pop pop pop pop
} def
/Te /Xe load def
/XB
{
} def
/TB /XB load def
currentdict readonly pop
end
setpacking
%
/X^
{
  currentfont 5 1 roll
  dup havefont
    {
    findfont _fontSize scalefont setfont
    }
    {
    pop
    exch
    } ifelse
  2 index 0 eq
  {
    Tx
  }
  {
    Tj
  } ifelse
  pop pop
  setfont
} def
/T^ /X^ load def
%%EndResource
%%BeginResource: procset Adobe_screens_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Custom Halftone Screens ProcSet)
%%Version: 1.2 0
%%CreationDate: (03/24/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
systemdict begin
userdict /Adobe_screens_AI5 15 dict dup begin
put
/initialize
{
  Adobe_screens_AI5 begin
  /screenid
    deviceDPI 600 gt composite? not or
    {
    -1
    }
    {
      deviceDPI currentScreenFreq
      dup dup 60 ge exch 150 le and deviceDPI 300 le and
    {
      pop 60
    } if
    div 1.41421 div 0.5 add cvi
    } ifelse
  def

  2 screenid eq
  {
    /customsize 16 def
    /customdata /customdata2 def
    setcustomscreen
  } if

  3 screenid eq
  {
    /customsize 24 def
    /customdata /customdata3 def
    setcustomscreen
  } if

  4 screenid eq
  {
    /customsize 16 def
    /customdata /customdata4 def
    setcustomscreen
  } if

  5 screenid eq
  {
    /customsize 20 def
    /customdata /customdata5 def
    setcustomscreen
  } if

  6 screenid eq
  {
    /customsize 24 def
    /customdata /customdata6 def
    setcustomscreen
  } if

  7 screenid eq
  {
    /customsize 28 def
    /customdata /customdata7 def
    setcustomscreen
  } if

  8 screenid eq
  {
    /customsize 16 def
    /customdata /customdata8 def
    setcustomscreen
  } if
} def
/terminate
{
  currentdict Adobe_screens_AI5 eq
  {
   end
  } if
} def
/setcustomscreen
{
  deviceDPI customsize div 0
  {
    1 add 2 div customsize mul cvi exch
    1 add 2 div customsize mul cvi exch
    customsize mul add
    customdata load exch get 256 div
  } setscreen
} def
/customdata2 28 28 mul string def
currentfile customdata2 readhexstring
4180E8694988E2634382EA6B4B8AE061A01939C8A81737C2A21B3BCAAA1636C0
F8795998F6775796FA7B5B9AF57656952ED8B80727D6B60F2FDABA0626D5B50E
4E8DE6674786EE6F4F8EE5664685ED6EAD1434C6A61F3FCEAE1232C5A51E3ECD
F3745493FE7F5F9EF1725291FD7E5E9D24D3B30C2CDEBE0222D1B10A2ADDBD04
4483EB6C4C8BE1624281E96A4A89E364A31C3CCBAB1535C1A11A3AC9A91838C3
FB7C5C9BF4755594F97A5A99F778589730DBBB0525D4B40D2DD9B90828D7B710
508FE4654584EC6D4D8CE7684887EF70AF1131C4A41D3DCCAC1333C7A72040CF
F0715190FC7D5D9CF2735392FF80609F21D0B00929DCBC0323D2B20B2BDFBF01
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata3 28 28 mul string def
currentfile customdata3 readhexstring
011DC7F5E73D0421CBF3E43A021EC8F6E83E0522CCF2E43A2B648BC4A0762F68
8AC39E732C658CC5A177306989C29D72D5B6521A6192D9B55219608FD6B6531B
6193DAB451185F8FFCEE440C28D2FCED430B27D1FDEF450C29D3FBEC420A26D0
BEA77D366F83BCA77C356E87BFA87E377082BBA67B346D86145B99E0AE4A1259
98DFB14E155C9AE1AD4A115897DEB04D0623CDF4E63C0420CAF8EA400723CDF4
E53B031FC9F7E93F316988C19F752E678EC6A378326A88C09F742D668DC6A278
DBB350175E91D8B8551C6395DCB24F165D90D7B7541C6294FAEC420925CFFFF1
470E2BD5F9EB410824CEFEF0460D2AD4BAA57A336C85BEAA80397180B9A47933
6B84BDA97F387181105797DDAF4C145A9CE3AB480F5696DDAE4B13599BE2AC49
021EC8F6E83E0522CCF2E43A011DC7F5E73D0421CBF3E43A2C658CC5A1773069
89C29D722B648BC4A0762F688AC39E73D6B6531B6193DAB451185F8FD5B6521A
6192D9B55219608FFDEF450C29D3FBEC420A26D0FCEE440C28D2FCED430B27D1
BFA87E377082BBA67B346D86BEA77D366F83BCA77C356E87155C9AE1AD4A1158
97DEB04D145B99E0AE4A125998DFB14E0723CDF4E53B031FC9F7E93F0623CDF4
E63C0420CAF8EA40326A88C09F742D668DC6A278316988C19F752E678EC6A378
DCB24F165D90D7B7541C6294DBB350175E91D8B8551C6395F9EB410824CEFEF0
460D2AD4FAEC420925CFFFF1470E2BD5B9A479336B84BDA97F387181BAA57A33
6C85BEAA803971800F5696DDAE4B13599BE2AC49105797DDAF4C145A9CE3AB48
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata4 28 28 mul string def
currentfile customdata4 readhexstring
1139B8E0FAD2531B133BBAE2F8D05119417180A6AE9A7B4B437382A5AD987949
C08867272F6F92CAC28A66262E6E90C8E8DE5F070F37B6F2EADD5E060E36B5F0
FED6571F173FBEE6FDD5561E163EBDE5AB9E7F4F477786A1A99D7E4E467685A3
2C6C96CEC68E62222A6A95CDC58D64240C34B3F6EED95A020A32B1F5EDDB5C04
143CBBE3F9D1521A123AB9E1FBD3541C447483A4AC997A4A427281A7AF9B7C4C
C38B65252D6D91C9C1896828307093CBEBDC5D050D35B4F1E9DF60081038B7F3
FCD4551D153DBCE4FFD758201840BFE7A89C7D4D457584A2AA9F8050487887A0
296994CCC48C63232B6B97CFC78F61210931B0F4ECDA5B030B33B2F7EFD85901
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata5 28 28 mul string def
currentfile customdata5 readhexstring
010B34C3EBFCF7CE3F16020C35C4EDFBF6CD3E15102552A4D6EADDB5632B1126
54A5D5EADCB3622A3958768499C19E8C7C5E3A59778498C19D8B7B5DC8A99370
47334C7587AFC9AA936F46324B7485AEF1E5BC6B1E0A2351A3D8F2E4BC6A1E09
2351A2D7FFF9D14219050F38C6EFFEF9D04118040E37C6EFE8E0B7662D142856
A8D3E7DFB7652D132856A7D4BF9C8E7F603D5B7A8195BE9A8E7E603C5B798297
314A7389B2CCAD906D442F497289B1CBAC926E4508214FA1DBF4E2B9671B0720
4EA0DAF4E3BA691C030D36C5EDFBF6CD3F16010C34C3ECFDF8CF4017122654A6
D4E9DDB4622A112553A5D6EBDEB5642C3B59788397C09C8B7C5D3A58778599C2
9E8C7D5FCAAB926E46314B7486AFC8AA947048334D7587B0F2E4BB691D082250
A1D8F1E6BD6B1F0A2452A3D9FDF8CF4118030E36C5EEFFFAD1421A050F38C7F0
E6DFB6642C132755A7D3E8E1B8662E152957A8D2BE9A8D7E5F3B5A798296BF9B
8F80613D5C7B80952F487188B1CAAC916D443049728AB3CCAE906C43061F4D9F
DAF3E2BA681C07214FA0DBF5E1B8671A00000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata6 28 28 mul string def
currentfile customdata6 readhexstring
081A44B6E0F2FDECC150250C091B45B6E1F3FCEBC04F240C1D336199C7D8DCD3
A56C37221E33619AC8D7DBD2A46B36214864798091AEB1958C7E694C49657A81
90ADB0948B7D684BB99D8475593C405C7888A1BEBA9E8574583B3F5B7888A0BD
E4CBAA712E1215326098CFE8E4CCA9712D1114315F97CEE7F5F1C6552B040719
43B5DFFAF6F0C6542A03061842B4DEF9FFEDC352270E0B1C47B8E3F4FEECC251
260D0A1C46B7E2F4DAD5A76E39232035639CCAD5D9D4A66D38231F34629BC9D6
AF938E806A4E4A677C838FABAE928D7F694D4A667B828FAC3E5A778AA3BFBC9F
8772563A3D597689A2BEBB9F8673573A14305E97D1EAE6CDA76F2B0F132F5D96
D0E9E5CDA8702C10051742B3DDFCF8EEC4522801041641B2DDFBF7EFC5532902
091B45B6E1F3FCEBC04F240C081A44B6E0F2FDECC150250C1E33619AC8D7DBD2
A46B36211D336199C7D8DCD3A56C372249657A8190ADB0948B7D684B48647980
91AEB1958C7E694CBA9E8574583B3F5B7888A0BDB99D8475593C405C7888A1BE
E4CCA9712D1114315F97CEE7E4CBAA712E1215326098CFE8F6F0C6542A030618
42B4DEF9F5F1C6552B04071943B5DFFAFEECC251260D0A1C46B7E2F4FFEDC352
270E0B1C47B8E3F4D9D4A66D38231F34629BC9D6DAD5A76E39232035639CCAD5
AE928D7F694D4A667B828FACAF938E806A4E4A677C838FAB3D597689A2BEBB9F
8673573A3E5A778AA3BFBC9F8772563A132F5D96D0E9E5CDA8702C1014305E97
D1EAE6CDA76F2B0F041641B2DDFBF7EFC5532902051742B3DDFCF8EEC4522801
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata7 28 28 mul string def
currentfile customdata7 readhexstring
01061B44B7E1F5FEFBE6BD4A210C01071B45B8E1F6FDFBE6BC4A200B09132A54
A7D1EAF5EED9B05D331609142B55A8D2EAF4EED9AF5C32161D2D3D6993C1CBE0
CEC59B7140301E2E3D6A93C0CADFCDC49A713F3047576C7B828DA2B6A48F867E
6F5A48576C7C828CA1B6A38F867E6E59BAAA958A78634E4451667A8498ADBAAB
968977624E4350657A8398ADE3D4C99F7539251A273C6892C2D7E4D4C89E7539
241A273B6891C1D6F8F2DDB460371005122A53A7D0ECF9F2DDB360360F051229
53A6D0EBFFFDE8BE4C220D03081D46B9E3F7FFFCE7BD4B210D02071C46B8E2F7
F3F0DBB15E34180B152C56A9D3E8F3EFDAB05D34170A142C55A9D2E9DFCCC69C
7341321F2F3F6B94BFC9DECCC59C7241311F2E3E6A94BFCAB5A38E8780705B49
596D7D808BA0B4A28D877F6F5B48586D7C818BA043506479859AAFBCAC978876
614C424F64798499AEBBAB968977624D19263B6791C3D8E5D6C79D7337231825
3A6690C3D7E5D5C79E74382304112952A5CFEDFAF0DBB25E350E03102851A5CE
ECF9F1DCB25F360E01071B45B8E1F6FDFBE6BC4A200B01061B44B7E1F5FEFBE6
BD4A210C09142B55A8D2EAF4EED9AF5C321609132A54A7D1EAF5EED9B05D3316
1E2E3D6A93C0CADFCDC49A713F301D2D3D6993C1CBE0CEC59B71403048576C7C
828CA1B6A38F867E6E5947576C7B828DA2B6A48F867E6F5ABAAB968977624E43
50657A8398ADBAAA958A78634E4451667A8498ADE4D4C89E7539241A273B6891
C1D6E3D4C99F7539251A273C6892C2D7F9F2DDB360360F05122953A6D0EBF8F2
DDB460371005122A53A7D0ECFFFCE7BD4B210D02071C46B8E2F7FFFDE8BE4C22
0D03081D46B9E3F7F3EFDAB05D34170A142C55A9D2E9F3F0DBB15E34180B152C
56A9D3E8DECCC59C7241311F2E3E6A94BFCADFCCC69C7341321F2F3F6B94BFC9
B4A28D877F6F5B48586D7C818BA0B5A38E8780705B49596D7D808BA0424F6479
8499AEBBAB968977624D43506479859AAFBCAC978876614C18253A6690C3D7E5
D5C79E74382319263B6791C3D8E5D6C79D73372303102851A5CEECF9F1DCB25F
360E04112952A5CFEDFAF0DBB25E350E
pop pop
/customdata8 28 28 mul string def
currentfile customdata8 readhexstring
050F2747B6D6EEF8FEF4DCBC4D2D1507111D375F9EC6E0E9EBE6CCA4653D1F13
2939556F8EA8C1D1D3C3AE9475573B2B4961717D808999B1B39B8B867F73634B
B8A090827A6A5A42445C6C7C8492A2BAD8C8AA97785232222434546E8DACCADA
F0E2CFA768401A0A0C1C365E9DC5E4F2FAF7DFBF50301802040E2646B5D5EDFC
FFF5DDBD4E2E160806102848B7D7EFF9EAE7CDA5663E2014121E38609FC7E1E8
D2C2AF9576583C2C2A3A56708FA9C0D0B29A8A878074644C4A62727E818898B0
435B6B7B8593A3BBB9A19183796959412333536D8CADCBDBD9C9AB9677513121
0B1B355D9CC4E5F3F1E3CEA6673F1909030D2545B4D4ECFDFBF6DEBE4F2F1701
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
  AGM_Gradient_Sep begin
  AGM_Gradient_Sep_private begin
  _compositeJob{
    initializeSinglePassSeps
  }{
    initializeMultiPassSeps
  }ifelse
  initializeSeps
  AGM_Gradient_private begin
    /_fillSD newSpotDict def
    /_rampSD newSpotDict def
    /_nCustomColorSD nd
 end
  AGM_Gradient_Sep_private
  {
    dup xcheck 1 index type /arraytype eq and
    {
      bind
    }if
    pop pop
  }forall
  AGM_Gradient_Sep
  {
    dup xcheck 1 index type /arraytype eq and
    {
      bind
    }if
    pop pop
  }forall
 end

  currentdict readonly pop
 end
}def
/terminate{
  currentdict AGM_Gradient_Sep eq{
   end
  }if
}def

AGM_Gradient_Sep_private begin
/initializeSeps{
  _noImage not _level2PS not and{
    /_whiteBytes 1 makeByte8 pt
    /knockOut{
      8 setImageParms _whiteBytes /_image load 5 execImage
    }def
    /linealFill{
      mySave
      8 setImageParms
      _color{
        _nCustomColorSD begin
          cyan magenta yellow black
          _spotColor{
            spot1 begin
              /tintImage tintValue 1 exch sub makeByte8 def
           end
            spot2 begin
              /tintImage tintValue 1 exch sub makeByte8 def
           end
          }if
       end
        4{
          makeByte8 4 1 roll
        }repeat
        true 4 _nCustomColorSD ncolorimage
      }{
        _nCustomColorSD/black get 1 exch sub makeByte8
        _nCustomColorSD bwImage
      }ifelse
      myRestore
    }def
  }{
     /knockOut{
      gsave
      false setoverprint
      1 setgray
      0 0 1 1 rectfill
      grestore
    }def
  }ifelse
  /newSpotDict{
    11 dict dup begin
      /nSpots 2 def
      /spot1 7 dict def
      /spot2 7 dict def
   end
  }def
  /initSpotData
  {
   begin
      /name nd
      /tintImage nd
      /tintValue nd
      /spot_C nd
      /spot_M nd
      /spot_Y nd
      /spot_K nd
   end
  }def
  /initSpotDict{
   begin
      /cyanInk false def
      /magentaInk false def
      /yellowInk false def
      /blackInk false def
      /cyan nd
      /magenta nd
      /yellow nd
      /black nd
      spot1 initSpotData
      spot2 initSpotData
   end
  }def
  /copySpotDict{
    /_dst xp
   begin
      cyanInk magentaInk yellowInk blackInk
      cyan magenta yellow black
      spot1 spot2
   end
    _dst begin
      /spot1 spot1 maxlength dict def
      /spot2 spot2 maxlength dict def
      spot2 copy pop
      spot1 copy pop
      /black xd
      /yellow xd
      /magenta xd
      /cyan xd
      /blackInk xd
      /yellowInk xd
      /magentaInk xd
      /cyanInk xd
   end
  }def
  /setCustomColor
  {
    1 index /Black eq{
      6 1 roll 5 npop
      1 exch sub
      setgray
    }{
      6 1 roll _ccAry1 astore exch
      dup null eq{
        pop 0
      }if
      setcustomcolor
    }ifelse
  }def
  /setCStop{
    /_colorStyle exch pt

    _colorStyle 0 eq{
      0 0 0
      4 -1 roll
      1 exch sub
      _spotColor{
        /_colorStyle 3 pt
        /Black
        1 index
        1 exch sub
      }if
    }if
    _colorStyle 2 eq{
      3 npop
    }if
    _rampSD _fillSD copySpotDict

    _colorStyle 4 eq{
      pop
      9 2 roll 3 npop 6 -2 roll
    } if

    _colorStyle 3 eq _colorStyle 4 eq or{

      _fillSD begin
        exch
        dup spot1/name get eq{
          spot1 spot2
        }{
          spot2 spot1
        }ifelse
       begin
         begin
            /name xd
            1 exch sub /tintValue xd
            4{
              tintValue mul 4 1 roll
            }repeat
            _spotColor not{
              /tintValue null def
            }if
         end
          /tintValue 0 def
       end
     end
    }if
    _fillSD nsetcustomcolor
  }def
  /renderCMYK{
    spot1/name get null eq
    spot2/name get null eq and
    dup not{
      pop
      spot1 spotConverted
    }if
    dup not{
      pop
      spot2 spotConverted
    }if
  }def
  /fill_ /fill load def
  /fillOvp{
    currentoverprint{
      _inRipSep{
        currentcolorspace 0 get
        dup /DeviceGray eq
        1 index /DeviceCMYK eq or{
          pop
          currentcmykcolor add add add 0 eq{
            newpath
          }if
        }{
          /Separation eq{
            currentcolor 0 eq{
              newpath
            }if
          }if
        }ifelse
      }{
        currentgray 1 eq{
          newpath
        }if
      }ifelse
    }if
    fill_
  }def
  /fill{
    _nCustomColorSD begin
      renderCMYK
      {
        fillOvp
      }{
        spot1 begin
          gsave
          name null ne{
            spot_C spot_M spot_Y spot_K name tintValue setCustomColor
          }{
            1 setgray
          }ifelse
          fillOvp
          grestore
       end
        spot2 begin
          name null ne{
            gsave
            true setoverprint
            spot_C spot_M spot_Y spot_K name tintValue setCustomColor
            fillOvp
            grestore
          }if
       end
        newpath
      }ifelse
   end
  }def
  /expandSpot{
    _spotColor{
      /_len xp
      _rampSD begin
        spot1 begin
          tintImage null ne{
            tintImage _len expandOne /tintImage xd
          }if
       end
        spot2 begin
          tintImage null ne{
            tintImage _len expandOne /tintImage xd
          }if
       end
     end
    }{
      pop
    }ifelse
  }def
  /rampImage{
    _rampSD begin
      _color{
        /cyanInk _cyanData 0 ne def
        /magentaInk _magentaData 0 ne def
        /yellowInk _yellowData 0 ne def
        /blackInk _blackData 0 ne def
        _nSamples setImageParms
        _nSamples expandSpot
        _cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
        true 4 _rampSD ncolorimage
      }{
        /cyanInk false def
        /magentaInk false def
        /yellowInk false def
        /blackInk true def
        _nSamples setImageParms
        _blackData _rampSD bwImage
      }ifelse
   end
  }def
  /nsetcustomcolor where{
    pop
  }{
    /nsetcustomcolor
    {
      /_nCustomColorSD xp
      _nCustomColorSD begin
        4 copy
        /black xd
        /yellow xd
        /magenta xd
        /cyan xd
        4 copy
        0 ne /blackInk xd
        0 ne /yellowInk xd
        0 ne /magentaInk xd
        0 ne /cyanInk xd
     end
      setcmykcolor
    }def
  }ifelse
  /nsetcustomcolorend where{
    pop
  }{
    /nsetcustomcolorend
    {
      /_nCustomColorSD null pt
    }def
  }ifelse
}def
/initializeSinglePassSeps{
  /_decodeNorm  [0 1] pt
  /_decodeInvert  [1 0] pt
  /spotConverted
  {
   begin
      name null eq{
        false
      }{
        tintValue null eq tintImage null eq and{
          true
        }{
          false
          currentpagedevice/SeparationOrder get{name eq or}forall
          not
        }ifelse
      }ifelse
   end
  }def
  /dictImage
  {
    20 dict dup begin
      /Dict xd
      /Decode xd
      /DataSource xd
      /ImageMatrix xd
      /BitsPerComponent xd
      /Height xd
      /Width xd
      /ImageType 1 def
      Dict
   end
    /_image load 1 execImage
  }def
  /bwImage{
   begin
      gsave
      currentoverprint{
        blackInk{
          [/Separation /Black /DeviceGray{}] setcolorspace
          _decodeInvert dictImage
        }{
          5 npop
        }ifelse
      }{
        /DeviceGray setcolorspace
        _decodeNorm dictImage
      }ifelse
      grestore
   end
  }def
  /ncolorimage where{
    pop
  }{
    /ncolorimage{
     begin
        renderCMYK
        {
          cyanInk
          magentaInk and
          yellowInk and
          blackInk and
          not
          currentoverprint
          and
          {
            pop pop
            gsave
            cyanInk{
              8 copy
              [/Separation /Cyan /DeviceGray{}] setcolorspace
              3 npop
              _decodeNorm dictImage
            }if
            magentaInk{
              8 copy
              [/Separation /Magenta /DeviceGray{}] setcolorspace
              4 -1 roll
              3 npop
              _decodeNorm dictImage
            }if
            yellowInk{
              8 copy
              [/Separation /Yellow /DeviceGray{}] setcolorspace
              4 -2 roll
              3 npop
              _decodeNorm dictImage
            }if
            blackInk{
              4 -3 roll
              [/Separation /Black /DeviceGray{}] setcolorspace
              3 npop
              _decodeNorm dictImage
            }{
              8 npop
            }ifelse
            grestore
          }{
            /_colorimage load 10 execImage
          }ifelse
        }{
          6 npop
          gsave
          spot1 begin
            name null ne tintImage null ne and{
              [/Separation name /DeviceGray{}] setcolorspace
              4 copy
              tintImage
              name /Black eq{
                _decodeNorm
              }{
                _decodeInvert
              }ifelse
              dictImage
            }{
              1 setgray fill
            }ifelse
         end
          spot2 begin
            true setoverprint
            name null ne tintImage null ne and{
              [/Separation name /DeviceGray{}] setcolorspace
              tintImage
              name /Black eq{
                _decodeNorm
              }{
                _decodeInvert
              }ifelse
              dictImage
            }{
              4 npop
              1 setgray fill
            }ifelse
         end
          grestore
        }ifelse
     end
    }def
  }ifelse
}def
/initializeMultiPassSeps{
  /_isCMYKSep
    _cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
  pt
  /invertXfer{
    [
    {
      1 exch sub
    }/exec load systemdict /currenttransfer get exec /exec load
    ] cvx systemdict /settransfer get exec
  }def
  /ccThrough{
    gsave
    1 setCustomColor
    currentcmykcolor
    grestore
    add add add 0 ne
  }def
  /spotConverted
  {
   begin
      _isCMYKSep not{
        false
      }{
        name null eq{
          false
        }{
          tintValue null eq tintImage null eq and{
            true
          }{
            spot_C spot_M spot_Y spot_K name ccThrough
          }ifelse
        }ifelse
      }ifelse
   end
  }def
  /spotChannel
  {
    _isCMYKSep{
      pop false
    }{
     begin
        name null eq{
          false
        }{
          spot_C spot_M spot_Y spot_K name ccThrough
        }ifelse
     end
    }ifelse
  }def
  /getChannelData
  {
    _isCMYKSep dup{
      pop renderCMYK
    }if
    {
      _blackPlate{
        4 1 roll 3 npop blackInk
      }{
        _yellowPlate{
          4 2 roll 3 npop yellowInk
        }{
          _magentaPlate{
            4 3 roll 3 npop magentaInk
          }{
            3 npop cyanInk
          }ifelse
        }ifelse
      }ifelse
      {
        true /nonZeroData
      }{
        true /zeroData
      }ifelse
    }{
      4 npop
      spot1/name get null ne
      spot1 spotChannel and{
        spot1/tintImage get dup null ne{
          false /nonZeroData
        }{
          pop false /noData
        }ifelse
      }{
        spot2/name get null ne
        spot2 spotChannel and{
          spot2/tintImage get dup null ne{
            false /nonZeroData
          }{
            pop false /noData
          }ifelse
        }{
          false /noData
        }ifelse
      }ifelse
    }ifelse
  }def
  /renderChannelData
  {
    /_tmp xp
    _tmp /nonZeroData ne currentoverprint and{
      pop
      _tmp /zeroData eq{pop}if
      4 npop
    }{
      _tmp /nonZeroData eq{
        {
          invertXfer
        }if
          systemdict/image
        get 5 execImage
      }{
        pop
        _tmp /zeroData eq{pop}if
        4 npop
        knockOut
      }ifelse
    }ifelse
  }def
  /bwImage{
   begin
      gsave
      dup dup dup
      getChannelData
      exch pop false exch
      renderChannelData
      grestore
   end
  }def
  /ncolorimage{
   begin
      pop pop
      gsave
      spot2/name get null ne spot2 spotChannel and{
        true setoverprint
      }if
      getChannelData
      renderChannelData
      grestore
   end
  }def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 200 dict def
/initialize
{
  AGM_Gradient begin
  AGM_Gradient_private begin
  initializeVars

  /bd systemdict/mark get def
  /ed
    _level2PS
    {
      (>>)
    }{
      (counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
    } ifelse
  cvx def

  _level2PS{
    initializeLev2
  }{
    initializeLev1
  }ifelse

  queryDevice

  initializeShading
  initializeOps
  _producingSeps{
    AGM_Gradient_Sep/initialize get exec
  }{
    initializeComposite
  }ifelse
  _illustrator{
    /f{}def
    /F{}def
    /s{}def
    /S{}def
    /b{}def
    /B{}def
  }if
  /image where{
    /image get /_image xd
  }if
  /colorimage where{
    /colorimage get /_colorimage xd
  }if
  /rectfill where dup{
    exch pop not _producingSeps or
  }{
    not
  }ifelse
  {
    /rectfill{
      gsave
      newpath
      4 2 roll moveto
      1 index 0 rlineto
      0 1 index rlineto
      1 index neg 0 rlineto
      pop pop
      closepath
      fill
      grestore
    }def
  }if
  /linealImage _noImage{
    /rectImage load
  }{
    _producingSeps{
      AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
      /rampImage load
     end
    }{
      /rampImage load
    }ifelse
  }ifelse
  def
  AGM_Gradient_private
  {
    dup xcheck 1 index type /arraytype eq and
    {
      bind
    }if
    pop pop
  }forall
  AGM_Gradient
  {
    dup xcheck 1 index type /arraytype eq and
    {
      bind
    }if
    pop pop
  }forall
 end

  currentdict readonly pop
 end
}def
/initializeAI
{
  pop pop
  AGM_Gradient/AGM_Gradient_private get /_illustrator true put
  AGM_Gradient/initialize get exec
    AGM_Gradient begin
}def
/unload{
  systemdict/languagelevel known{
    systemdict/languagelevel get 2 ge{
      userdict/AGM_Gradient_Sep 2 copy known{
        undef
      }{
        pop pop
      }ifelse
      userdict/AGM_Gradient 2 copy known{
        undef
      }{
        pop pop
      }ifelse
    }if
  }if
}def
/terminate{
  currentdict AGM_Gradient eq{
   end
  }if
}def

AGM_Gradient_private begin
/initializeVars{
  /_d255 256 array def
  0 1 255{
    _d255 exch dup 255 div put
  }bind for
  /_d255- 256 array def
  0 1 255{
    _d255- exch 1 _d255 2 index get sub put
  }bind for
  /_sSave nd
  /_dUserSpace matrix defaultmatrix def
  /_bUMatrix matrix def
  /_imageMatrix matrix def
  /_saveMatrix matrix def
  /_xm matrix def
  /_ccAry1 5 array def
  /_level2PS
    systemdict/languagelevel known dup{
      pop systemdict/languagelevel get 2 ge
    }if
  def
  /_level3PS
    _level2PS systemdict/shfill known and
  def
  currentdict /_illustrator known not{
    /_illustrator false def
  }if

}def
/initializeOps
{
  AGM_Gradient begin
  currentdict/Bc known not{
    /Bc{

      _renderFlag 2 eq{
        6 npop
      }{
        pushBSpace
        _rampIndex 0 eq{
          pop pop
          setCStop
        }if
        linealFill
        popBSpace
      }ifelse

    }def
  }if

  currentdict/Bg known not{
    /Bg{
      10 npop
      /_gradName xp
      /_renderFlag xp

      _renderFlag 2 ne{

        _illustrator{
          _of setoverprint
        }if

        _illustrator _eo and _renderFlag 3 eq or{
          eoclip
        }{
          clip
        }ifelse

        _gradNames _gradName 2 copy known{
          get
          mark exch aload pop
          /_gradType xp
          1 sub dup /_rampIndex xp
          /_maxRampIndex xp
          mark exch aload pop
          0 0
        }if
        pop pop
        getRampData
      }{
        mark mark
      }ifelse
    }def
  }if

  currentdict/Bm known not{
    /Bm{
      _renderFlag 2 ne{
        _gradType 0 eq{
          linealRamp
        }{
          radialGrad
        }ifelse
      }{
        6 npop
      }ifelse
    }def
  }if

  currentdict/Bh known not{
    /Bh{
      2 npop
      /_yHi xp
      /_xHi xp
      /_radHilite _xHi 0 ne _yHi 0 ne or pt
    }def
  }if

  currentdict/Bn known not{
    /Bn{
      AGM_Gradient_private begin
        dict /_gradNames xp
     end
    }def
  }if

  currentdict/Bd known not{
    /Bd{
      AGM_Gradient begin
      AGM_Gradient_private begin
        /_nColorsBd xp
        /_gradType xp
        /_gradName xp
    }def
  }if

  currentdict/BD known not{
    /BD{
        currentdict/_gradNames known not{
          /_gradNames 20 dict def
        }if
        ] _nColorsBd _gradType
        ]  _gradName exch /_gradNames xput
     end
     end
    }def
  }if

  currentdict/Bb known not{
    /Bb{

      AGM_Gradient begin
      AGM_Gradient_private begin
      _producingSeps{
        AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
      }if
      mySave
    }def
  }if

  currentdict/BB known not{
    /BB{

      /_tmp xp
      cleartomark cleartomark

      _tmp dup
      _renderFlag

      myRestore

      _producingSeps{
       end
      }if

      _illustrator
     end
     end

      {
        2 ne exch 0 gt and{
          2 eq{
            s
          }{
            S
          }ifelse
        }{
          pop newpath
        }ifelse
      }{
        pop newpath
      }ifelse


    }def
  }if

  currentdict/Xm known not{
    /Xm{
      _xm astore pop
    }def
  }if

 end
}def
/queryDevice{
  /_inRipSep
    _level2PS{
      currentpagedevice/Separations 2 copy known{
        get
      }{
        pop pop false
      }ifelse
    }{
      false
    }ifelse
  def
  /_noImage /lv1Fix where{
    pop lv1Fix
  }{
    false
  }ifelse
  def
  /_useShells where{
    pop
  }{
    /_useShells true def
  }ifelse

  /_useSmoothShade where{
    pop
  }{
    /_useSmoothShade false def
  }ifelse
  /_cyanPlate 1 0 0 0 testCMYKColorThrough def
  /_magentaPlate 0 1 0 0 testCMYKColorThrough def
  /_yellowPlate 0 0 1 0 testCMYKColorThrough def
  /_blackPlate 0 0 0 1 testCMYKColorThrough def
  /_compositeJob
    _cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
  def
  /_compositeSpotDevice where{
    pop
  }{
    /_compositeSpotDevice _compositeJob not _inRipSep or{
      1
    }{
      0
    }ifelse
    def
  }ifelse
  /_producingSeps _compositeSpotDevice 0 ne def
  /_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
  /_dpiThreshold where{
    pop
  }{
    /_dpiThreshold 600 def
  }ifelse
  /_screenFreqThreshold where{
    pop
  }{
    /_screenFreqThreshold 150 def
  }ifelse
  /_contoneDevice where{
    pop
  }{
    /_contoneDevice false def
  }ifelse
  /_subSampleOK
    _deviceDPI _dpiThreshold le
    currentScreenFreq _screenFreqThreshold le and
    _contoneDevice not and
    _producingSeps not and
  def
}def
/initializeLev1{
  /makeByte8{
    /_tmp 0 pt
    255 mul cvi
    8 string 8{
      dup _tmp 3 index put
      /_tmp _tmp 1 add pt
    }repeat
    exch pop
  }def
  /currentScreenFreq{
    currentscreen pop pop
  }def
  /_byte 1 string def
  /colorimage where{
    pop
  }{
    /colorimage{
      pop pop
      /_blackTmp xp
      /_yellowTmp xp
      /_magentaTmp xp
      /_cyanTmp xp
      /_cnt 0 pt
      [
      _byte dup 0
      _cyanTmp
        /_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
      _magentaTmp
        /_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
      _yellowTmp
        /_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
      _blackTmp
        /_cnt cvx /get cvx _d255 /exch cvx /get cvx
      /add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
      /dup cvx 0 /lt cvx{
        pop 0
      }/if cvx
      /dup cvx 1 /gt cvx{
        pop 1
      }/if cvx
      255 /mul cvx /cvi cvx
      256 /mod cvx
      /dup cvx 0 /lt cvx{
        pop 0
      }/if cvx
      /put cvx
      /_cnt dup cvx 1 /add cvx /pt cvx
      ] cvx
      bind
      /_image load 5 execImage
    }def
  }ifelse
}def
/initializeLev2{
  /level2ScreenFreq{
   begin
    60
    HalftoneType 1 eq{
      pop Frequency
    }if
    HalftoneType 2 eq{
      pop GrayFrequency
    }if
    HalftoneType 5 eq{
      pop Default level2ScreenFreq
    }if
     end
  }def
  /currentScreenFreq{
    currenthalftone level2ScreenFreq
  }def
}def
/initializeShading{
  _useSmoothShade _level3PS and{
    /_usingSmoothShade true pt
    initializeLev3_Ops
  }{
    /_usingSmoothShade false pt
  }ifelse
}def
/initializeLev3_Ops
{
  /initShFill{
    /_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
    /_rampFuncsArray _maxRampIndex array pt
    /_boundsArray _maxRampIndex 1 sub array pt
    /_encodeArray _maxRampIndex 2 mul array pt
    /_beginCoord _rampPoint pt
    /_colorSpace null pt
    /_firstFill _rampIndex _maxRampIndex eq pt
    /_lastFill false pt
  }def
  /getRampColorSpace{
    _nSamples 1 gt{
      /_ndx 0 pt
      [blendColor] cvx exec
    }if
    /_C0 [currentcolor] pt
    /_C0_Space currentcolorspace pt

    _nSamples 1 gt{
      /_ndx _nSamples 1 sub pt
      [blendColor] cvx exec
    }if
    /_C1 [currentcolor] pt
    /_C1_Space currentcolorspace pt

    _C0_Space _C1_Space eq{
      /_rampColorSpace _C0_Space pt
    }{
      (colorspace conflict!) ==
      showpage
      stop
    }ifelse

    _spotColor{
      nsetcustomcolorend
    }if
  }def
  /linealShFill{
    popBSpace
    _xm aload pop pushBSpace

    /_size _index 1 add pt
    _size _maxRampIndex lt {
      /_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
      /_boundsArray _boundsArray 0 _size 1 sub getinterval pt
      /_encodeArray _encodeArray 0 _size 2 mul getinterval pt
    }if

    bd
      /ShadingType 2
      /ColorSpace _colorSpace
      /Function
        bd
          /FunctionType 3
          /Domain [0 1]
          /Functions _rampFuncsArray
          /Bounds _boundsArray
          /Encode _encodeArray
        ed
      /Extend [_firstFill _lastFill]
      /Domain [0 1]
      /Coords [_beginCoord 0 _endCoord 0]
    ed
    shfill
  }def

  /radialShFill{
    /_size _maxRampIndex _index sub pt
    _size _maxRampIndex lt {
      /_rampFuncsArray _rampFuncsArray _index _size getinterval pt
      /_boundsArray _boundsArray _index _size 1 sub getinterval pt
      /_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
    }if

    /_rampLen _beginCoord _endCoord sub pt
    bd
      /ShadingType 3
      /ColorSpace _colorSpace
      /Function
        bd
          /FunctionType 3
          /Domain [0 1]
          /Functions _rampFuncsArray
          /Bounds _boundsArray
          /Encode _encodeArray
        ed
      /Extend [_lastFill _firstFill]
      /Domain [0 1]
      /Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord]
    ed
    shfill

    _radHilite{
      _xHi _rampLen mul _yHi _rampLen mul translate
    }if
  }def

  /fillRamp{


    /_invert _midPoint 0.5 lt pt
    _rampIndex _maxRampIndex eq {
      initShFill
    }if

    getRampColorSpace

    _colorSpace null eq{
      /_colorSpace _rampColorSpace pt
    }{
      _colorSpace _rampColorSpace ne{
        /_index _index 1
        _gradType 0 eq{
          sub pt
          linealShFill
        }{
          add pt
          radialShFill
        }ifelse
        initShFill
        /_colorSpace _rampColorSpace pt
      } if
    }ifelse
    /_endCoord _endPoint pt
    _rampFuncsArray _index
    bd
      /FunctionType 2
      /Domain [0 1]
      /N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
      _gradType 0 eq{
        _invert{/C1}{/C0}ifelse _C0
        _invert{/C0}{/C1}ifelse _C1
      }{
        _invert{/C0}{/C1}ifelse _C1
        _invert{/C1}{/C0}ifelse _C0
      }ifelse
    ed
    put

    _rampIndex 1 ne{
      _boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
    } if

    0 1 _invert {exch}if
    _encodeArray _index 2 mul 1 add 3 -1 roll put
    _encodeArray _index 2 mul 3 -1 roll put
    _rampIndex 1 eq {
      /_lastFill true pt
      _gradType 0 eq{
        linealShFill
      }{
        radialShFill
      }ifelse
    }if
    /_index _index 1
    _gradType 0 eq{
      add pt
    }{
      sub pt
    }ifelse
  }def

  /radialRamp
    /fillRamp load def

  /rampImage
    /fillRamp load def

  AGM_Gradient begin
  /Bc{
    6 npop
  }def

 end


}def
/initializeComposite{
  /bwImage{
    pop /_image load 5 execImage
  }def
  currentdict/rampImage known not{
    /rampImage{
      _color{
        _nSamples setImageParms


        _rgbRamp{
          _redData _greenData _blueData _nSamples 3 expandColor
          true 3 null ncolorimage
        }{
          _cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
          true 4 null ncolorimage
        }ifelse
      }{
        _nSamples setImageParms _blackData null bwImage
      }ifelse
    }def
  }if
  /setCStop{
    /_colorStyle exch pt
    _colorStyle 0 eq{
      1 exch sub
      0 0 0
      4 -1 roll
    }if

    _colorStyle 2 eq{
      setrgbcolor 4 npop
    }if

    _colorStyle 3 eq{
      1 exch sub /_tmp xp
      pop
      4{
        _tmp mul 4 1 roll
      }repeat
    }if

    _colorStyle 4 eq{
      3 -1 roll pop pop
      1 exch sub /_tmp xp
      3{
        1 exch sub _tmp mul 1 exch sub 3 1 roll
      }repeat
      setrgbcolor
      4 npop
    }if
    _colorStyle 2 ne _colorStyle 4 ne and{
      null nsetcustomcolor
    }if
  }def
  /nsetcustomcolor
  {
    pop setcmykcolor
  }def
  /nsetcustomcolorend
  {
  }def
  /ncolorimage{
    pop
    /_colorimage load 10 execImage
  }def
  _noImage not _level2PS not and{
    /linealFill{
      8 setImageParms
      _color{
        currentcmykcolor
        4{
          makeByte8 4 1 roll
        }repeat
        true 4 null ncolorimage
      }{
        currentgray makeByte8 null bwImage
      }ifelse
    }def
  }if
}def
/npop{
  {pop}repeat
}def
/xd{
  exch def
}def
/nd{
  null def
}def
/pt{
  AGM_Gradient_private 3 1 roll put
}def
/xp{
  exch pt
}def
/xput{
  dup load dup length exch maxlength eq{
    dup dup load dup
    length 2 mul dict copy def
  }if
  load begin
    def
  end
}def
/mySave{
  save /_sSave xp
}def
/myRestore{
  _sSave type /savetype eq{
    _sSave restore
  }if
}def
/gMark{
  counttomark 2 add -1 roll
}def
/execImage{
  /_tmp xp
  {
    exec
  }stopped{
    $error /errorname get /undefinedresult ne{
      stop
    }{
      _tmp npop
    }ifelse
  }if
}def
/pushBSpace{
  newpath gsave
  _bUMatrix astore concat
}def
/popBSpace{
  grestore
}def
/setImageParms{
  1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
  0 0 1 1 rectfill
}def
/testCMYKColorThrough{
  gsave
  setcmykcolor currentcmykcolor
  grestore
  add add add 0 ne
}def
/expandOne  {
  /_tmp xp
  dup type /stringtype ne{
    _tmp string
    exch
    dup 0 ne{
      255 mul cvi
      0 1 _tmp 1 sub{
        3 copy
        exch put pop
      }for
    }if
    pop
  }if
}def
/expandColor{
  /_channels xp
  /_len xp
  _channels{
    _len expandOne _channels 1 roll
  }repeat
}def
/blendColor{

  _color{
    _rgbRamp _producingSeps not and{
      _redData dup type /stringtype eq{
        /_ndx cvx /get cvx _d255 /exch cvx /get cvx
      }if
      _greenData dup type /stringtype eq{
        /_ndx cvx /get cvx _d255 /exch cvx /get cvx
      }if
      _blueData dup type /stringtype eq{
        /_ndx cvx /get cvx _d255 /exch cvx /get cvx
      }if
      /setrgbcolor cvx
    }{
      _cyanData dup type /stringtype eq{
        /_ndx cvx /get cvx _d255 /exch cvx /get cvx
      }if
      _magentaData dup type /stringtype eq{
        /_ndx cvx /get cvx _d255 /exch cvx /get cvx
      }if
      _yellowData dup type /stringtype eq{
        /_ndx cvx /get cvx _d255 /exch cvx /get cvx
      }if
      _blackData dup type /stringtype eq{
        /_ndx cvx /get cvx _d255 /exch cvx /get cvx
      }if

      _spotColor{
        _rampSD begin
          /_rampSD cvx /begin cvx

          spot1 begin
            tintImage dup type /stringtype eq{
              /_ndx cvx /get cvx _d255- /exch cvx /get cvx
            }{
              dup null ne{
                name type /nametype ne{
                  1 exch sub
                }if
              }if
            }ifelse
         end
          /spot1 cvx /tintValue 3 -1 /roll cvx /put cvx

          spot2 begin
            tintImage dup type /stringtype eq{
              /_ndx cvx /get cvx _d255- /exch cvx /get cvx
            }{
              dup null ne{
                name type /nametype ne{
                  1 exch sub
                }if
              }if
            }ifelse
         end
          /spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
          /end cvx
       end
        /_rampSD cvx
        /nsetcustomcolor cvx
      }{
        /setcmykcolor cvx
      }ifelse
    }ifelse
  }{
    _blackData /_ndx cvx /get cvx
    _d255 /exch cvx /get cvx

    _usingSmoothShade{
      1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
    }{
       /setgray cvx
    }ifelse
  }ifelse
}def
/linealRamp{
  pushBSpace
  _ramp{
    linealImage
  }{
    linealFill
  }ifelse
  popBSpace
  /_rampIndex _rampIndex 1 sub pt
  _rampIndex 0 gt{
    getRampData
  }if
}def
/radialGrad{
  /_firstShell true pt
  _usingSmoothShade not{
    fill
  }if
  pushBSpace

  _radHilite{
    _xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
    _rampPoint 1 lt{
      1 _rampPoint sub dup _xHi mul exch _yHi mul translate
    }if
  }if
  _rampIndex{
      radialRamp
    /_rampIndex _rampIndex 1 sub pt
    _rampIndex 0 gt{
      getRampData
    }if
  }repeat

  popBSpace

}def
/getNSamples{
  0 exch
  {
    dup type /stringtype eq{
      length exch pop exit
    }if
    pop
  }forall
  dup 0 eq{
    pop 1
  }if
}def
/getRampData{
  /_rampType gMark pt
  /_color _rampType 0 gt pt
  /_ccRGB _rampType 5 eq _rampType 6 eq or pt
  /_rgbRamp _rampType 4 eq _ccRGB or pt
  /_ccProcess _rampType 2 eq _rampType 3 eq or pt
  _producingSeps{
    _rampSD initSpotDict
    /_spotColor _ccProcess _ccRGB or pt
  }{
    /_spotColor false pt
  }ifelse
  /_ramp true pt
  100 div /_rampPoint xp
  100 div /_midPoint xp

  dup /_colorStyle xp
  _colorStyle 0 eq{
    2
  }{
    _colorStyle 1 eq{
      5
    }{
      _colorStyle 2 eq{
        8
      }{
        _colorStyle 3 eq{
          _producingSeps{
            _rampSD begin
              spot1 begin
                /name 3 index def
                /spot_K 4 index def
                /spot_Y 5 index def
                /spot_M 6 index def
                /spot_C 7 index def
             end
           end
          }if
          7
        }{
          _producingSeps{
            _rampSD begin
              spot1 begin
                /name 4 index def
                /spot_K 8 index def
                /spot_Y 9 index def
                /spot_M 10 index def
                /spot_C 11 index def
             end
           end
          }if
          11
        } ifelse
      }ifelse
    }ifelse
  }ifelse
  /_tmp xp
  _tmp index 100 div /_endPoint xp

  _gradType 1 eq{
    _tmp 1 add index 100 div /_midPoint xp
  }if

  _producingSeps{
    _tmp 2 add index /_nextColorStyle xp
    _nextColorStyle 3 eq{
      /_tmp _tmp 4 add pt
      _tmp index dup
      _rampSD begin
        spot1 /name get ne{
          spot2 begin
            /name xd
            /spot_K _tmp 2 add index def
            /spot_Y _tmp 3 add index def
            /spot_M _tmp 4 add index def
            /spot_C _tmp 5 add index def
         end
        }{
          pop
        }ifelse
     end
    }if
    _nextColorStyle 4 eq{
      /_tmp _tmp 5 add pt
      _tmp index dup
      _rampSD begin
        spot1 /name get ne{
          spot2 begin
            /name xd
            /spot_K _tmp 5 add index def
            /spot_Y _tmp 6 add index def
            /spot_M _tmp 7 add index def
            /spot_C _tmp 8 add index def
         end
        }{
          pop
        }ifelse
     end
    }if
  }if
  _rampType 3 eq _rampType 6 eq or{
    /_tint2Data gMark pt
  }if
  _ccProcess _ccRGB or{
    /_tint1Data gMark pt
  }if
  _rgbRamp{
    /_blueData gMark pt
    /_greenData gMark pt
    /_redData gMark pt
  }if

  _producingSeps{
    _rampSD begin
      _ccProcess _ccRGB or{
        _rampType 3 eq _rampType 6 eq or{
          spot2 begin
            /tintImage _gradType 0 eq{
              _tint2Data
            }{
              _tint1Data
            }ifelse
            def
            name null eq{
              /name /Black def
            }if
         end
        }if
        spot1 begin
          /tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
            _tint1Data
          }{
            _tint2Data
          }ifelse
          def
          _rampType 2 eq _rampType 5 eq or{
            name null eq{
              /name spot2 /name get def
              spot2 /name null put
            }if
          }{
            name null eq{
              /name /Black def
            }if
          }ifelse
       end
      }if
   end
  }if
  /_blackData gMark pt
  _rampType 0 gt{
    counttomark 4 add -3 roll
    /_yellowData xp
    /_magentaData xp
    /_cyanData xp
  }if
  _ramp{
    /_nSamples
      [
      _rampType 0 eq {_blackData}if
      _rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
      _rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
      _rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
      _rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
      _rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
      _rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
      ] getNSamples pt
    _usingSmoothShade not {/_ramp _nSamples 1 gt pt} if
  } if

  setCStop
}def
/rectImage{
  gsave
  /_sInc 1 pt
  /_bInc 1 _nSamples div pt
  /_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
  /_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
  0
  _nSamples
  [
  /dup cvx
  /_ndx /exch cvx /pt cvx
  blendColor
  0 0 _bInc 1 /rectfill cvx
  _bInc 0 /translate cvx
  _sInc /add cvx
  ] cvx
  bind
  repeat
  pop
  _spotColor{
    nsetcustomcolorend
  }if
  grestore
}def
/radialInit{
  /_nRadSamples _nSamples dup 0 eq{pop 1}if pt
  /_sInc -1 pt
  /_rampLen _rampPoint _endPoint sub pt
  /_bInc _rampLen _nSamples div neg pt
  /_optimize false pt
  _subSampleOK{
    /_uRampLen
      _rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
      0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
      2 copy lt{
        exch
      }if pop
    pt
    /_pChange
      _uRampLen 0 eq{
        0
      }{
        _nSamples _uRampLen div
      }ifelse
    pt
    _pChange .5 gt dup /_optimize xp{
      /_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
      /_bInc _rampLen _nRadSamples div neg pt
      /_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
    }if
  }if
  _radHilite{
    /_xBCInc _xHi _rampLen mul _nRadSamples div pt
    /_yBCInc _yHi _rampLen mul _nRadSamples div pt
  }if
}def
currentdict/radialRamp known not{
  /radialRamp{

    /_saveMatrix _saveMatrix currentmatrix def

    radialInit

    _rampPoint

    _nSamples 1 sub

    _nRadSamples
    [
      /dup cvx

      _optimize{
        /round cvx /cvi cvx
      }if

      /_ndx /exch cvx /pt cvx

      _useShells{
        /_firstShell cvx{
          /_firstShell false pt
        }{
          0 0 3 index 360 0 arcn fill
        }/ifelse cvx
      }if

      blendColor

      _useShells{
        0 0 3 /index cvx 0 360 /arc cvx
      }{
        0 0 3 /index cvx 0 360 /arc cvx /fill cvx
      }ifelse

      /exch cvx _bInc /add cvx /exch cvx

      _sInc /add cvx

      _radHilite{
        _xBCInc _yBCInc /translate cvx
      }if
    ] cvx bind
    repeat

    pop pop

    _saveMatrix setmatrix

    _radHilite{
      _xHi _rampLen mul _yHi _rampLen mul translate
    }if

    _useShells _rampIndex 1 eq and{
      fill
    }if
    _spotColor{
      nsetcustomcolorend
    }if


  }def
}if
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
  userdict /Adobe_ColorImage_AI6 24 dict put
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{
  Adobe_ColorImage_AI6 begin
  Adobe_ColorImage_AI6
  {
    dup type /arraytype eq
    {
      dup xcheck
      {
        bind
      } if
    } if
    pop pop
  } forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
  /Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
  /channelcount 0 def
  /sourcecount 0 def
  /sourcearray 4 array def
  /plateindex -1 def
  /XIMask 0 def
  /XIBinary 0 def
  /XIChannelCount 0 def
  /XIBitsPerPixel 0 def
  /XIImageHeight 0 def
  /XIImageWidth 0 def
  /XIImageMatrix null def
  /XIBuffer null def
  /XIDataProc null def
  /XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
  /colorimage where
  {
    /colorimage get /_colorimage exch def
  }
  {
    /_colorimage null def
  } ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
  0 3 index
  dup length 1 sub 0 3 3 -1 roll
  {
    3 getinterval { } forall
    5 index exec
    3 index
  } for

   5 { pop } repeat
} def
/WalkCMYKString
{
  0 3 index
  dup length 1 sub 0 4 3 -1 roll
  {
    4 getinterval { } forall

    6 index exec

    3 index

  } for

  5 { pop } repeat

} def
/StuffRGBIntoGrayString
{
  .11 mul exch

  .59 mul add exch

  .3 mul add

  cvi 3 copy put

  pop 1 add
} def
/RGBToGrayImageProc
{
  Adobe_ColorImage_AI6_Vars begin
    sourcearray 0 get exec
    dup length 3 idiv string
    dup 3 1 roll

    /StuffRGBIntoGrayString load exch
    WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
  exch .11 mul add

  exch .59 mul add

  exch .3 mul add

  dup 255 gt { pop 255 } if

  255 exch sub cvi 3 copy put

  pop 1 add
} def
/CMYKToGrayImageProc
{
  Adobe_ColorImage_AI6_Vars begin
    sourcearray 0 get exec
    dup length 4 idiv string
    dup 3 1 roll

    /StuffCMYKIntoGrayString load exch
    WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
  pop true eq
  {
    Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
  }
  {
    Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
    {
      Adobe_ColorImage_AI6_Vars begin
        sourcearray 0 3 -1 roll put

        channelcount 3 eq
        {
          /RGBToGrayImageProc
        }
        {
          /CMYKToGrayImageProc
        } ifelse
        load
     end
    } if
    image
  } ifelse
} def
/SeparateCMYKImageProc
{
  Adobe_ColorImage_AI6_Vars begin
    sourcecount 0 ne
    {
      sourcearray plateindex get exec
    }
    {
      sourcearray 0 get exec

      dup length 4 idiv string

      0 2 index

      plateindex 4 2 index length 1 sub
      {
        get 255 exch sub

        3 copy put pop 1 add

        2 index
      } for
      pop pop exch pop
    } ifelse
 end
} def

/FourEqual
{
  4 index ne
  {
    pop pop pop false
  }
  {
    4 index ne
    {
      pop pop false
    }
    {
      4 index ne
      {
        pop false
      }
      {
        4 index eq
      } ifelse
    } ifelse
  } ifelse
} def
/TestPlateIndex
{
  Adobe_ColorImage_AI6_Vars begin
    /plateindex -1 def
    /setcmykcolor where
    {
      pop
      gsave
      1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
      0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
      0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
      0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
      grestore
      1 0 0 0 FourEqual
      {
        /plateindex 0 def
      }
      {
        0 1 0 0 FourEqual
        {
          /plateindex 1 def
        }
        {
          0 0 1 0 FourEqual
          {
            /plateindex 2 def
          }
          {
            0 0 0 1 FourEqual
            {
              /plateindex 3 def
            }
            {
              0 0 0 0 FourEqual
              {
                /plateindex 5 def
              } if
            } ifelse
          } ifelse
        } ifelse
      } ifelse
      pop pop pop pop
    } if
    plateindex
 end
} def
/colorimage
{
  Adobe_ColorImage_AI6_Vars begin
    /channelcount 1 index def
    /sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
    4 sourcecount add index dup
    8 eq exch 1 eq or not
 end

  {
    /_colorimage load null ne
    {
      _colorimage
    }
    {
      Adobe_ColorImage_AI6_Vars /sourcecount get
      7 add { pop } repeat
    } ifelse
  }
  {
    dup 3 eq
    TestPlateIndex
    dup -1 eq exch 5 eq or or
    {
      /_colorimage load null eq
      {
        ColorImageCompositeEmulator
      }
      {
        dup 1 eq
        {
          pop pop image
        }
        {
          Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
          {
            gsave

            0 _currenttransfer exec
            1 _currenttransfer exec
            eq
            { 0 _currenttransfer exec 0.5 lt }
            { 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse

            { { pop 0 } } { { pop 1 } } ifelse
            systemdict /settransfer get exec
          } if

          _colorimage

          Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
          {
            grestore
          } if
        } ifelse
      } ifelse
    }
    {
      dup 1 eq
      {
        pop pop
        image
      }
      {
        pop pop
        Adobe_ColorImage_AI6_Vars begin
          sourcecount -1 0
          {
            exch sourcearray 3 1 roll put
          } for
          /SeparateCMYKImageProc load
       end
        systemdict /image get exec
      } ifelse
    } ifelse
  } ifelse
} def
/XG
{
  pop pop
} def
/XF
{
  13 {pop} repeat
} def
/Xh
{
  Adobe_ColorImage_AI6_Vars begin
    gsave
    /XIMask exch 0 ne def
    /XIImageHeight exch def
    /XIImageWidth exch def
    /XIImageMatrix exch def
    0 0 moveto
    XIImageMatrix concat
    XIImageWidth XIImageHeight scale

    XIMask
    {
      /_lp /null ddef
      _fc
      /_lp /imagemask ddef
    }
    if
    /XIVersion 7 def
 end
} def
/XH
{
  Adobe_ColorImage_AI6_Vars begin
    /XIVersion 6 def
    grestore
 end
} def
/XI
{
  Adobe_ColorImage_AI6_Vars begin
    gsave
    /XIMask exch 0 ne def
    /XIBinary exch 0 ne def
    pop
    pop
    /XIChannelCount exch def
    /XIBitsPerPixel exch def
    /XIImageHeight exch def
    /XIImageWidth exch def
    pop pop pop pop
    /XIImageMatrix exch def
    XIBitsPerPixel 1 eq
    {
      XIImageWidth 8 div ceiling cvi
    }
    {
      XIImageWidth XIChannelCount mul
    } ifelse
    /XIBuffer exch string def
    XIBinary
    {
      /XIDataProc { currentfile XIBuffer readstring pop } def
      XIVersion 6 le
      {
        currentfile 128 string readline pop pop
      }
      if
    }
    {
      /XIDataProc { currentfile XIBuffer readhexstring pop } def
    } ifelse

    XIVersion 6 le
    {
      0 0 moveto
      XIImageMatrix concat
      XIImageWidth XIImageHeight scale
      XIMask
      {
        /_lp /null ddef
        _fc
        /_lp /imagemask ddef
      } if
    } if

    XIMask
    {
      XIImageWidth XIImageHeight
      false
      [ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
      /XIDataProc load
      imagemask
    }
    {
      XIImageWidth XIImageHeight
      XIBitsPerPixel
      [ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
      /XIDataProc load

      XIChannelCount 1 eq
      {
        gsave
        0 setgray
        image
        grestore
      }
      {
        false
        XIChannelCount
        colorimage
      } ifelse
    } ifelse
    grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
  userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
  Adobe_Illustrator_AI5 dup begin
  Adobe_Illustrator_AI5_vars begin
  discardDict
  {
    bind pop pop
  } forall
  dup /nc get begin
  {
    dup xcheck 1 index type /operatortype ne and
    {
      bind
    } if
    pop pop
  } forall
 end
  newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
  Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
  dup load dup length exch maxlength eq
  {
    dup dup load dup
    length 2 mul dict copy def
  } if
  load begin
  def
 end
} def
/npop
{
  {
    pop
  } repeat
} def
/hswj
{
  dup stringwidth 3 2 roll
  {
    _hvwb eq { exch _hvcx add exch _hvcy add } if
    exch _hvax add exch _hvay add
  } cforall
} def
/vswj
{
  0 0 3 -1 roll
  {
    dup 255 le
    _charorientation 1 eq
    and
    {
      dup cstring stringwidth 5 2 roll
      _hvwb eq { exch _hvcy sub exch _hvcx sub } if
      exch _hvay sub exch _hvax sub
      4 -1 roll sub exch
      3 -1 roll sub exch
    }
    {
      _hvwb eq { exch _hvcy sub exch _hvcx sub } if
      exch _hvay sub exch _hvax sub
      _fontHeight sub
    } ifelse
  } cforall
} def
/swj
{
  6 1 roll
  /_hvay exch ddef
  /_hvax exch ddef
  /_hvwb exch ddef
  /_hvcy exch ddef
  /_hvcx exch ddef
  _lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
  0 0 0 6 3 roll swj
} def
/vjss
{
  4 1 roll
  {
    dup cstring
    dup length 1 eq
    _charorientation 1 eq
    and
    {
      -90 rotate
      currentpoint
      _fontRotateAdjust add
      moveto
      gsave
      false charpath currentpoint
      5 index setmatrix stroke
      grestore
      _fontRotateAdjust sub
      moveto
      _sp eq
      {
        5 index 5 index rmoveto
      } if
      2 copy rmoveto
      90 rotate
    }
    {
      currentpoint
      _fontHeight sub
      5 index sub
      3 index _sp eq
      {
        9 index sub
      } if

      currentpoint
      exch 4 index stringwidth pop 2 div sub
      exch _fontAscent sub
      moveto

      gsave
      2 index false charpath
      6 index setmatrix stroke
      grestore

      moveto pop pop
    } ifelse
  } cforall
  6 npop
} def
/hjss
{
  4 1 roll
  {
    dup cstring
    gsave
    false charpath currentpoint
    5 index setmatrix stroke
    grestore
    moveto
    _sp eq
    {
      5 index 5 index rmoveto
    } if
    2 copy rmoveto
  } cforall
  6 npop
} def
/jss
{
  _lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
  0 0 0 7 3 roll jss
} def
/vjsp
{
  4 1 roll
  {
    dup cstring
    dup length 1 eq
    _charorientation 1 eq
    and
    {
      -90 rotate
      currentpoint
      _fontRotateAdjust add
      moveto
      false charpath
            currentpoint
      _fontRotateAdjust sub
      moveto
      _sp eq
      {
        5 index 5 index rmoveto
      } if
      2 copy rmoveto
      90 rotate
    }
    {
      currentpoint
      _fontHeight sub
      5 index sub
      3 index _sp eq
      {
        9 index sub
      } if

      currentpoint
      exch 4 index stringwidth pop 2 div sub
      exch _fontAscent sub
      moveto

      2 index false charpath

      moveto pop pop
    } ifelse
  } cforall
  6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
  matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
  transform
  0.25 sub round 0.25 add exch
  0.25 sub round 0.25 add exch
  itransform
} def
/setstrokeadjust where
{
  pop true setstrokeadjust
  /c
  {
    curveto
  } def
  /C
  /c load def
  /v
  {
    currentpoint 6 2 roll curveto
  } def
  /V
  /v load def
  /y
  {
    2 copy curveto
  } def
  /Y
  /y load def
  /l
  {
    lineto
  } def
  /L
  /l load def
  /m
  {
    moveto
  } def
}
{
  /c
  {
    pl curveto
  } def
  /C
  /c load def
  /v
  {
    currentpoint 6 2 roll pl curveto
  } def
  /V
  /v load def
  /y
  {
    pl 2 copy curveto
  } def
  /Y
  /y load def
  /l
  {
    pl lineto
  } def
  /L
  /l load def
  /m
  {
    pl moveto
  } def
} ifelse
/d
{
  setdash
} def
/cf
{
} def
/i
{
  dup 0 eq
  {
    pop cf
  } if
  setflat
} def
/j
{
  setlinejoin
} def
/J
{
  setlinecap
} def
/M
{
  setmiterlimit
} def
/w
{
  setlinewidth
} def
/XR
{
  0 ne
  /_eo exch ddef
} def
/H
{
} def
/h
{
  closepath
} def
/N
{
  _pola 0 eq
  {
    _doClip 1 eq
    {
      _eo {eoclip} {clip} ifelse /_doClip 0 ddef
    } if
    newpath
  }
  {
    /CRender
    {
      N
    } ddef
  } ifelse
} def
/n
{
  N
} def
/F
{
  _pola 0 eq
  {
    _doClip 1 eq
    {
      gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
      /_doClip 0 ddef
    }
    {
      _pf
    } ifelse
  }
  {
    /CRender
    {
      F
    } ddef
  } ifelse
} def
/f
{
  closepath
  F
} def
/S
{
  _pola 0 eq
  {
    _doClip 1 eq
    {
      gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
      /_doClip 0 ddef
    }
    {
      _ps
    } ifelse
  }
  {
    /CRender
    {
      S
    } ddef
  } ifelse
} def
/s
{
  closepath
  S
} def
/B
{
  _pola 0 eq
  {
    _doClip 1 eq
    gsave F grestore
    {
      gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
      /_doClip 0 ddef
    }
    {
      S
    } ifelse
  }
  {
    /CRender
    {
      B
    } ddef
  } ifelse
} def
/b
{
  closepath
  B
} def
/W
{
  /_doClip 1 ddef
} def
/*
{
  count 0 ne
  {
    dup type /stringtype eq
    {
      pop
    } if
  } if
  newpath
} def
/u
{
} def
/U
{
} def
/q
{
  _pola 0 eq
  {
    gsave
  } if
} def
/Q
{
  _pola 0 eq
  {
    grestore
  } if
} def
/*u
{
  _pola 1 add /_pola exch ddef
} def
/*U
{
  _pola 1 sub /_pola exch ddef
  _pola 0 eq
  {
    CRender
  } if
} def
/D
{
  pop
} def
/*w
{
} def
/*W
{
} def
/`
{
  /_i save ddef
  clipForward?
  {
    nulldevice
  } if
  6 1 roll 4 npop
  concat pop
  userdict begin
  /showpage
  {
  } def
  0 setgray
  0 setlinecap
  1 setlinewidth
  0 setlinejoin
  10 setmiterlimit
  [] 0 setdash
  /setstrokeadjust where {pop false setstrokeadjust} if
  newpath
  0 setgray
  false setoverprint
} def
/~
{
 end
  _i restore
} def
/O
{
  0 ne
  /_of exch ddef
  /_lp /none ddef
} def
/R
{
  0 ne
  /_os exch ddef
  /_lp /none ddef
} def
/g
{
  /_gf exch ddef
  /_fc
  {
    _lp /fill ne
    {
      _of setoverprint
      _gf setgray
      /_lp /fill ddef
    } if
  } ddef
  /_pf
  {
    _fc
    _eo {eofill} {fill} ifelse
  } ddef
  /_psf
  {
    _fc
    hvashow
  } ddef
  /_pjsf
  {
    _fc
    hvawidthshow
  } ddef
  /_lp /none ddef
} def
/G
{
  /_gs exch ddef
  /_sc
  {
    _lp /stroke ne
    {
      _os setoverprint
      _gs setgray
      /_lp /stroke ddef
    } if
  } ddef
  /_ps
  {
    _sc
    stroke
  } ddef
  /_pss
  {
    _sc
    ss
  } ddef
  /_pjss
  {
    _sc
    jss
  } ddef
  /_lp /none ddef
} def
/k
{
  _cf astore pop
  /_fc
  {
    _lp /fill ne
    {
      _of setoverprint
      _cf aload pop setcmykcolor
      /_lp /fill ddef
    } if
  } ddef
  /_pf
  {
    _fc
    _eo {eofill} {fill} ifelse
  } ddef
  /_psf
  {
    _fc
    hvashow
  } ddef
  /_pjsf
  {
    _fc
    hvawidthshow
  } ddef
  /_lp /none ddef
} def
/K
{
  _cs astore pop
  /_sc
  {
    _lp /stroke ne
    {
      _os setoverprint
      _cs aload pop setcmykcolor
      /_lp /stroke ddef
    } if
  } ddef
  /_ps
  {
    _sc
    stroke
  } ddef
  /_pss
  {
    _sc
    ss
  } ddef
  /_pjss
  {
    _sc
    jss
  } ddef
  /_lp /none ddef
} def
/Xa
{
  _rgbf astore pop
  /_fc
  {
    _lp /fill ne
    {
      _of setoverprint
      _rgbf aload pop setrgbcolor
      /_lp /fill ddef
    } if
  } ddef
  /_pf
  {
    _fc
    _eo {eofill} {fill} ifelse
  } ddef
  /_psf
  {
    _fc
    hvashow
  } ddef
  /_pjsf
  {
    _fc
    hvawidthshow
  } ddef
  /_lp /none ddef
} def
/XA
{
  _rgbs astore pop
  /_sc
  {
    _lp /stroke ne
    {
      _os setoverprint
      _rgbs aload pop setrgbcolor
      /_lp /stroke ddef
    } if
  } ddef
  /_ps
  {
    _sc
    stroke
  } ddef
  /_pss
  {
    _sc
    ss
  } ddef
  /_pjss
  {
    _sc
    jss
  } ddef
  /_lp /none ddef
} def
/_rgbtocmyk
{
3
  {
  1 exch sub 3 1 roll
  } repeat
3 copy 1 4 1 roll
3
  {
  3 index 2 copy gt
    {
    exch
    } if
  pop 4 1 roll
  } repeat
pop pop pop
4 1 roll
3
  {
  3 index sub
  3 1 roll
  } repeat
4 -1 roll
} def
/Xx
{
  exch
  /_gf exch ddef
  0 eq
  {
    findcmykcustomcolor
  }
  {
    /findrgbcustomcolor where not {
      4 1 roll _rgbtocmyk
      5 -1 roll
      findcmykcustomcolor
    }
    {
      pop
      findrgbcustomcolor
    } ifelse
  } ifelse
  /_if exch ddef
  /_fc
  {
    _lp /fill ne
    {
      _of setoverprint
      _if _gf 1 exch sub setcustomcolor
      /_lp /fill ddef
    } if
  } ddef
  /_pf
  {
    _fc
    _eo {eofill} {fill} ifelse
  } ddef
  /_psf
  {
    _fc
    hvashow
  } ddef
  /_pjsf
  {
    _fc
    hvawidthshow
  } ddef
  /_lp /none ddef
} def
/XX
{
  exch
  /_gs exch ddef
  0 eq
  {
    findcmykcustomcolor
  }
  {
    /findrgbcustomcolor where not {
      4 1 roll _rgbtocmyk
      5 -1 roll
      findcmykcustomcolor
    }
    {
      pop
      findrgbcustomcolor
    } ifelse
  } ifelse
  /_is exch ddef
  /_sc
  {
    _lp /stroke ne
    {
      _os setoverprint
      _is _gs 1 exch sub setcustomcolor
      /_lp /stroke ddef
    } if
  } ddef
  /_ps
  {
    _sc
    stroke
  } ddef
  /_pss
  {
    _sc
    ss
  } ddef
  /_pjss
  {
    _sc
    jss
  } ddef
  /_lp /none ddef
} def
/x
{
  /_gf exch ddef
  findcmykcustomcolor
  /_if exch ddef
  /_fc
  {
    _lp /fill ne
    {
      _of setoverprint
      _if _gf 1 exch sub setcustomcolor
      /_lp /fill ddef
    } if
  } ddef
  /_pf
  {
    _fc
    _eo {eofill} {fill} ifelse
  } ddef
  /_psf
  {
    _fc
    hvashow
  } ddef
  /_pjsf
  {
    _fc
    hvawidthshow
  } ddef
  /_lp /none ddef
} def
/X
{
  /_gs exch ddef
  findcmykcustomcolor
  /_is exch ddef
  /_sc
  {
    _lp /stroke ne
    {
      _os setoverprint
      _is _gs 1 exch sub setcustomcolor
      /_lp /stroke ddef
    } if
  } ddef
  /_ps
  {
    _sc
    stroke
  } ddef
  /_pss
  {
    _sc
    ss
  } ddef
  /_pjss
  {
    _sc
    jss
  } ddef
  /_lp /none ddef
} def
/A
{
  pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
  pop pop
} def
/discard
{
  save /discardSave exch store
  discardDict begin
  /endString exch store
  gt38?
  {
    2 add
  } if
  load
  stopped
  pop
 end
  discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
  /endStringLength endString length store
  /newBuff buffer 0 endStringLength getinterval store
  /newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
  /newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
  newBuff 0 newBuffButFirst putinterval
  newBuffLast 0
  currentfile read not
  {
  stop
  } if
  put
} def
0
{
  pre38Initialize
  mark
  currentfile newBuff readstring exch pop
  {
    {
      newBuff endString eq
      {
        cleartomark stop
      } if
      shiftBuffer
    } loop
  }
  {
  stop
  } ifelse
} def
1
{
  pre38Initialize
  /beginString exch store
  mark
  currentfile newBuff readstring exch pop
  {
    {
      newBuff beginString eq
      {
        /layerCount dup load 1 add store
      }
      {
        newBuff endString eq
        {
          /layerCount dup load 1 sub store
          layerCount 0 eq
          {
            cleartomark stop
          } if
        } if
      } ifelse
      shiftBuffer
    } loop
  } if
} def
2
{
  mark
  {
    currentfile buffer readline not
    {
    stop
    } if
    endString eq
    {
      cleartomark stop
    } if
  } loop
} def
3
{
  /beginString exch store
  /layerCnt 1 store
  mark
  {
    currentfile buffer readline not
    {
    stop
    } if
    dup beginString eq
    {
      pop /layerCnt dup load 1 add store
    }
    {
      endString eq
      {
        layerCnt 1 eq
        {
          cleartomark stop
        }
        {
          /layerCnt dup load 1 sub store
        } ifelse
      } if
    } ifelse
  } loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
  /n /N /s /S /f /F /b /B
}
{
  {
    _doClip 1 eq
    {
      /_doClip 0 ddef _eo {eoclip} {clip} ifelse
    } if
    newpath
  } def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
  4 npop
  6 1 roll
  pop
  4 1 roll
  pop pop pop
  0 eq
  {
    0 eq
    {
      (%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
    }
    {

      /clipForward? true def

      /Tx /pop load def
      /Tj /pop load def

      currentdict end clipRenderOff begin begin
    } ifelse
  }
  {
    0 eq
    {
      save /discardSave exch store
    } if
  } ifelse
} bind def
/LB
{
  discardSave dup null ne
  {
    restore
  }
  {
    pop
    clipForward?
    {
      currentdict
     end
     end
     begin

      /clipForward? false ddef
    } if
  } ifelse
} bind def
/Pb
{
  pop pop
  0 (%AI5_EndPalette) discard
} bind def
/Np
{
  0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
  72 exch div
  0 dtransform dup mul exch dup mul add sqrt
  dup 1 lt
  {
    pop 1
  } if
  setflat
} def
/Mb
{
  q
} def
/Md
{
} def
/MB
{
  Q
} def
/nc 4 dict def
nc begin
/setgray
{
  pop
} bind def
/setcmykcolor
{
  4 npop
} bind def
/setrgbcolor
{
  3 npop
} bind def
/setcustomcolor
{
  2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
  Adobe_cshow begin
  Adobe_cshow
  {
    dup xcheck
    {
      bind
    } if
    pop pop
  } forall
 end
  Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
  {
 end
  } if
} def
/cforall
{
  /_lobyte 0 ddef
  /_hibyte 0 ddef
  /_cproc exch ddef
  /_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
  {
    /_lobyte exch ddef
    _hibyte 0 eq
    _cscript 1 eq
    _lobyte 129 ge _lobyte 159 le and
    _lobyte 224 ge _lobyte 252 le and or and
    _cscript 2 eq
    _lobyte 161 ge _lobyte 254 le and and
    _cscript 3 eq
    _lobyte 161 ge _lobyte 254 le and and
      _cscript 25 eq
    _lobyte 161 ge _lobyte 254 le and and
      _cscript -1 eq
    or or or or and
    {
      /_hibyte _lobyte ddef
    }
    {
      _hibyte 256 mul _lobyte add
      _cproc
      /_hibyte 0 ddef
    } ifelse
  } forall
} def
/cstring
{
  dup 256 lt
  {
    (s) dup 0 4 3 roll put
  }
  {
    dup 256 idiv exch 256 mod
    (hl) dup dup 0 6 5 roll put 1 4 3 roll put
  } ifelse
} def
/clength
{
  0 exch
  { 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
  {
    dup cstring
    show
    _hvax _hvay rmoveto
    _hvwb eq { _hvcx _hvcy rmoveto } if
  } cforall
} def
/vawidthshow
{
  {
    dup 255 le
    _charorientation 1 eq
    and
    {
      -90 rotate
      0 _fontRotateAdjust rmoveto
      cstring
      _hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
      0 _fontRotateAdjust neg rmoveto
      90 rotate
    }
    {
      currentpoint
      _fontHeight sub
      exch _hvay sub exch _hvax sub
      2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
      3 2 roll
      cstring
      dup stringwidth pop 2 div neg _fontAscent neg rmoveto
      show
      moveto
    } ifelse
  } cforall
} def
/hvawidthshow
{
  6 1 roll
  /_hvay exch ddef
  /_hvax exch ddef
  /_hvwb exch ddef
  /_hvcy exch ddef
  /_hvcx exch ddef
  _lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
  0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
  0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
  0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_blend_AI5 1.4 0
%%Title: (Adobe Illustrator (R) Version 5.0 Blend ProcSet)
%%Version: 1.4 0
%%CreationDate: (11/19/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_blend_AI5 70 dict dup begin
put
/bd
{
  bind def
} bind def
/xs
{
  exch store
} bd
/nullProc
{
  {
  }
} def
/initialize
{
  pop pop
  Adobe_blend_AI5 begin
    Adobe_blend_AI5_vars begin
      /_contoneDevice where
      {
        pop
      }
      {
        /_contoneDevice false def
      } ifelse

      /_dpiThreshold where
      {
        pop
      }
      {
        /_dpiThreshold 600 def
      } ifelse

      /_screenFreqThreshold where
      {
        pop
      }
      {
        /_screenFreqThreshold 150 def
      } ifelse

      /tRectOK? deviceDPI _dpiThreshold le currentScreenFreq _screenFreqThreshold le and _contoneDevice not and def
  /invertXfer
  {
    [
    {
      1 exch sub
        } /exec load systemdict/currenttransfer get exec /exec load
        ] cvx systemdict/settransfer get exec
      } bd
      /spotDict 3 dict dup begin
        /nSpots 2 def
        /spot1 7 dict def
        /spot2 7 dict def
     end
      def
      composite?
      {
        /_setgray_ /setgray load def
        /_fill_ /fill load def
        /_image_ /image load def
      }
      {
        /_setgray_ systemdict/setgray get def
        /_fill_ systemdict/fill get def
        /_image_ systemdict/image get def
      } ifelse
    } bd
    /terminate
    {
      currentdict Adobe_blend_AI5_vars eq
      {
     end
      currentdict Adobe_blend_AI5 eq
      {
     end
    } if
  } if
} bd
/_compositeSpotDevice where
{
 begin
    _compositeSpotDevice 0 ne {userdict /composite? true put} if
 end
}
{
  /_compositeSpotDevice 0 def
} ifelse

/nullString () def
/d255 256 array def
0 1 255
{
  d255 exch dup 255 div put
} bind for
/d255- 256 array def
0 1 255
{
  d255- exch 1 d255 2 index get sub put
} bind for
/dUserSpace matrix defaultmatrix def
currentdict /Adobe_blend_AI5_vars 89 dict dup begin
put
{
  /f /F /s /S /b /B
}
{
  null def
} bind forall
/byte 1 string def
/sSave null def
/setSSave
{
  save /sSave exch store
} bind def
/Bm null def
/doBlend null def
/startC? false def
/endC? false def
/fCMYK? null def
/startTint 0 def
/endTint 0 def
/bSMatrix matrix def
/bUMatrix matrix def
/dMatrix matrix def
/inLine? true def
/pTState? false def
/bHi? false def
/yHi 0 def
/xHi 0 def
/noImg /lv1Fix where
{
  pop lv1Fix
}
{
  false
} ifelse
def
/ccAry1 5 array def
/ccTint 0 def
/spotColor? false def
/colorimage? true def
[
/tint1Data
/tint2Data
/spotDict
/bAxis
/ubAxis
/pChange
/optimize?
/nSamples
/sInc
/blendProc
/_bn
/xBCInc
/yBCInc
/bInc
/bRender
/cBName
/cBType
/nColors
/color?
/blend?
/colorType
/cData
/cDataLen
/bDataLen
/rampPoint
/midPoint
/endPoint
/blendLength
/blackData
/yeData
/mgData
/cyData
/cnt1
/ndx
/_fill
/tmp
counttomark
{
  null def
} bind
repeat
pop
currentdict
end
currentdict
end
exch
begin
begin
/unitSq
{
  0 0 moveto 0 1 lineto 1 1 lineto 1 0 lineto closepath
} bd
/gMark
{
  counttomark 2 add -1 roll
} bd
/setCustomColor
{
  dup /ccTint exch store
  1 exch sub 6 1 roll
  ccAry1 astore
  exch setcustomcolor
} bd
/currentCustomColor
{
  ccAry1 aload pop ccTint
} bd
/nsetcustomcolor where
{
  pop
}
{
  /nsetcustomcolor
  {
    pop setcmykcolor
  } bd
} ifelse
/nsetcustomcolorend where
{
  pop
}
{
  /nsetcustomcolorend
  {
  } bd
} ifelse
/setBSpace
{
  newpath bUMatrix astore concat unitSq
} bd
/setCStop
{
  dup 0 eq
  {
    pop

    spotColor?
      {
      dup 1 exch sub /ccTint exch def
      ccAry1 4 /Black put
      } if
    setgray
  }
  {
    1 eq
    {
      setcmykcolor
    }
    {
      composite? not colorType 2 lt and
      {
        forceCMYK
      }
      {
        setCustomColor
      } ifelse
    } ifelse
  } ifelse
} bd
/makeByte
{
  /tmp 0 store
  255 mul cvi
  8 string 8
  {
    dup tmp 3 index put /tmp tmp 1 add store
  } repeat
  exch pop
} bd
/setImgSpace
{
  cDataLen 1 8
  2 index 0 0 1 0 0 dMatrix astore
} bd
/bwImage
{
  setImgSpace cData /_image_ load
  {
    exec
  } stopped
  {
    $error /errorname get /undefinedresult ne
    {
      stop
    }
    {
      pop pop pop pop pop
    } ifelse
  } if
} bd
level2?
{
  /bFill
  {
    _fill
  } def
  /bCImg
  {
    /cDataLen bDataLen store
    setImgSpace
    setSSave
    expandSpot
    cyData mgData yeData cData
    expandCMYK
    true 4 spotDict
    {
      ncolorimage
    } stopped
    {
      $error /errorname get /undefinedresult ne
      {
        stop
      }
      {
        10
        {
          pop
        } repeat
      } ifelse
    } if
    sSave restore
  } bd
} if
/expandOne
{
      dup type /stringtype ne
      {
        cDataLen string
        exch
        dup 0 ne
        {
          255 mul cvi
          0 1 cDataLen 1 sub
          {
            3 copy
            exch put pop
          } for
        } if
        pop
      } if
} bd
/expandSpot
{
  spotColor?
  {
    spotDict begin
      spot1 begin
        tintImage type /nulltype ne
        {
          tintImage expandOne /tintImage exch def
        } if
      end
      spot2 begin
        tintImage type /nulltype ne
        {
          tintImage expandOne /tintImage exch def
        } if
      end
   end
  } if
} bd
/expandCMYK
{
  4
  {
    expandOne 4 1 roll
  } repeat
} bd
/colorimage where dup
{
  exch pop

  /ncolorimage where
  {
    pop
  }
  {
    /ncolorimage {pop colorimage} bd
  } ifelse
} if
not
{
  /ncolorimage where
  {
    pop
  }
  {
    /colorimage? false store
    /ncolorimage
    {
      pop pop pop

    setSSave
    /blackData xs
    /yeData xs
    /mgData xs
    /cyData xs
    /cnt1 0 store
    [
    byte dup 0
    cyData dup type /stringtype eq
    {
      /cnt1 cvx /get cvx d255 /exch cvx /get cvx .3 /mul cvx
    }
    {
      .3 mul
    } ifelse
    mgData dup type /stringtype eq
    {
      /cnt1 cvx /get cvx d255 /exch cvx /get cvx .59 /mul cvx
    }
    {
      .59 mul
    } ifelse
    yeData dup type /stringtype eq
    {
      /cnt1 cvx /get cvx d255 /exch cvx /get cvx .11 /mul cvx
    }
    {
      .11 mul
    } ifelse
    blackData dup type /stringtype eq
    {
      /cnt1 cvx /get cvx d255 /exch cvx /get cvx
    } if
    /add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
    /dup cvx 0 /lt cvx
    {
      pop 0
    } /if cvx
    /dup cvx 1 /gt cvx
    {
      pop 1
    } /if cvx
    255 /mul cvx /cvi cvx
    256 /mod cvx
    /dup cvx 0 /lt cvx
    {
      pop 0
    } /if cvx
    /put cvx
    /cnt1 dup cvx 1 /add cvx /store cvx
    ] cvx
    bind
      _image_
    sSave restore
  } bd
  } ifelse
} if
level2? not
{
  /bCImg
  {
    /cDataLen bDataLen store
    setImgSpace
    setSSave
    expandSpot
    cyData mgData yeData cData
    colorimage?
    {
      expandCMYK
    } if
    true 4 spotDict
    {
      ncolorimage
    } stopped
    {
      $error /errorname get /undefinedresult ne
      {
        stop
      }
      {
        10
        {
          pop
        } repeat
      } ifelse
    } if
    sSave restore
  } bd
  /bwFill
  {
    setSSave
    /cDataLen 8 store
    /cData currentgray makeByte store
    bwImage
    sSave restore
  } bd
  /c1ImgFill
  {
    setSSave
    /cDataLen 8 store
    setImgSpace
    spotColor?
    {
      spotDict begin
        spot1 begin
          currentCustomColor makeByte /tintImage exch def
          /name exch def
          /spot_K exch def
          /spot_Y exch def
          /spot_M exch def
          /spot_C exch def
       end
        spot2 initSpotData
     end
    } if
    currentcmykcolor
    4
    {
      makeByte 4 1 roll
    } repeat
    true 4 spotDict
    {
      ncolorimage
    } stopped
    {
      $error /errorname get /undefinedresult ne
      {
        stop
      }
      {
        10
        {
          pop
        } repeat
      } ifelse
    } if
    sSave restore
  } bd
  /bFill
  noImg
  {
    {
      _fill
    }
  }
  {
    {
      color?
      {
        c1ImgFill
      }
      {
        bwFill
      } ifelse
    }
  } ifelse
  bd
} if
composite?
{
  /bCFun
  {
    color?
    {
      cyData dup type /stringtype eq
      {
        /ndx cvx /get cvx d255 /exch cvx /get cvx
      } if
      mgData dup type /stringtype eq
      {
        /ndx cvx /get cvx d255 /exch cvx /get cvx
      } if
      yeData dup type /stringtype eq
      {
        /ndx cvx /get cvx d255 /exch cvx /get cvx
      } if
      cData dup type /stringtype eq
      {
        /ndx cvx /get cvx d255 /exch cvx /get cvx
      } if
      spotColor?
      {
        spotDict begin
          /spotDict cvx /begin cvx
          spot1 begin
            tintImage dup type /stringtype eq
            {
              /ndx cvx /get cvx d255- /exch cvx /get cvx
            }
            {
              dup type /nulltype ne
              {
                name type /nametype ne {1 exch sub} if
              } if
            } ifelse
         end
          /spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
          spot2 begin
            tintImage dup type /stringtype eq
            {
              /ndx cvx /get cvx d255- /exch cvx /get cvx
            }
            {
              dup type /nulltype ne
              {
                name type /nametype ne {1 exch sub} if
              } if
            } ifelse
         end
          /spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
          /end cvx
       end
        /spotDict cvx
        /nsetcustomcolor cvx
      }
      {
        /setcmykcolor cvx
      } ifelse
    }
    {
      cData /ndx cvx /get cvx
      d255 /exch cvx /get cvx
      /setgray cvx
    } ifelse
  } bd
  /Bc
  {
    newpath
    gsave
    setBSpace
    nColors 1 eq
    {
      pop pop
      setCStop
    } if
    bFill
    grestore
  } bd
  /linealBm
  {
    /nColors dup load 1 sub store
    newpath
    gsave
    setBSpace
    blend?
    {
      linImg
    }
    {
      bFill
    } ifelse
    grestore
    nColors 1 gt
    {
      getRData
    } if
  } bd
  /rdBm
  {
    /nColors dup load 1 sub store
    _fill
    gsave
    bUMatrix astore concat
    bHi?
    {
      xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
      rampPoint 1 lt
      {
        1 rampPoint sub dup xHi mul exch yHi mul translate
      } if
    } if
    nColors
    {
      0 0 rampPoint 0 360 arc
      _fill
      blend? bHi? or
      {
        rdBlend
      } if
      nColors 1 gt
      {
        getRData
      } if
      /nColors dup load 1 sub store
    } repeat
    /nColors 1 store
    grestore
  } bd
  /cGetRData
  {
    setCStop
    /blend?
    cData type /stringtype eq
    dup not color? and
    {
      pop
      cyData type /stringtype eq
      mgData type /stringtype eq
      yeData type /stringtype eq
      or or
    } if
    store
  } def
  /cGetRData
} if
/eCStop
{
  mark
  1 index 3 mul 3 add dup 8 gt
  {
    pop 8
  } if
  1 roll
  cleartomark
} bd
composite? not
{
  /knockOut
  level2?
  {
    {
      0 0 0 0 setcmykcolor _fill
    }
  }
  {
    /bFill noImg
    {
      {
        _fill
      }
    }
    {
      {
        _of true eq
        {
          currentgray 1 ne
          {
            bwFill
          } if
        }
        {
          bwFill
        } ifelse
      }
    } ifelse
    def
    /whiteByte 1 makeByte def
    noImg
    {
      {
        0 0 0 0 setcmykcolor _fill
      }
    }
    {
      {
        cBType 0 eq
        {
          setSSave
          /cData whiteByte store
          /cDataLen 8 store
          bwImage
          sSave restore
        }
        {
          _fill
        } ifelse
      }
    } ifelse
  } ifelse
  bd
  /bCFun
  {
    cData dup type /stringtype ne
    {
      color?
      {
        1 exch sub
      } if
    }
    {
      /ndx cvx /get cvx
      color? customColor? not and
      {
        d255-
      }
      {
        d255
      } ifelse
      /exch cvx /get cvx
    } ifelse
    /_setgray_ cvx
  } bd
  /eCCBlend
  {
    dup 3 eq
    {
      pop
      mark 7 1 roll
      6 copy ccThrough? dup /blend? xs
      {
        /startC? true store
        setCustomColor
        customColor?
        {
          /cData tint1Data store
          setCDataLen
        } if
        /endC?
        3 index 3 eq
        {
          4 index 1 ne
        }
        {
          false
        } ifelse
        store
      } if
      cleartomark
      stop
    } if
    1 eq
    {
      pop pop pop
    } if
    pop
    /startC? false store
    6
    {
      8 index
    } repeat
    ccThrough? dup /blend? xs
    {
      /endC? true store
      blend? not
      {
        stop
      } if
      customColor?
      {
        /cData tint1Data store
        setCDataLen
      } if
    } if
  } bd
  /handleOP
  {
    _of not
    {
      knockOut
    } if
  } bd
  /handleROP
  {
    _of not
    {
      0 0 0 0 setcmykcolor _fill
    }
    {
      newpath
    } ifelse
  } bd
  /rdBm
  {
    /nColors dup load 1 sub store
    blend?
    {
      _fill
    }
    {
      handleROP
    } ifelse
    gsave
    bUMatrix astore concat
    bHi?
    {
      xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
      rampPoint 1 lt
      {
        1 rampPoint sub dup xHi mul exch yHi mul translate
      } if
    } if
    nColors
    {
      0 0 rampPoint 0 360 arc
      blend?
      {
        cData type /stringtype ne bHi? not and
        {
          cData color?
          {
            1 exch sub
          } if
          _setgray_
          _fill_
        }
        {
          cData type /stringtype ne
          {
            /cDataLen 1 store
            /bDataLen 1 store
          } if
          rdBlend
        } ifelse
      }
      {

        handleROP

        pTState?
        {
          /bAxis rampPoint endPoint sub store
          xHi bAxis mul yHi bAxis mul translate
        } if
      } ifelse

      nColors 1 gt
      {
        getRData
      } if
      /nColors dup load 1 sub store
    } repeat
    /nColors 1 store
    grestore
  } bd
  /ccThrough?
  {
    gsave
    pop 0 setCustomColor
    currentcmykcolor
    grestore
    anyColor?
  } bd
  /forceCMYK
  {
    exch pop
    1 exch sub 5 1 roll
    4
    {
      4 index mul 4 1 roll
    } repeat
    0
    cCMYKData dup /cData ne
    {
      dup /yeData eq
      {
        pop 1 add
      }
      {
        /mgData eq
        {
          2
        }
        {
          3
        } ifelse
        add
      } ifelse
      0
    } if
    pop
    index
    0 eq
    {
      pop pop pop pop 0 0 0 0
    } if
    setcmykcolor
    pop
    /fCMYK? true store
  } bd
  /endCapSepBc
  {
    pop pop
    dup 0 eq
    {
      pop
      setgray
    }
    {
      1 eq
      {
        setcmykcolor
      }
      {
        colorType 1 eq
        {
          forceCMYK
        }
        {
          fCMYK?
          {
            forceCMYK
          }
          {
            setCustomColor
          } ifelse
        } ifelse
      } ifelse
    } ifelse
    currentcmykcolor anyColor?
    blend? and
    {
      bFill
    }
    {
      handleOP
    } ifelse

  } bd
} if
/cCMYKData 0 def
composite? dup not
{
  pop customColor?
} if
not
{
  /cCMYKData
  /cyData /mgData /yeData /cData
  black? not
  {
    yellow?
    {
      exch
    }
    {
      magenta?
      {
        3
      }
      {
        4
      } ifelse
      -1 roll
    } ifelse
  } if
  4 1 roll pop pop pop
  store
  /Bc
  {
    gsave
    setBSpace
    nColors 1 gt
    {

      blend? currentcmykcolor anyColor? and
      {
        bFill
      }
      {
        handleOP
      } ifelse
    }
    {
      endCapSepBc
    } ifelse
    grestore
    newpath
  } bd
  /linealBm
  {
    /nColors dup load 1 sub store
    newpath
    gsave
    setBSpace
    blend?
    {
      cCMYKData load dup type /stringtype eq
      {
        dup length /cDataLen xs
        /cData xs
        gsave
        colorType 0 ne noImg not and
        {
          invertXfer
        } if
        linImg
        grestore
      }
      {
        pop bFill
      } ifelse
    }
    {
      handleOP
    } ifelse
    grestore
    nColors 1 gt
    {
      getRData
    } if
  } bd
  /cmykGetRData
  {
    /fCMYK? false store
    blend?
    {
      {
        cmykDataProcs colorType get exec
      } stopped
      pop
      blend?
      {
        /cData cCMYKData load store
        setCDataLen
      } if
    } if
  } def
  /cmykDataProcs
  [
  {
    pop
    black? dup /blend? xs
    {
      setgray
      0
    } if
    pop
  }
  {
    cCMYKData load dup type /stringtype ne
    {
      0 0 0
      cyan? not
      {
        4 magenta?
        {
          1
        }
        {
          yellow?
          {
            2
          }
          {
            3
          } ifelse
        } ifelse
        roll
      } if
      4 copy add add add 0 eq
      {
        /blend? false store
      } if

      setcmykcolor
      /startC? true store
      /endC? true store
      eCStop
      stop
    } if
    pop
    dup 0 eq
    {
      pop
      setgray
    }
    {
      1 eq
      {
        setcmykcolor
      }
      {
        forceCMYK
      } ifelse
    } ifelse
  } bind
  /eCCBlend load
  {
    cBType 1 eq
    {
      tint1Data tint2Data
      /tint1Data xs
      /tint2Data xs
    } if
    0 eq
    {
      black?
      {
        setgray
      }
      {
        0 0 0 4 -1 roll 1 exch sub setcmykcolor
      } ifelse
      black?
      {
        /blend? true store
      } if
      6
      {
        8 index
      } repeat
      ccThrough?
      {
        /blend? true store
      }
      {
        black?
        {
          /cData tint1Data store
          setCDataLen
        }
        {
          /blend? false store
        } ifelse
      } ifelse
    }
    {
      mark 7 1 roll
      6 copy ccThrough?
      {
        forceCMYK
        pop
        stop
      } if
      9 index 0 eq
      {
        black? dup /blend? xs
        {
          pop 1 setgray
          /cData tint2Data store
          setCDataLen
          0
        } if
        pop
      }
      {
        /blend?
        6
        {
          16 index
        } repeat
        ccThrough?
        store
        blend?
        {
          forceCMYK
        } if
      } ifelse
      cleartomark
    } ifelse
  } bind
  ] def
  /cmykGetRData
} if
composite? dup not
{
  pop isCMYKSep?
} if
not
{
  /endCapSepBc
  {
    /white? false store
    pop pop
    dup 0 eq
    {
      pop
      /white? 1 index 1 eq store
      setgray
    }
    {
      1 eq
      {
        setcmykcolor
      }
      {
        setCustomColor
      } ifelse
    } ifelse
%
    currentcmykcolor anyColor?
    endC? or
    blend? and
    {
      bFill
    }
    {
      handleOP
    } ifelse
  } bd
  /Bc
  {
    gsave
    setBSpace
    nColors 1 gt
    {
      blend? startC? and
      {
        bFill
      }
      {
        handleOP
      } ifelse
    }
    {
      endCapSepBc
    } ifelse
    grestore
    newpath
  } bd
  /linealBm
  {
    /nColors dup load 1 sub store
    newpath
    gsave
    setBSpace
    blend?
    {
      cData type /stringtype eq
      {
        linImg
      }
      {
        bFill
      } ifelse
    }
    {
      handleOP
    } ifelse
    grestore
    nColors 1 gt
    {
      getRData
    } if
  } bd
  /discardCMY
  {
    counttomark 4 add -3 roll pop pop pop
  } bd
  /testTopCC
  {
    6 copy ccThrough?
  } bd
  /getCRamp
  {
    {
      ccDataProcs colorType 2 sub get exec
    } stopped pop
    blend? cDataLen 0 eq and
    {
      /cDataLen bDataLen store
    } if
  } bd
  /ccGetRData
  {
    /fCMYK? false store
    /startC? false store
    /endC? false store
    colorType 2 lt
    {
      /blend? false def
    } if
    blend?
    {
      getCRamp
    }
    {
      setCStop
    } ifelse
    blend?
    {
      /blend? cData 1 ne store
      blend?
      {
        cData dup type /stringtype ne
        {
          1 exch sub /cData xs 0
        } if
        pop
      } if
    } if
  } def
  /ccDataProcs
  [
  /eCCBlend load
  {
    cBType 1 eq
    {
      tint1Data tint2Data
      /tint1Data xs
      /tint2Data xs
    } if
    0 eq
    {
      /blend? false store
      pop
    }
    {
      mark 7 1 roll
      testTopCC
      {
        /blend? 1 index 1 ne store
        /startC? blend? store
        /endC? false store
        blend? not
        {
          cleartomark stop
        } if
        /cData tint1Data store
        setCDataLen
        setCustomColor
        pop
        stop
      } if
      cleartomark
    } ifelse
    2 index 0 eq
    {
      /blend? false store
    }
    {
      mark 6
      {
        9 index
      } repeat
      testTopCC dup /blend? xs
      {
        /blend? 1 index 1 ne store
        /endC? blend? store
        /startC? false store
        blend? not
        {
          cleartomark stop
        } if
        /cData tint2Data store
        setCDataLen
      } if
      cleartomark
    } ifelse
  } bind
  ] def
  /ccGetRData
} if
load Adobe_blend_AI5_vars /getData 3 -1 roll put
/setCDataLen
{
  /cDataLen 0 cData dup type /stringtype eq
  {
    length exch
  } if
  pop store
} bd
/initSpotData
{
 begin
    /name null def
    /tintImage null def
    /tintValue null def
    /spot_C  null def
    /spot_M  null def
    /spot_Y  null def
    /spot_K  null def
 end
} bd
/getRData
{
  /colorType gMark store
  _compositeSpotDevice 0 ne
  {
    spotDict begin
      spot1 initSpotData
      spot2 initSpotData
   end
    /spotColor? colorType 2 eq colorType 3 eq or def
  }
  {
    /spotColor? false store
  } ifelse
  /blend? true store
  0 0 0 0 setcmykcolor
  100 div /rampPoint xs
% (between 13 and 87%)
  100 div /midPoint xs
  dup 0 eq
  {
    2
  }
  {
    dup 1 eq
    {
      5
    }
    {
      _compositeSpotDevice 0 ne
      {
        spotDict begin
          spot1 begin
            /name 3 index def
            /spot_K 4 index def
            /spot_Y 5 index def
            /spot_M 6 index def
            /spot_C 7 index def
         end
       end
      } if
      7
    } ifelse
  } ifelse
  /tmp exch def
  tmp index 100 div /endPoint xs
  _compositeSpotDevice 0 ne
  {
    tmp 2 add index 3 eq
    {
      /tmp tmp 4 add def
      tmp index dup
      spotDict begin
        spot1/name get ne
        {
          spot2 begin
            /name exch def
            /spot_K tmp 2 add index def
            /spot_Y tmp 3 add index def
            /spot_M tmp 4 add index def
            /spot_C tmp 5 add index def
         end
        }
        {
          pop
        } ifelse
     end
    } if
  } if
  /color? colorType 0 gt store

  colorType 3 eq
  {
    /tint2Data gMark store
  } if

  colorType 2 ge
  {
    /tint1Data gMark store
  } if
  _compositeSpotDevice 0 ne
  {
    spotDict begin

      colorType 2 ge
      {
        colorType 3 eq
        {
          spot2 begin
            /tintImage cBType 0 eq {tint2Data} {tint1Data} ifelse def
            name null eq {/name /Black def} if
         end
        } if
        spot1 begin
          /tintImage cBType 0 eq colorType 2 eq or {tint1Data} {tint2Data} ifelse def
          colorType 2 eq
          {
            name null eq
            {
              /name spot2/name get def
              spot2/name null put
            } if
          }
          {
            name null eq {/name /Black def} if
          } ifelse
       end
      } if
   end
  } if

  /cData gMark store
  setCDataLen
  colorType 0 gt
  {
    counttomark 4 add -3 roll
    /yeData xs
    /mgData xs
    /cyData xs
  } if
  blend?
  {
    /bDataLen
    cDataLen dup 0 eq color? and
    {
      [
      cyData mgData yeData
      ]
      {
        dup type /stringtype eq
        {
          length exch pop exit
        } if
        pop
      } forall
    } if
    store
    bDataLen 0 eq
    {
      /bDataLen 1 store
    } if
    getData
    blend?
    {
      composite? cDataLen 0 eq and
      {
        /cDataLen bDataLen store
      } if
    } if
  }
  {
    setCStop
  } ifelse
} bd
/Bg
{
  0 0 0 0 setcmykcolor
  6
  {
    pop
  } repeat
  /blendLength xs
  pop pop pop
  /cBName xs
  /bRender xs
  bRender 2 ne
  {
    composite? not
    {
      _of setoverprint
    } if
    _eo {eoclip} {clip} ifelse
    _bn cBName 2 copy known
    {
      get
      mark exch aload pop
      /cBType xs
      /nColors xs
      mark exch aload pop
      0 0
    } if
    pop pop
    getRData
    cBType 0 eq
    {
      /linealBm
    }
    {
      bHi?
      {
        /pTState? nColors 2 gt store
      } if
      /doBlend /rdBlend load store
      /rdBm
    } ifelse
  }
  {
    inLine? not
    {
      mark mark
    } if
    /Bc dup
    {
      cleartomark mark
    } bd
    /nullProc
  } ifelse
  load /Bm xs
} bd
/linImg
noImg
{
  {
    newpath doRctBlend
  }
}
{
  {
    /doBlend
    color? composite? and
    {
      /bCImg
    }
    {
      /bwImage
    } ifelse
    load
    store

    0 0 moveto
    tRectOK? composite? and
    {
      {
        mark
        0 1 dtransform atan cvi 90 mod 0 eq
        1 0 dtransform atan cvi 90 mod 0 eq
      } stopped
      {
        cleartomark
      }
      {
        and exch pop
        {
          newpath
          doRctBlend
        }
        {
          doBlend
        } ifelse
      } ifelse
    }
    {
      doBlend
    } ifelse
  }
} ifelse
bd
/doRctBlend
{
  gsave
  /sInc 1 store
  /nSamples bDataLen store
  /bInc 1 bDataLen div store
  /ubAxis 1 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt store
  /pChange ubAxis 0 eq
  {
    0
  }
  {
    bDataLen ubAxis div
  } ifelse
  store
  pChange .5 gt noImg not and dup /optimize? xs
  {
    /nSamples ubAxis 2 div round cvi dup 1 le
    {
      pop 2
    } if
    store
    /bInc 1 nSamples div store
    /sInc bDataLen 1 sub nSamples 1 sub div store
  } if
  0
  nSamples
  [
  /dup cvx
  optimize?
  {
    /round cvx /cvi cvx
  } if
  /ndx /exch cvx /store cvx
  bCFun
  /rectfill where dup
  {
    exch pop _compositeSpotDevice 1 ne and
  } if
  {
    0 0 bInc 1 /rectfill cvx
  }
  {
    0 0 /moveto cvx
    bInc 0 /lineto cvx
    bInc 1 /lineto cvx
    0 1 /lineto cvx
    /closepath cvx
    /_fill_ cvx
  } ifelse
  bInc 0 /translate cvx
  sInc /add cvx
  ] cvx
  bind
  repeat
  pop
  spotColor? {nsetcustomcolorend} if

  grestore
} bd
/rdPrep
{
  /nSamples bDataLen dup 0 eq
  {
    pop 1
  } if
  store
  /sInc -1 store
  /bAxis rampPoint endPoint sub store
  /bInc bAxis bDataLen div neg store
  /optimize? false store
  tRectOK?
  {
    /ubAxis
    bAxis 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
    0 bAxis dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
    2 copy lt
    {
      exch
    } if
    pop store
    /pChange ubAxis 0 eq
    {
      0
    }
    {
      bDataLen ubAxis div
    } ifelse
    store
    pChange .5 gt noImg not and dup /optimize? xs
    {
      /nSamples ubAxis 2 div round cvi dup 1 le
      {
        pop 2
      } if
      store
      /bInc bAxis nSamples div neg store
      /sInc bDataLen 1 sub nSamples 1 sub div neg store
    } if
  } if
  bHi?
  {
    /xBCInc xHi bAxis mul nSamples div store
    /yBCInc yHi bAxis mul nSamples div store
  } if
} bd
/rdBlend
{
  newpath
  gsave
  rdPrep
  rampPoint
  bDataLen 1 sub
  nSamples
  [
  /dup cvx
  optimize?
  {
    /round cvx /cvi cvx
  } if
  /ndx /exch cvx /store cvx
  bCFun
  0 0 3 /index cvx 0 360 /arc cvx /_fill_ cvx
  /exch cvx bInc /add cvx /exch cvx
  sInc /add cvx
  bHi?
  {
    xBCInc yBCInc /translate cvx
  } if
  ] cvx
  bind
  repeat
  pop pop
  spotColor? {nsetcustomcolorend} if
  grestore
  pTState?
  {
    xHi bAxis mul yHi bAxis mul translate
  } if
} bd
/Bh
{
  pop pop
  /pTState? false store
  2 copy 0 ne exch 0 ne or dup /bHi? xs
  {
    /yHi xs
    /xHi xs
    0 0
  } if
  pop pop
} bd
/BD
{
  inLine? not
  {
    ] nColors cBType
    ] _bn cBName 3 -1 roll put
 end
} if
} bd
/Bn
{
1 add dict
dup nullString null put
/_bn xs
} bd
/Bd
{
Adobe_blend_AI5_vars begin
  3 -1 roll dup nullString eq dup
  {
    setSSave
  } if
  /inLine? exch def
  /cBName exch def
  /nColors exch def
  /cBType exch def
} bd
/Bb
{
  sSave null eq
  {
    Adobe_blend_AI5_vars begin
    setSSave
  } if
  composite?
  {
    /_fill /fill load store
  }
  {
    /__fill /fill load store
      /_fill
      {
        _of true eq
        {
          currentgray 1 ne
          {
            __fill
          } if
        }
        {
          __fill
        } ifelse
      } def
  } ifelse
  /fill
  {
  } def
  } bd
  /BB
  {
  /cBType xs
  cleartomark cleartomark
  cBType dup
  bRender
  sSave dup type /savetype eq
  {
    restore 0
  } if
  pop
  currentdict Adobe_blend_AI5_vars eq
  {
   end
  } if
  2 ne exch 0 gt and
  {
    2 eq
    {
      s
    }
    {
      S
    } ifelse
  }
  {
    pop newpath
  } ifelse
} bd
currentdict readonly pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
  userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
  dup null eq
  {
    pop
    _dp 0 ne
    {
      0 1 _dp 1 sub _dl mod
      {
        _da exch get 3 get
      } for
      _dp 1 sub _dl mod 1 add packedarray
      _da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
      definepattern pop
    } if
  }
  {
    _dp 0 ne _dp _dl mod 0 eq and
    {
      null dp
    } if
    7 packedarray _da exch _dp _dl mod exch put
    _dp _dl mod _da 0 get 4 get 2 packedarray
    /_dp _dp 1 add def
  } ifelse
} def
/E
{
  _ed begin
  dup 0 get type /arraytype ne
  {
    0
    {
      dup 1 add index type /arraytype eq
      {
        1 add
      }
      {
        exit
      } ifelse
    } loop
    array astore
  } if
  /_dd exch def
  /_ury exch def
  /_urx exch def
  /_lly exch def
  /_llx exch def
  /_n exch def
  /_y 0 def
  /_dl 4 def
  /_dp 0 def
  /_da _dl array def
  0 1 _dd length 1 sub
  {
    /_d exch _dd exch get def
    0 2 _d length 2 sub
    {
      /_x exch def
      /_c _d _x get _ ne def
      /_r _d _x 1 add get cvlit def
      _r _ ne
      {
        _urx _llx sub _ury _lly sub
        [
        1 0 0 1 0 0
        ]
        [
        /save cvx
        _llx neg _lly neg /translate cvx
        _c
        {
          nc /begin cvx
        } if
        _r dup type /stringtype eq
        {
          cvx
        }
        {
          {
            exec
          } /forall cvx
        } ifelse
        _c
        {
          /end cvx
        } if
        /restore cvx
        ] cvx
        /_fn 12 _n length add string def
        _y _fn cvs pop
        /_y _y 1 add def
        _fn 12 _n putinterval
        _fn _c false dp
        _d exch _x 1 add exch put
      } if
    } for
  } for
  null dp
  _n _dd /_pd
 end
  xput
} def
/fc
{
  _fm dup concatmatrix pop
} def
/p
{
  /_fm exch ddef
  9 -2 roll _pm translate fc
  7 -2 roll _pm scale fc
  5 -1 roll _pm rotate fc
  4 -2 roll exch 0 ne
  {
    dup _pm rotate fc
    1 -1 _pm scale fc
    neg _pm rotate fc
  }
  {
    pop
  } ifelse
  dup _pm rotate fc
  exch dup sin exch cos div 1 0 0 1 0 6 2 roll
  _pm astore fc
  neg _pm rotate fc
  _pd exch get /_fdd exch ddef
  /_pf
  {
    save
    /_doClip 0 ddef
    0 1 _fdd length 1 sub
    {
      /_fd exch _fdd exch get ddef
      _fd
      0 2 _fd length 2 sub
      {
        gsave
        2 copy get dup _ ne
        {
          cvx exec _fc
        }
        {
          pop
        } ifelse
        2 copy 1 add get dup _ ne
        {
          aload pop findfont _fm
          patternfill
        }
        {
          pop
          fill
        } ifelse
        grestore
        pop
      } for
      pop
    } for
    restore
    newpath
  } ddef
  /_psf
  {
    save
    /_doClip 0 ddef
    0 1 _fdd length 1 sub
    {
      /_fd exch _fdd exch get ddef
      _fd
      0 2 _fd length 2 sub
      {
        gsave
        2 copy get dup _ ne
        {
          cvx exec _fc
        }
        {
          pop
        } ifelse
        2 copy 1 add get dup _ ne
        {
          aload pop findfont _fm
          9 copy 6 npop patternashow
        }
        {
          pop
          6 copy 3 npop hvashow
        } ifelse
        grestore
        pop
      } for
      pop
    } for
    restore
    sw rmoveto
  } ddef
  /_pjsf
  {
    save
    /_doClip 0 ddef
    0 1 _fdd length 1 sub
    {
      /_fd exch _fdd exch get ddef
      _fd
      0 2 _fd length 2 sub
      {
        gsave
        2 copy get dup _ ne
        {
          cvx exec _fc
        }
        {
          pop
        } ifelse
        2 copy 1 add get dup _ ne
        {
          aload pop findfont _fm
          12 copy 6 npop patternawidthshow
        }
        {
          pop 9 copy 3 npop hvawidthshow
        } ifelse
        grestore
        pop
      } for
      pop
    } for
    restore
    swj rmoveto
  } ddef
  /_lp /none ddef
} def
/sc
{
  _sm dup concatmatrix pop
} def
/P
{
  /_sm exch ddef
  9 -2 roll _pm translate sc
  7 -2 roll _pm scale sc
  5 -1 roll _pm rotate sc
  4 -2 roll exch 0 ne
  {
    dup _pm rotate sc
    1 -1 _pm scale sc
    neg _pm rotate sc
  }
  {
    pop
  } ifelse
  dup _pm rotate sc
  exch dup sin exch cos div 1 0 0 1 0 6 2 roll
  _pm astore sc
  neg _pm rotate sc
  _pd exch get /_sdd exch ddef
  /_ps
  {
    save
    /_doClip 0 ddef
    0 1 _sdd length 1 sub
    {
      /_sd exch _sdd exch get ddef
      _sd
      0 2 _sd length 2 sub
      {
        gsave
        2 copy get dup _ ne
        {
          cvx exec _sc
        }
        {
          pop
        } ifelse
        2 copy 1 add get dup _ ne
        {
          aload pop findfont _sm
          patternstroke
        }
        {
          pop stroke
        } ifelse
        grestore
        pop
      } for
      pop
    } for
    restore
    newpath
  } ddef
  /_pss
  {
    save
    /_doClip 0 ddef
    0 1 _sdd length 1 sub
    {
      /_sd exch _sdd exch get ddef
      _sd
      0 2 _sd length 2 sub
      {
        gsave
        2 copy get dup _ ne
        {
          cvx exec _sc
        }
        {
          pop
        } ifelse
        2 copy 1 add get dup _ ne
        {
          aload pop findfont _sm
          10 copy 6 npop patternashowstroke
        }
        {
          pop 7 copy 3 npop ss
        } ifelse
        grestore
        pop
      } for
      pop
    } for
    restore
    pop sw rmoveto
  } ddef
  /_pjss
  {
    save
    /_doClip 0 ddef
    0 1 _sdd length 1 sub
    {
      /_sd exch _sdd exch get ddef
      _sd
      0 2 _sd length 2 sub
      {
        gsave
        2 copy get dup _ ne
        {
          cvx exec _sc
        }
        {
          pop
        } ifelse
        2 copy 1 add get dup _ ne
        {
          aload pop findfont _sm
          13 copy 6 npop patternawidthshowstroke
        }
        {
          pop 10 copy 3 npop jss
        } ifelse
        grestore
        pop
      } for
      pop
    } for
    restore
    pop swj rmoveto
  } ddef
  /_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
  /definepattern where
  {
    pop
  }
  {
   begin
   begin
    Adobe_pattern_AI5 begin
    Adobe_pattern_AI5
    {
      dup xcheck
      {
        bind
      } if
      pop pop
    } forall
    mark
    cachestatus 7 1 roll pop pop pop pop exch pop exch
    {
      {
        10000 add
        dup 2 index gt
        {
          exit
        } if
        dup setcachelimit
      } loop
    } stopped
    cleartomark
   end

   end
   end

    Adobe_pattern_AI5 begin
  } ifelse
} def
/terminate
{
  currentdict Adobe_pattern_AI5 eq
  {
   end
  } if
} def
errordict
/nocurrentpoint
{
  pop
  stop
} put
errordict
/invalidaccess
{
  pop
  stop
} put
/patternencoding
256 array def
0 1 255
{
  patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
  17 dict begin
  /uniform exch def
  /cache exch def
  /key exch def
  /procarray exch def
  /mtx exch matrix invertmatrix def
  /height exch def
  /width exch def
  /ctm matrix currentmatrix def
  /ptm matrix def
  /str 32 string def
  /slice 9 dict def
  slice /s 1 put
  slice /q 256 procarray length div sqrt floor cvi put
  slice /b 0 put
  /FontBBox
  [
  0 0 0 0
  ] def
  /FontMatrix mtx matrix copy def
  /Encoding patternencoding def
  /FontType 3 def
  /BuildChar
  {
    exch
   begin
    /setstrokeadjust where {pop true setstrokeadjust} if
    slice begin
    dup q dup mul mod s idiv /i exch def
    dup q dup mul mod s mod /j exch def
    q dup mul idiv procarray exch get
    /xl j width s div mul def
    /xg j 1 add width s div mul def
    /yl i height s div mul def
    /yg i 1 add height s div mul def
    uniform
    {
      1 1
    }
    {
      width 0 dtransform
      dup mul exch dup mul add sqrt dup 1 add exch div
      0 height dtransform
      dup mul exch dup mul add sqrt dup 1 add exch div
    } ifelse
    width 0 cache
    {
      xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
      setcachedevice
    }
    {
      setcharwidth
    } ifelse
    gsave
    scale
    newpath
    xl yl moveto
    xg yl lineto
    xg yg lineto
    xl yg lineto
    closepath
    clip
    newpath
   end
   end
    exec
    grestore
  } def
  key currentdict definefont
 end
} def
/patterncachesize
{
  gsave
  newpath
  0 0 moveto
  width 0 lineto
  width height lineto
  0 height lineto
  closepath
  patternmatrix setmatrix
  pathbbox
  exch ceiling 4 -1 roll floor sub 3 1 roll
  ceiling exch floor sub
  mul 1 add
  grestore
} def
/patterncachelimit
{
  cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
  exch dup begin
  setfont
  ctm setmatrix
  concat
  slice exch /b exch slice /q get dup mul mul put
  FontMatrix concat
  uniform
  {
    width 0 dtransform round width div exch round width div exch
    0 height dtransform round height div exch height div exch
    0 0 transform round exch round exch
    ptm astore setmatrix
  }
  {
    ptm currentmatrix pop
  } ifelse
  {
    currentpoint
  } stopped not
  {
    2 npop
    pathbbox
    true
    4 index 3 index eq
    4 index 3 index eq
    and
    {
      pop false
      {
        {
          2 npop
        }
        {
          3 npop true
        }
        {
          7 npop true
        }
        {
          pop true
        } pathforall
      } stopped
      {
        5 npop true
      } if
    } if
    {
      height div ceiling height mul 4 1 roll
      width div ceiling width mul 4 1 roll
      height div floor height mul 4 1 roll
      width div floor width mul 4 1 roll
      2 index sub height div ceiling cvi exch
      3 index sub width div ceiling cvi exch
      4 2 roll moveto
      FontMatrix mtx invertmatrix
      dup dup 4 get exch 5 get rmoveto
      ptm ptm concatmatrix pop
      slice /s
      patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
      dup slice /q get gt
      {
        pop slice /q get
      } if
      put
      0 1 slice /s get dup mul 1 sub
      {
        slice /b get add
        gsave
        0 1 str length 1 sub
        {
          str exch 2 index put
        } for
        pop
        dup
        {
          gsave
          ptm setmatrix
          1 index str length idiv
          {
            str show
          } repeat
          1 index str length mod str exch 0 exch getinterval show
          grestore
          0 height rmoveto
        } repeat
        grestore
      } for
      2 npop
    }
    {
      4 npop
    } ifelse
  } if
 end
} def
/patternclip
{
  _eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
  strokepath
} def
/patternmatrix
matrix def
/patternfill
{
  dup type /dicttype eq
  {
    Adobe_pattern_AI5 /patternmatrix get
  } if
  gsave
  patternclip
  Adobe_pattern_AI5 /patternpath get exec
  grestore
  newpath
} def
/patternstroke
{
  dup type /dicttype eq
  {
    Adobe_pattern_AI5 /patternmatrix get
  } if
  gsave
  patternstrokepath
  true
  {
    {
      {
        newpath
        moveto
      }
      {
        lineto
      }
      {
        curveto
      }
      {
        closepath
        3 copy
        Adobe_pattern_AI5 /patternfill get exec
      } pathforall
      3 npop
    } stopped
    {
      5 npop
      patternclip
      Adobe_pattern_AI5 /patternfill get exec
    } if
  }
  {
    patternclip
    Adobe_pattern_AI5 /patternfill get exec
  } ifelse
  grestore
  newpath
} def
/vpatternawidthshow
{
  6 1 roll
  /_hvay exch ddef
  /_hvax exch ddef
  /_hvwb exch ddef
  /_hvcy exch ddef
  /_hvcx exch ddef

  {
    dup cstring
    dup length 1 eq
    _charorientation 1 eq
    and
    {
      -90 rotate
      currentpoint
      _fontRotateAdjust add
      moveto
      gsave
      false charpath currentpoint
      5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
      grestore
      _fontRotateAdjust sub
      moveto
      _hvwb eq { _hvcx _hvcy rmoveto } if
      _hvax _hvay rmoveto
      90 rotate
    }
    {
      currentpoint
      _fontHeight sub
      _hvax sub
      3 index _hvwb eq { _hvcx sub } if
      currentpoint
      exch 4 index stringwidth pop 2 div sub
      exch _fontAscent sub
      moveto
      gsave
      2 index false charpath
      6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
      grestore
      newpath moveto pop pop
    } ifelse
  } cforall
  3 npop
} def
/hpatternawidthshow
{
  {
    dup cstring exch
    gsave
    3 index eq { 5 index 5 index rmoveto } if
    false charpath currentpoint
    9 index 9 index 9 index
    Adobe_pattern_AI5 /patternfill get exec
    grestore
    newpath moveto
    2 copy rmoveto
  } cforall
  8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
  6 index type /dicttype eq
  {
    Adobe_pattern_AI5 /patternmatrix get 7 1 roll
  } if
  _lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
  7 1 roll
  6 1 roll
  /_hvay exch ddef
  /_hvax exch ddef
  /_hvwb exch ddef
  /_hvcy exch ddef
  /_hvcx exch ddef
  {
    dup cstring
    dup length 1 eq
    _charorientation 1 eq
    and
    {
      -90 rotate
      currentpoint
      _fontRotateAdjust add
      moveto
      gsave
      false charpath currentpoint
      3 index setmatrix
      6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
      grestore
      _fontRotateAdjust sub
      moveto
      _hvwb eq { _hvcx _hvcy rmoveto } if
      _hvax _hvay rmoveto
      90 rotate
    }
    {
      currentpoint
      _fontHeight sub
      _hvax sub
      3 index _hvwb eq { _hvcx sub } if
      currentpoint
      exch 4 index stringwidth pop 2 div sub
      exch _fontAscent sub
      moveto
      gsave
      2 index false charpath
      4 index setmatrix
      7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
      grestore
      newpath moveto pop pop
    } ifelse
  } cforall
  4 npop
} def
/hpatternawidthshowstroke
{
  7 1 roll
  {
    dup cstring exch
    gsave
    3 index eq { 5 index 5 index rmoveto } if
    false charpath currentpoint
    7 index setmatrix
    10 index 10 index 10 index
    Adobe_pattern_AI5 /patternstroke get exec
    grestore
    newpath moveto
    2 copy rmoveto
  } cforall
  9 npop
} def
/patternashowstroke
{
  0 0 0 7 3 roll
  patternawidthshowstroke
} def
/patternawidthshowstroke
{
  7 index type /dicttype eq
  {
    patternmatrix /patternmatrix get 8 1 roll
  } if
  _lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_screens_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_blend_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
[
39/quotesingle 96/grave 130/quotesinglbase 131/florin 132/quotedblbase
133/ellipsis 134/dagger 135/daggerdbl 136/circumflex 137/perthousand 
138/Scaron 139/guilsinglleft 140/OE 145/quoteleft 146/quoteright 
147/quotedblleft 148/quotedblright 149/bullet 150/endash 151/emdash 
152/tilde 153/trademark 154/scaron 155/guilsinglright 156/oe 157/dotlessi 
159/Ydieresis 164/currency 166/brokenbar 168/dieresis 169/copyright 
170/ordfeminine 172/logicalnot 174/registered 175/macron 176/ring 
177/plusminus 178/twosuperior 179/threesuperior 180/acute 181/mu 
183/periodcentered 184/cedilla 185/onesuperior 186/ordmasculine 
188/onequarter 189/onehalf 190/threequarters 192/Agrave 193/Aacute 
194/Acircumflex 195/Atilde 196/Adieresis 197/Aring 198/AE 199/Ccedilla 
200/Egrave 201/Eacute 202/Ecircumflex 203/Edieresis 204/Igrave 205/Iacute 
206/Icircumflex 207/Idieresis 208/Eth 209/Ntilde 210/Ograve 211/Oacute 
212/Ocircumflex 213/Otilde 214/Odieresis 215/multiply 216/Oslash 
217/Ugrave 218/Uacute 219/Ucircumflex 220/Udieresis 221/Yacute 222/Thorn 
223/germandbls 224/agrave 225/aacute 226/acircumflex 227/atilde 228/adieresis 
229/aring 230/ae 231/ccedilla 232/egrave 233/eacute 234/ecircumflex 
235/edieresis 236/igrave 237/iacute 238/icircumflex 239/idieresis 
240/eth 241/ntilde 242/ograve 243/oacute 244/ocircumflex 245/otilde 
246/odieresis 247/divide 248/oslash 249/ugrave 250/uacute 251/ucircumflex 
252/udieresis 253/yacute 254/thorn 255/ydieresis
TE
%AI3_BeginEncoding: _Helvetica Helvetica
[
/_Helvetica/Helvetica 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-Bold Helvetica-Bold
[
/_Helvetica-Bold/Helvetica-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-Oblique Helvetica-Oblique
[
/_Helvetica-Oblique/Helvetica-Oblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-BoldOblique Helvetica-BoldOblique
[
/_Helvetica-BoldOblique/Helvetica-BoldOblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[
/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Bold Times-Bold
[
/_Times-Bold/Times-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[
/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-BoldItalic Times-BoldItalic
[
/_Times-BoldItalic/Times-BoldItalic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier Courier
[
/_Courier/Courier 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-Bold Courier-Bold
[
/_Courier-Bold/Courier-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-Oblique Courier-Oblique
[
/_Courier-Oblique/Courier-Oblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-BoldOblique Courier-BoldOblique
[
/_Courier-BoldOblique/Courier-BoldOblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Symbol Symbol
[
/_Symbol/Symbol 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup

1 XR

u
 [] 0 d
0.7500 w
  0.000 0.000 0.000 1.000 K
1 J
1 j
  68.8800 26.2800 m
  92.0400 26.6400 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  99.4800 26.6400 m
  89.4000 23.0400 L
  89.2800 30.0000 L
  99.4800 26.6400 L
B
U
u
0.7500 w
  0.000 0.000 0.000 1.000 K
  3.9600 26.2800 m
  19.2000 26.2800 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  26.4000 26.2800 m
  16.3200 22.6800 L
  16.3200 29.8800 L
  26.4000 26.2800 L
B
U
  0.000 0.000 0.000 0.000 k
0.7500 w
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 0.000 k
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 0.000 k
*u
  332.1617 66.2400 m
  335.2759 66.2434  337.7975 68.7658  337.8000 71.8800 C
  337.8000 88.6800 L
  337.7975 91.7968  335.2718 94.3203  332.1550 94.3200 C
  35.2739 94.3200 L
  32.1575 94.3142  29.6333 91.7797  29.6400 88.6633 C
  29.6400 71.8767 L
  29.6443 68.7624  32.1674 66.2416  35.2817 66.2400 C
  332.1617 66.2400 L
B
*U
0 To
1.0000 0.0000 0.0000 1.0000 128.6400 75.9600 0 Tp
TP
119.148936 Tz
/_Courier-Bold 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(f\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 135.1200 75.9600 0 Tp
TP
119.148936 Tz
/_Courier-Bold 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(e\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 141.6000 75.9600 0 Tp
TP
119.148936 Tz
/_Courier-Bold 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(e\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 148.0800 75.9600 0 Tp
TP
119.148936 Tz
/_Courier-Bold 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(d\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 154.5600 75.9600 0 Tp
TP
119.148936 Tz
/_Courier-Bold 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(b\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 161.0400 75.9600 0 Tp
TP
119.148936 Tz
/_Courier-Bold 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(a\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 167.5200 75.9600 0 Tp
TP
119.148936 Tz
/_Courier-Bold 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(c\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 174.0000 75.9600 0 Tp
TP
119.148936 Tz
/_Courier-Bold 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(k\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 180.4800 75.9600 0 Tp
TP
119.148936 Tz
/_Courier-Bold 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
( \r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 186.9600 75.9600 0 Tp
TP
119.148936 Tz
/_Courier-Bold 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(f\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 193.4400 75.9600 0 Tp
TP
119.148936 Tz
/_Courier-Bold 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(u\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 199.9200 75.9600 0 Tp
TP
119.148936 Tz
/_Courier-Bold 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(n\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 206.4000 75.9600 0 Tp
TP
119.148936 Tz
/_Courier-Bold 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(c\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 212.8800 75.9600 0 Tp
TP
119.148936 Tz
/_Courier-Bold 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(t\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 219.3600 75.9600 0 Tp
TP
119.148936 Tz
/_Courier-Bold 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(i\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 225.8400 75.9600 0 Tp
TP
119.148936 Tz
/_Courier-Bold 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(o\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 232.3200 75.9600 0 Tp
TP
119.148936 Tz
/_Courier-Bold 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(n\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.7500 w
  0.000 0.000 0.000 1.000 K
1 j
  3.9600 80.2800 m
  3.9600 26.2800 L
S
U
u
  3.9600 80.2800 m
  29.6400 80.2800 L
S
U
  0.000 0.000 0.000 0.000 k
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 0.000 k
  0.000 0.000 0.000 0.000 k
*u
  64.4413 15.1200 m
  66.8929 15.1227  68.8780 17.1084  68.8800 19.5600 C
  68.8800 33.0000 L
  68.8780 35.4537  66.8897 37.4402  64.4361 37.4400 C
  30.8352 37.4400 L
  28.3819 37.4354  26.3947 35.4402  26.4000 32.9868 C
  26.4000 19.5574 L
  26.4034 17.1057  28.3897 15.1212  30.8413 15.1200 C
  64.4413 15.1200 L
B
*U
0 To
1.0000 0.0000 0.0000 1.0000 37.9200 21.9600 0 Tp
TP
119.148936 Tz
/_Courier-Bold 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(n\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 44.4000 21.9600 0 Tp
TP
119.148936 Tz
/_Courier-Bold 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(-\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 50.8800 21.9600 0 Tp
TP
119.148936 Tz
/_Courier-Bold 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.7500 w
  0.000 0.000 0.000 1.000 K
1 j
  215.4000 26.6400 m
  228.7200 26.6400 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  235.9200 26.6400 m
  225.8400 23.0400 L
  225.8400 30.2400 L
  235.9200 26.6400 L
B
U
u
0.7500 w
  0.000 0.000 0.000 1.000 K
  141.9600 26.6400 m
  165.4800 26.7600 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  172.9200 26.7600 m
  162.8400 23.1600 L
  162.8400 30.2400 L
  172.9200 26.7600 L
B
U
u
0.7500 w
  0.000 0.000 0.000 1.000 K
  319.8000 26.6400 m
  353.2800 26.6400 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  360.4800 26.6400 m
  350.4000 23.0400 L
  350.4000 30.2400 L
  360.4800 26.6400 L
B
U
  0.000 0.000 0.000 0.000 k
0.7500 w
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 0.000 k
  0.000 0.000 0.000 0.000 k
*u
  137.5213 15.4800 m
  139.9729 15.4827  141.9580 17.4684  141.9600 19.9200 C
  141.9600 33.3600 L
  141.9580 35.8137  139.9697 37.8002  137.5161 37.8000 C
  103.9152 37.8000 L
  101.4619 37.7954  99.4747 35.8002  99.4800 33.3468 C
  99.4800 19.9174 L
  99.4834 17.4657  101.4697 15.4812  103.9213 15.4800 C
  137.5213 15.4800 L
B
*U
0 To
1.0000 0.0000 0.0000 1.0000 111.0000 22.3200 0 Tp
TP
119.148936 Tz
/_Courier-Bold 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(n\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 117.4800 22.3200 0 Tp
TP
119.148936 Tz
/_Courier-Bold 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(-\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 123.9600 22.3200 0 Tp
TP
119.148936 Tz
/_Courier-Bold 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 0.000 k
0.7500 w
  0.000 0.000 0.000 1.000 K
1 j
  0.000 0.000 0.000 0.000 k
  0.000 0.000 0.000 0.000 k
*u
  210.9613 15.4800 m
  213.4129 15.4827  215.3980 17.4684  215.4000 19.9200 C
  215.4000 33.3600 L
  215.3980 35.8137  213.4097 37.8002  210.9561 37.8000 C
  177.3552 37.8000 L
  174.9019 37.7954  172.9147 35.8002  172.9200 33.3468 C
  172.9200 19.9174 L
  172.9234 17.4657  174.9097 15.4812  177.3613 15.4800 C
  210.9613 15.4800 L
B
*U
0 To
1.0000 0.0000 0.0000 1.0000 184.4400 22.3200 0 Tp
TP
119.148936 Tz
/_Courier-Bold 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(n\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 190.9200 22.3200 0 Tp
TP
119.148936 Tz
/_Courier-Bold 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(-\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 197.4000 22.3200 0 Tp
TP
119.148936 Tz
/_Courier-Bold 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(3\r) Tx
TO
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 0.000 k
0.7500 w
  0.000 0.000 0.000 1.000 K
1 j
  0.000 0.000 0.000 0.000 k
  0.000 0.000 0.000 0.000 k
*u
  315.3613 15.4800 m
  317.8129 15.4827  319.7980 17.4684  319.8000 19.9200 C
  319.8000 33.3600 L
  319.7980 35.8137  317.8097 37.8002  315.3561 37.8000 C
  281.7552 37.8000 L
  279.3019 37.7954  277.3147 35.8002  277.3200 33.3468 C
  277.3200 19.9174 L
  277.3234 17.4657  279.3097 15.4812  281.7613 15.4800 C
  315.3613 15.4800 L
B
*U
0 To
1.0000 0.0000 0.0000 1.0000 295.3200 22.3200 0 Tp
TP
119.148936 Tz
/_Courier-Bold 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(0\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.7500 w
  0.000 0.000 0.000 1.000 K
1 j
  256.8000 26.6400 m
  270.1200 26.6400 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  277.3200 26.6400 m
  267.2400 23.0400 L
  267.2400 30.2400 L
  277.3200 26.6400 L
B
U
  0.000 0.000 0.000 0.000 k
0.7500 w
  0.000 0.000 0.000 0.000 K
u
  235.9200 21.2400 m
  261.2400 21.2400 L
  261.2400 43.5600 L
  235.9200 43.5600 L
  235.9200 21.2400 L
B
  248.5800 32.4000 m
B
U
0 To
1.0000 0.0000 0.0000 1.0000 242.0400 27.0000 0 Tp
TP
85.714286 Tz
/_Times-BoldItalic 15.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(.\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 246.3600 27.0000 0 Tp
TP
85.714286 Tz
/_Times-BoldItalic 15.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(.\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 250.6800 27.0000 0 Tp
TP
85.714286 Tz
/_Times-BoldItalic 15.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(.\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.7500 w
  0.000 0.000 0.000 1.000 K
1 j
  81.7200 53.2800 m
  81.7200 26.4000 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  81.7200 60.4800 m
  85.3200 50.4000 L
  78.2400 50.4000 L
  81.7200 60.4800 L
B
U
u
0.7500 w
  0.000 0.000 0.000 1.000 K
  150.1200 53.4000 m
  150.1200 26.6400 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  150.1200 60.6000 m
  153.7200 50.5200 L
  146.6400 50.5200 L
  150.1200 60.6000 L
B
U
u
0.7500 w
  0.000 0.000 0.000 1.000 K
  218.5200 53.4000 m
  218.5200 26.6400 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  218.5200 60.6000 m
  222.1200 50.5200 L
  215.0400 50.5200 L
  218.5200 60.6000 L
B
U
u
0.7500 w
  0.000 0.000 0.000 1.000 K
  326.4000 53.4000 m
  326.4000 26.6400 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  326.4000 60.6000 m
  330.0000 50.5200 L
  322.9200 50.5200 L
  326.4000 60.6000 L
B
U
  0.000 0.000 0.000 0.000 k
0.7500 w
  0.000 0.000 0.000 0.000 K
u
  332.4000 3.6000 m
  389.2800 3.6000 L
  389.2800 20.8800 L
  332.4000 20.8800 L
  332.4000 3.6000 L
B
  360.8400 12.2400 m
B
U
0 To
1.0000 0.0000 0.0000 1.0000 346.8000 8.6400 0 Tp
TP
86.046512 Tz
/_Times-BoldItalic 11.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(o\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 351.8400 8.6400 0 Tp
TP
86.046512 Tz
/_Times-BoldItalic 11.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(u\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 357.6000 8.6400 0 Tp
TP
86.046512 Tz
/_Times-BoldItalic 11.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(t\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 360.4800 8.6400 0 Tp
TP
86.046512 Tz
/_Times-BoldItalic 11.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(p\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 366.2400 8.6400 0 Tp
TP
86.046512 Tz
/_Times-BoldItalic 11.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(u\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 372.0000 8.6400 0 Tp
TP
86.046512 Tz
/_Times-BoldItalic 11.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(t\r) Tx
TO
  0.000 0.000 0.000 1.000 K
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_blend_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_typography_AI5 /terminate get exec
Adobe_screens_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF

%%EndDocument
 @endspecial 0 TeXcolorgray 2532 1016 a FC(Fig.)k(1:)f(The)h(Fibonacci)
e(NLFSR)p 0 TeXcolorgray 0 TeXcolorgray 2083 1317 a(In)44
b(order)f(to)h(solv)o(e)g(the)g(problem)f(abo)o(v)o(e,)f(in)j(this)f
(paper)m(,)f(we)2000 1416 y(pro)o(vide)f(a)j(ne)n(w)f(method)f(to)h(in)
m(v)o(estigate)f(the)h(period)f(of)h(output)2000 1516
y(sequence)31 b(of)h(a)h(c)o(ycle)f(of)g(an)g Fv(\()p
Fz(n)p FA(;)9 b Fz(k)q Fv(\))34 b FC(NFSR)g(by)e(using)f(the)i(method)
2000 1616 y(of)24 b(semi-tensor)f(product)f(\(STP\))i(of)g(matrices.)g
(The)f(method)g(of)h(STP)2000 1715 y(w)o(as)k(proposed)d(by)h(Cheng)h
Fz(et)g(al.)g FC(in)g([2][3)n(][4)o(].)g(After)g(the)g(proposal)2000
1815 y(of)33 b(method)g(of)h(STP)-9 b(,)34 b(it)h(has)f(been)f(used)h
(in)g(man)o(y)f(\002elds,)h(such)g(as)2000 1914 y(lar)o(ge-scale)19
b(systems)i([5)o(][6)o(],)f(graph)f(coloring)g([7)o(][8)o(],)i(Petri)g
(nets)f([9],)2000 2014 y(Boolean)26 b(netw)o(orks)g(\(BNs\))h([10)n
(][11)o(])g(and)f(NFSR)i([12)o(][13)n(].)f(In)f(this)2000
2114 y(paper)m(,)j(we)i(treat)g(the)g Fv(\()p Fz(n)p
FA(;)9 b Fz(k)q Fv(\))32 b FC(NFSR)h(as)e(a)h(Boolean)e(netw)o(ork)g
(\(BN\).)2000 2213 y(In)j([12)o(],)g(Zhong)f Fz(et)i(al.)f
FC(in)m(v)o(estigated)e(stability)j(of)f(NFSR)i(and)d(the)2000
2313 y(c)o(ycle)24 b(of)h(NFSR)g(by)g(using)f(the)h(method)e(of)i(STP)
-9 b(.)25 b(In)f([14)o(],)h(based)f(on)2000 2413 y(STP)-9
b(,)25 b(Cheng)f Fz(et)i(al.)f FC(studied)f(the)h(stability)h(of)e
(BNs.)i(The)f(method)f(of)2000 2512 y(STP)29 b(is)g(po)n(werful)e(to)i
(deal)f(with)h(the)f(system)h(with)g(\002nite)f(v)n(alue.)2083
2612 y(In)49 b(this)g(paper)m(,)f(we)h(de\002ne)g(the)g(minimal)f
(period)g(of)h(output)2000 2712 y(sequence)25 b(of)h(a)g(c)o(ycle)g(of)
f(an)h Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))28 b FC(NFSR)f(for)e
(better)h(in)m(v)o(estigation)2000 2812 y(of)f(the)g(output)f(sequence)
g(of)h(an)g Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))26 b
FC(NFSR.)g(W)-7 b(e)26 b(use)g(the)f(method)2000 2911
y(of)32 b(STP)h(to)f(in)m(v)o(estigate)f(the)h(stability)h(of)f
Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))33 b FC(NFSR.)h(W)-7
b(e)33 b(focus)2000 3011 y(on)25 b(the)i(stability)f(of)g
Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))27 b FC(NFSR,)g(the)f(period)f(of)
h(output)f(sequence)2000 3111 y(of)34 b Fv(\()p Fz(n)p
FA(;)9 b Fz(k)q Fv(\))36 b FC(NFSR,)g(and)e(the)h(period)e(of)i(output)
e(sequence)h(of)h Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))2000
3210 y FC(NFSR)26 b(composed)e(by)h Fz(m)h FC(smaller)g
Fv(\()p Fz(n)3136 3222 y Fs(i)3157 3210 y FA(;)9 b Fz(k)3226
3222 y Fs(i)3247 3210 y Fv(\))p FA(;)26 b FC(1)17 b Fy(\024)f
Fz(i)i Fy(\024)e Fz(m)26 b FC(NFSRs.)h(The)2000 3310
y(main)h(contrib)n(ution)e(of)i(this)h(paper)f(is)h(as)g(follo)n(ws:)p
0 TeXcolorgray 2083 3427 a Fq(\017)p 0 TeXcolorgray 49
w FC(W)-7 b(e)29 b(\002nd)e(out)g(the)h(relationship)e(between)h(the)g
(minimal)g(period)2163 3527 y(of)h(output)e(sequence)h(of)g(a)h(c)o
(ycle)f(of)g(an)h Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))29
b FC(NFSR)f(and)f(the)2163 3627 y(length)h(of)g(the)h(c)o(ycle.)p
0 TeXcolorgray 2083 3726 a Fq(\017)p 0 TeXcolorgray 49
w FC(W)-7 b(e)22 b(propose)e(an)g(algorithm)g(to)h(judge)e(the)i
(stability)g(of)g(an)g Fv(\()p Fz(n)p FA(;)9 b Fz(k)q
Fv(\))2163 3826 y FC(NFSR.)p 0 TeXcolorgray 2083 3925
a Fq(\017)p 0 TeXcolorgray 49 w FC(W)-7 b(e)35 b(propose)c(an)i
(algorithm)f(to)h(\002nd)g(the)g(minimal)f(period)g(of)2163
4025 y(the)d(output)e(sequence)g(of)i(a)g(c)o(ycle)f(of)g(an)g
Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))30 b FC(NFSR.)2083
4143 y(The)21 b(remainder)g(of)g(this)i(paper)e(is)i(or)o(ganized)c(as)
k(follo)n(ws.)e(Section)2000 4242 y(2)34 b(gi)n(v)o(es)f(some)h
(preliminaries)f(on)h(STP)g(and)g Fv(\()p Fz(n)p FA(;)9
b Fz(k)q Fv(\))35 b FC(NFSR.)g(Based)2000 4342 y(on)h(the)h(method)f
(of)g(STP)-9 b(,)37 b(we)g(obtain)f(the)h(multi-linear)f(forms)g(of)
2000 4441 y(an)26 b Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))28
b FC(NFSR.)f(Section)f(3)h(in)m(v)o(estigate)e(the)h(stability)h(of)f
(an)h Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))2000 4541
y FC(NFSR,)34 b(the)f(minimal)g(period)f(of)h(output)f(sequence)g(of)h
(a)h(c)o(ycle)f(of)2000 4641 y(an)h Fv(\()p Fz(n)p FA(;)9
b Fz(k)q Fv(\))35 b FC(NFSR,)g(and)f(the)g(minimal)g(period)f(of)h
(output)f(sequence)2000 4740 y(of)k(a)h(c)o(ycle)f(of)g(an)h(composed)d
Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))39 b FC(NFSR.)f(In)g(Section)f(4,)
g(tw)o(o)2000 4840 y(e)o(xamples)23 b(are)h(gi)n(v)o(en)f(to)i
(illustrate)f(our)g(theoretical)f(results.)i(At)g(last,)2000
4940 y(a)k(conclusion)d(is)k(gi)n(v)o(en.)2705 5100 y(I)t(I)t(.)45
b FD(P)t(R)t(E)t(L)t(I)t(M)t(I)t(N)r(A)t(R)t(I)t(E)t(S)2083
5230 y FC(In)28 b(this)h(section,)f(we)g(\002rst)h(re)n(vie)n(w)f(the)h
(STP)g(of)f(matrices)g(brie\003y)-5 b(.)2000 5329 y(Then)46
b(the)g(multi-linear)g(form)f(of)i(nonlinear)d(Boolean)i(function)2000
5429 y(that)31 b(is)g(obtained)f(by)g(using)g(the)h(semi-tensor)f
(product)f(is)i(recalled.)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray -46 142 a @beginspecial 0
@llx 0 @lly 506 @urx 82 @ury 2160 @rwi @setspecial
%%BeginDocument: Galois.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ImageMark Software Labs
%%For: () ()
%%Title: E:\mypaper\Galois.eps
%%CreationDate: () ()
%%BoundingBox: 0 0 506 82
%%DocumentProcessColors: Black
%%ColorUsage:Color
%%DocumentFonts: Helvetica
%%+Helvetica-Bold
%%+Helvetica-Oblique
%%+Helvetica-BoldOblique
%%+Times-Roman
%%+Times-Bold
%%+Times-Italic
%%+Times-BoldItalic
%%+Courier
%%+Courier-Bold
%%+Courier-Oblique
%%+Courier-BoldOblique
%%+Symbol
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_screens_AI5 1.0 0
%%+ procset Adobe_typography_AI5 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_blend_AI5 1.0 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_Illustrator_AI5 1.0 0
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI3_TemplateBox: 0 0 506 82
%AI3_TileBox: 0 0 506 82
%AI3_DocumentPreview: None
%%Template:
%%PageOrigin:0.0000 0.0000
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI5 1.0 1
%%Title: (Typography Operators)
%%Version: 1.0 1
%%CreationDate:(6/10/1996) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI5 68 dict dup begin
put
/initialize
{
 begin
 begin
  Adobe_typography_AI5 begin
  Adobe_typography_AI5
  {
    dup xcheck
    {
      bind
    } if
    pop pop
  } forall
 end
 end
 end
  Adobe_typography_AI5 begin
} def
/terminate
{
  currentdict Adobe_typography_AI5 eq
  {
   end
  } if
} def
/modifyEncoding
{
  /_tempEncode exch ddef
  /_pntr 0 ddef
  {
    counttomark -1 roll
    dup type dup /marktype eq
    {
      pop pop exit
    }
    {
      /nametype eq
      {
        _tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
        put
      }
      {
        /_pntr exch ddef
      } ifelse
    } ifelse
  } loop
  _tempEncode
} def
/havefont
{
  systemdict /languagelevel known
    {
    /Font resourcestatus dup
      { exch pop exch pop }
    if
    }
    {
    systemdict /FontDirectory get 1 index known
      { pop true }
      {
      systemdict /fileposition known
        {
        dup length 6 add exch
        Ss 6 250 getinterval
        cvs pop
        Ss exch 0 exch getinterval
        status
          { pop pop pop pop true }
          { false }
        ifelse
        }
        {
        pop false
        }
      ifelse
      }
    ifelse
    }
  ifelse
} def
/TE
{
  StandardEncoding 256 array copy modifyEncoding
  /_nativeEncoding exch def
} def
/subststring {
  exch 2 index exch search
  {
    exch pop
    exch dup () eq
    {
      pop exch concatstring
    }
    {
      3 -1 roll
      exch concatstring
      concatstring
    } ifelse
    exch pop true
  }
  {
    pop pop false
  } ifelse
} def
/concatstring {
  1 index length 1 index length
  1 index add
  string
  dup 0 5 index putinterval
  dup 2 index 4 index putinterval
  4 1 roll pop pop pop
} def
%
/TZ
{
  dup type /arraytype eq
  {
    /_wv exch def
  }
  {
    /_wv 0 def
  } ifelse
  /_useNativeEncoding exch def
  2 index havefont
  {
    3 index
    255 string
    cvs

    dup
    (_Symbol_)
    eq
    {
      pop
      2 index
      findfont

    }
    {
      dup length 1 sub
      1 exch
      getinterval

      cvn
      findfont
    } ifelse
  }
  {
    dup 1 eq
    {
      2 index 64 string cvs
      dup (-90pv-RKSJ-) (-83pv-RKSJ-) subststring
      {
        exch pop dup havefont
        {
          findfont false
        }
        {
          pop true
        } ifelse
      }
      {
        pop dup
        (-90ms-RKSJ-) (-Ext-RKSJ-) subststring
        {
          exch pop dup havefont
          {
            findfont false
          }
          {
            pop true
          } ifelse
        }
        {
          pop pop true
        } ifelse
      } ifelse
      {
        /Ryumin-Light-83pv-RKSJ-H havefont
          {/Ryumin-Light-83pv-RKSJ-H}
          {/Courier}
          ifelse
          findfont
          [1 0 0.5 1 0 0] makefont
      } if
    }
    {
      /Courier findfont
    } ifelse
  } ifelse
  _wv type /arraytype eq
  {
    _wv makeblendedfont
  } if
  dup length 10 add dict
 begin
  mark exch
  {
    1 index /FID ne
    {
      def
    } if
    cleartomark mark
  } forall
  pop
  /FontScript exch def
  /FontDirection exch def
  /FontRequest exch def
  /FontName exch def
  counttomark 0 eq
  {
    1 _useNativeEncoding eq
    {
      /Encoding _nativeEncoding def
    } if
    cleartomark
  }
  {
    /Encoding load 256 array copy
    modifyEncoding /Encoding exch def
  } ifelse
  FontName currentdict
 end
  definefont pop
} def
/tr
{
  _ax _ay 3 2 roll
} def
/trj
{
  _cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
  /Tx
  {
    dup
    currentpoint 3 2 roll
    tr _psf
    newpath moveto
    tr _ctm _pss
  } ddef
  /Tj
  {
    dup
    currentpoint 3 2 roll
    trj _pjsf
    newpath moveto
    trj _ctm _pjss
  } ddef
} def
/a1
{
W B
} def
/e0
{
  /Tx
  {
    tr _psf
  } ddef
  /Tj
  {
    trj _pjsf
  } ddef
} def
/e1
{
W F
} def
/i0
{
  /Tx
  {
    tr sp
  } ddef
  /Tj
  {
    trj jsp
  } ddef
} def
/i1
{
  W N
} def
/o0
{
  /Tx
  {
    tr sw rmoveto
  } ddef
  /Tj
  {
    trj swj rmoveto
  } ddef
} def
/r0
{
  /Tx
  {
    tr _ctm _pss
  } ddef
  /Tj
  {
    trj _ctm _pjss
  } ddef
} def
/r1
{
W S
} def
/To
{
  pop _ctm currentmatrix pop
} def
/TO
{
  iTe _ctm setmatrix newpath
} def
/Tp
{
  pop _tm astore pop _ctm setmatrix
  _tDict begin
  /W
  {
  } def
  /h
  {
  } def
} def
/TP
{
 end
  iTm 0 0 moveto
} def
/Tr
{
  _render 3 le
  {
    currentpoint newpath moveto
  } if
  dup 8 eq
  {
    pop 0
  }
  {
    dup 9 eq
    {
      pop 1
    } if
  } ifelse
  dup /_render exch ddef
  _renderStart exch get load exec
} def
/iTm
{
  _ctm setmatrix _tm concat
  _shift aload pop _lineorientation 1 eq { exch } if translate
  _scale aload pop _lineorientation 1 eq _yokoorientation 1 eq or { exch } if scale
} def
/Tm
{
  _tm astore pop iTm 0 0 moveto
} def
/Td
{
  _mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
  _render -1 eq
  {
  }
  {
    _renderEnd _render get dup null ne
    {
      load exec
    }
    {
      pop
    } ifelse
  } ifelse
  /_render -1 ddef
} def
/Ta
{
  pop
} def
/Tf
{
  1 index type /nametype eq
  {
    dup 0.75 mul 1 index 0.25 mul neg
  } if
  /_fontDescent exch ddef
  /_fontAscent exch ddef
  /_fontSize exch ddef
  /_fontRotateAdjust _fontAscent _fontDescent add 2 div neg ddef
  /_fontHeight _fontSize ddef
  findfont _fontSize scalefont setfont
} def
/Tl
{
  pop neg 0 exch
  _leading astore pop
} def
/Tt
{
  pop
} def
/TW
{
  3 npop
} def
/Tw
{
  /_cx exch ddef
} def
/TC
{
  3 npop
} def
/Tc
{
  /_ax exch ddef
} def
/Ts
{
  0 exch
  _shift astore pop
  currentpoint
  iTm
  moveto
} def
/Ti
{
  3 npop
} def
/Tz
{
  count 1 eq { 100 } if
  100 div exch 100 div exch
  _scale astore pop
  iTm
} def
/TA
{
  pop
} def
/Tq
{
  pop
} def
/Tg
{
  pop
} def
/TG
{
  pop
} def
/Tv
{
  /_lineorientation exch ddef
} def
/TV
{
  /_charorientation exch ddef
} def
/Ty
{
  dup /_yokoorientation exch ddef 1 sub neg Tv
} def
/TY
{
  pop
} def
/T~
{
  Tx
} def
/Th
{
  pop pop pop pop pop
} def
/TX
{
  pop
} def
/Tk
{
  _fontSize mul 1000 div
  _lineorientation 0 eq { neg 0 } { 0 exch } ifelse
  rmoveto
  pop
} def
/TK
{
  2 npop
} def
/T*
{
  _leading aload pop
  _lineorientation 0 ne { exch } if
  Td
} def
/T*-
{
  _leading aload pop
  _lineorientation 0 ne { exch } if
  exch neg exch neg
  Td
} def
/T-
{
  _ax neg 0 rmoveto
  _lineorientation 1 eq _charorientation 0 eq and { 1 TV _hyphen Tx 0 TV } { _hyphen Tx } ifelse
} def
/T+
{
} def
/TR
{
  _ctm currentmatrix pop
  _tm astore pop
  iTm 0 0 moveto
} def
/TS
{
  currentfont 3 1 roll
  /_Symbol_ findfont _fontSize scalefont setfont

  0 eq
  {
    Tx
  }
  {
    Tj
  } ifelse
  setfont
} def
/Xb
{
  pop pop
} def
/Tb /Xb load def
/Xe
{
  pop pop pop pop
} def
/Te /Xe load def
/XB
{
} def
/TB /XB load def
currentdict readonly pop
end
setpacking
%
/X^
{
  currentfont 5 1 roll
  dup havefont
    {
    findfont _fontSize scalefont setfont
    }
    {
    pop
    exch
    } ifelse
  2 index 0 eq
  {
    Tx
  }
  {
    Tj
  } ifelse
  pop pop
  setfont
} def
/T^ /X^ load def
%%EndResource
%%BeginResource: procset Adobe_screens_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Custom Halftone Screens ProcSet)
%%Version: 1.2 0
%%CreationDate: (03/24/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
systemdict begin
userdict /Adobe_screens_AI5 15 dict dup begin
put
/initialize
{
  Adobe_screens_AI5 begin
  /screenid
    deviceDPI 600 gt composite? not or
    {
    -1
    }
    {
      deviceDPI currentScreenFreq
      dup dup 60 ge exch 150 le and deviceDPI 300 le and
    {
      pop 60
    } if
    div 1.41421 div 0.5 add cvi
    } ifelse
  def

  2 screenid eq
  {
    /customsize 16 def
    /customdata /customdata2 def
    setcustomscreen
  } if

  3 screenid eq
  {
    /customsize 24 def
    /customdata /customdata3 def
    setcustomscreen
  } if

  4 screenid eq
  {
    /customsize 16 def
    /customdata /customdata4 def
    setcustomscreen
  } if

  5 screenid eq
  {
    /customsize 20 def
    /customdata /customdata5 def
    setcustomscreen
  } if

  6 screenid eq
  {
    /customsize 24 def
    /customdata /customdata6 def
    setcustomscreen
  } if

  7 screenid eq
  {
    /customsize 28 def
    /customdata /customdata7 def
    setcustomscreen
  } if

  8 screenid eq
  {
    /customsize 16 def
    /customdata /customdata8 def
    setcustomscreen
  } if
} def
/terminate
{
  currentdict Adobe_screens_AI5 eq
  {
   end
  } if
} def
/setcustomscreen
{
  deviceDPI customsize div 0
  {
    1 add 2 div customsize mul cvi exch
    1 add 2 div customsize mul cvi exch
    customsize mul add
    customdata load exch get 256 div
  } setscreen
} def
/customdata2 28 28 mul string def
currentfile customdata2 readhexstring
4180E8694988E2634382EA6B4B8AE061A01939C8A81737C2A21B3BCAAA1636C0
F8795998F6775796FA7B5B9AF57656952ED8B80727D6B60F2FDABA0626D5B50E
4E8DE6674786EE6F4F8EE5664685ED6EAD1434C6A61F3FCEAE1232C5A51E3ECD
F3745493FE7F5F9EF1725291FD7E5E9D24D3B30C2CDEBE0222D1B10A2ADDBD04
4483EB6C4C8BE1624281E96A4A89E364A31C3CCBAB1535C1A11A3AC9A91838C3
FB7C5C9BF4755594F97A5A99F778589730DBBB0525D4B40D2DD9B90828D7B710
508FE4654584EC6D4D8CE7684887EF70AF1131C4A41D3DCCAC1333C7A72040CF
F0715190FC7D5D9CF2735392FF80609F21D0B00929DCBC0323D2B20B2BDFBF01
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata3 28 28 mul string def
currentfile customdata3 readhexstring
011DC7F5E73D0421CBF3E43A021EC8F6E83E0522CCF2E43A2B648BC4A0762F68
8AC39E732C658CC5A177306989C29D72D5B6521A6192D9B55219608FD6B6531B
6193DAB451185F8FFCEE440C28D2FCED430B27D1FDEF450C29D3FBEC420A26D0
BEA77D366F83BCA77C356E87BFA87E377082BBA67B346D86145B99E0AE4A1259
98DFB14E155C9AE1AD4A115897DEB04D0623CDF4E63C0420CAF8EA400723CDF4
E53B031FC9F7E93F316988C19F752E678EC6A378326A88C09F742D668DC6A278
DBB350175E91D8B8551C6395DCB24F165D90D7B7541C6294FAEC420925CFFFF1
470E2BD5F9EB410824CEFEF0460D2AD4BAA57A336C85BEAA80397180B9A47933
6B84BDA97F387181105797DDAF4C145A9CE3AB480F5696DDAE4B13599BE2AC49
021EC8F6E83E0522CCF2E43A011DC7F5E73D0421CBF3E43A2C658CC5A1773069
89C29D722B648BC4A0762F688AC39E73D6B6531B6193DAB451185F8FD5B6521A
6192D9B55219608FFDEF450C29D3FBEC420A26D0FCEE440C28D2FCED430B27D1
BFA87E377082BBA67B346D86BEA77D366F83BCA77C356E87155C9AE1AD4A1158
97DEB04D145B99E0AE4A125998DFB14E0723CDF4E53B031FC9F7E93F0623CDF4
E63C0420CAF8EA40326A88C09F742D668DC6A278316988C19F752E678EC6A378
DCB24F165D90D7B7541C6294DBB350175E91D8B8551C6395F9EB410824CEFEF0
460D2AD4FAEC420925CFFFF1470E2BD5B9A479336B84BDA97F387181BAA57A33
6C85BEAA803971800F5696DDAE4B13599BE2AC49105797DDAF4C145A9CE3AB48
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata4 28 28 mul string def
currentfile customdata4 readhexstring
1139B8E0FAD2531B133BBAE2F8D05119417180A6AE9A7B4B437382A5AD987949
C08867272F6F92CAC28A66262E6E90C8E8DE5F070F37B6F2EADD5E060E36B5F0
FED6571F173FBEE6FDD5561E163EBDE5AB9E7F4F477786A1A99D7E4E467685A3
2C6C96CEC68E62222A6A95CDC58D64240C34B3F6EED95A020A32B1F5EDDB5C04
143CBBE3F9D1521A123AB9E1FBD3541C447483A4AC997A4A427281A7AF9B7C4C
C38B65252D6D91C9C1896828307093CBEBDC5D050D35B4F1E9DF60081038B7F3
FCD4551D153DBCE4FFD758201840BFE7A89C7D4D457584A2AA9F8050487887A0
296994CCC48C63232B6B97CFC78F61210931B0F4ECDA5B030B33B2F7EFD85901
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata5 28 28 mul string def
currentfile customdata5 readhexstring
010B34C3EBFCF7CE3F16020C35C4EDFBF6CD3E15102552A4D6EADDB5632B1126
54A5D5EADCB3622A3958768499C19E8C7C5E3A59778498C19D8B7B5DC8A99370
47334C7587AFC9AA936F46324B7485AEF1E5BC6B1E0A2351A3D8F2E4BC6A1E09
2351A2D7FFF9D14219050F38C6EFFEF9D04118040E37C6EFE8E0B7662D142856
A8D3E7DFB7652D132856A7D4BF9C8E7F603D5B7A8195BE9A8E7E603C5B798297
314A7389B2CCAD906D442F497289B1CBAC926E4508214FA1DBF4E2B9671B0720
4EA0DAF4E3BA691C030D36C5EDFBF6CD3F16010C34C3ECFDF8CF4017122654A6
D4E9DDB4622A112553A5D6EBDEB5642C3B59788397C09C8B7C5D3A58778599C2
9E8C7D5FCAAB926E46314B7486AFC8AA947048334D7587B0F2E4BB691D082250
A1D8F1E6BD6B1F0A2452A3D9FDF8CF4118030E36C5EEFFFAD1421A050F38C7F0
E6DFB6642C132755A7D3E8E1B8662E152957A8D2BE9A8D7E5F3B5A798296BF9B
8F80613D5C7B80952F487188B1CAAC916D443049728AB3CCAE906C43061F4D9F
DAF3E2BA681C07214FA0DBF5E1B8671A00000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata6 28 28 mul string def
currentfile customdata6 readhexstring
081A44B6E0F2FDECC150250C091B45B6E1F3FCEBC04F240C1D336199C7D8DCD3
A56C37221E33619AC8D7DBD2A46B36214864798091AEB1958C7E694C49657A81
90ADB0948B7D684BB99D8475593C405C7888A1BEBA9E8574583B3F5B7888A0BD
E4CBAA712E1215326098CFE8E4CCA9712D1114315F97CEE7F5F1C6552B040719
43B5DFFAF6F0C6542A03061842B4DEF9FFEDC352270E0B1C47B8E3F4FEECC251
260D0A1C46B7E2F4DAD5A76E39232035639CCAD5D9D4A66D38231F34629BC9D6
AF938E806A4E4A677C838FABAE928D7F694D4A667B828FAC3E5A778AA3BFBC9F
8772563A3D597689A2BEBB9F8673573A14305E97D1EAE6CDA76F2B0F132F5D96
D0E9E5CDA8702C10051742B3DDFCF8EEC4522801041641B2DDFBF7EFC5532902
091B45B6E1F3FCEBC04F240C081A44B6E0F2FDECC150250C1E33619AC8D7DBD2
A46B36211D336199C7D8DCD3A56C372249657A8190ADB0948B7D684B48647980
91AEB1958C7E694CBA9E8574583B3F5B7888A0BDB99D8475593C405C7888A1BE
E4CCA9712D1114315F97CEE7E4CBAA712E1215326098CFE8F6F0C6542A030618
42B4DEF9F5F1C6552B04071943B5DFFAFEECC251260D0A1C46B7E2F4FFEDC352
270E0B1C47B8E3F4D9D4A66D38231F34629BC9D6DAD5A76E39232035639CCAD5
AE928D7F694D4A667B828FACAF938E806A4E4A677C838FAB3D597689A2BEBB9F
8673573A3E5A778AA3BFBC9F8772563A132F5D96D0E9E5CDA8702C1014305E97
D1EAE6CDA76F2B0F041641B2DDFBF7EFC5532902051742B3DDFCF8EEC4522801
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata7 28 28 mul string def
currentfile customdata7 readhexstring
01061B44B7E1F5FEFBE6BD4A210C01071B45B8E1F6FDFBE6BC4A200B09132A54
A7D1EAF5EED9B05D331609142B55A8D2EAF4EED9AF5C32161D2D3D6993C1CBE0
CEC59B7140301E2E3D6A93C0CADFCDC49A713F3047576C7B828DA2B6A48F867E
6F5A48576C7C828CA1B6A38F867E6E59BAAA958A78634E4451667A8498ADBAAB
968977624E4350657A8398ADE3D4C99F7539251A273C6892C2D7E4D4C89E7539
241A273B6891C1D6F8F2DDB460371005122A53A7D0ECF9F2DDB360360F051229
53A6D0EBFFFDE8BE4C220D03081D46B9E3F7FFFCE7BD4B210D02071C46B8E2F7
F3F0DBB15E34180B152C56A9D3E8F3EFDAB05D34170A142C55A9D2E9DFCCC69C
7341321F2F3F6B94BFC9DECCC59C7241311F2E3E6A94BFCAB5A38E8780705B49
596D7D808BA0B4A28D877F6F5B48586D7C818BA043506479859AAFBCAC978876
614C424F64798499AEBBAB968977624D19263B6791C3D8E5D6C79D7337231825
3A6690C3D7E5D5C79E74382304112952A5CFEDFAF0DBB25E350E03102851A5CE
ECF9F1DCB25F360E01071B45B8E1F6FDFBE6BC4A200B01061B44B7E1F5FEFBE6
BD4A210C09142B55A8D2EAF4EED9AF5C321609132A54A7D1EAF5EED9B05D3316
1E2E3D6A93C0CADFCDC49A713F301D2D3D6993C1CBE0CEC59B71403048576C7C
828CA1B6A38F867E6E5947576C7B828DA2B6A48F867E6F5ABAAB968977624E43
50657A8398ADBAAA958A78634E4451667A8498ADE4D4C89E7539241A273B6891
C1D6E3D4C99F7539251A273C6892C2D7F9F2DDB360360F05122953A6D0EBF8F2
DDB460371005122A53A7D0ECFFFCE7BD4B210D02071C46B8E2F7FFFDE8BE4C22
0D03081D46B9E3F7F3EFDAB05D34170A142C55A9D2E9F3F0DBB15E34180B152C
56A9D3E8DECCC59C7241311F2E3E6A94BFCADFCCC69C7341321F2F3F6B94BFC9
B4A28D877F6F5B48586D7C818BA0B5A38E8780705B49596D7D808BA0424F6479
8499AEBBAB968977624D43506479859AAFBCAC978876614C18253A6690C3D7E5
D5C79E74382319263B6791C3D8E5D6C79D73372303102851A5CEECF9F1DCB25F
360E04112952A5CFEDFAF0DBB25E350E
pop pop
/customdata8 28 28 mul string def
currentfile customdata8 readhexstring
050F2747B6D6EEF8FEF4DCBC4D2D1507111D375F9EC6E0E9EBE6CCA4653D1F13
2939556F8EA8C1D1D3C3AE9475573B2B4961717D808999B1B39B8B867F73634B
B8A090827A6A5A42445C6C7C8492A2BAD8C8AA97785232222434546E8DACCADA
F0E2CFA768401A0A0C1C365E9DC5E4F2FAF7DFBF50301802040E2646B5D5EDFC
FFF5DDBD4E2E160806102848B7D7EFF9EAE7CDA5663E2014121E38609FC7E1E8
D2C2AF9576583C2C2A3A56708FA9C0D0B29A8A878074644C4A62727E818898B0
435B6B7B8593A3BBB9A19183796959412333536D8CADCBDBD9C9AB9677513121
0B1B355D9CC4E5F3F1E3CEA6673F1909030D2545B4D4ECFDFBF6DEBE4F2F1701
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
  AGM_Gradient_Sep begin
  AGM_Gradient_Sep_private begin
  _compositeJob{
    initializeSinglePassSeps
  }{
    initializeMultiPassSeps
  }ifelse
  initializeSeps
  AGM_Gradient_private begin
    /_fillSD newSpotDict def
    /_rampSD newSpotDict def
    /_nCustomColorSD nd
 end
  AGM_Gradient_Sep_private
  {
    dup xcheck 1 index type /arraytype eq and
    {
      bind
    }if
    pop pop
  }forall
  AGM_Gradient_Sep
  {
    dup xcheck 1 index type /arraytype eq and
    {
      bind
    }if
    pop pop
  }forall
 end

  currentdict readonly pop
 end
}def
/terminate{
  currentdict AGM_Gradient_Sep eq{
   end
  }if
}def

AGM_Gradient_Sep_private begin
/initializeSeps{
  _noImage not _level2PS not and{
    /_whiteBytes 1 makeByte8 pt
    /knockOut{
      8 setImageParms _whiteBytes /_image load 5 execImage
    }def
    /linealFill{
      mySave
      8 setImageParms
      _color{
        _nCustomColorSD begin
          cyan magenta yellow black
          _spotColor{
            spot1 begin
              /tintImage tintValue 1 exch sub makeByte8 def
           end
            spot2 begin
              /tintImage tintValue 1 exch sub makeByte8 def
           end
          }if
       end
        4{
          makeByte8 4 1 roll
        }repeat
        true 4 _nCustomColorSD ncolorimage
      }{
        _nCustomColorSD/black get 1 exch sub makeByte8
        _nCustomColorSD bwImage
      }ifelse
      myRestore
    }def
  }{
     /knockOut{
      gsave
      false setoverprint
      1 setgray
      0 0 1 1 rectfill
      grestore
    }def
  }ifelse
  /newSpotDict{
    11 dict dup begin
      /nSpots 2 def
      /spot1 7 dict def
      /spot2 7 dict def
   end
  }def
  /initSpotData
  {
   begin
      /name nd
      /tintImage nd
      /tintValue nd
      /spot_C nd
      /spot_M nd
      /spot_Y nd
      /spot_K nd
   end
  }def
  /initSpotDict{
   begin
      /cyanInk false def
      /magentaInk false def
      /yellowInk false def
      /blackInk false def
      /cyan nd
      /magenta nd
      /yellow nd
      /black nd
      spot1 initSpotData
      spot2 initSpotData
   end
  }def
  /copySpotDict{
    /_dst xp
   begin
      cyanInk magentaInk yellowInk blackInk
      cyan magenta yellow black
      spot1 spot2
   end
    _dst begin
      /spot1 spot1 maxlength dict def
      /spot2 spot2 maxlength dict def
      spot2 copy pop
      spot1 copy pop
      /black xd
      /yellow xd
      /magenta xd
      /cyan xd
      /blackInk xd
      /yellowInk xd
      /magentaInk xd
      /cyanInk xd
   end
  }def
  /setCustomColor
  {
    1 index /Black eq{
      6 1 roll 5 npop
      1 exch sub
      setgray
    }{
      6 1 roll _ccAry1 astore exch
      dup null eq{
        pop 0
      }if
      setcustomcolor
    }ifelse
  }def
  /setCStop{
    /_colorStyle exch pt

    _colorStyle 0 eq{
      0 0 0
      4 -1 roll
      1 exch sub
      _spotColor{
        /_colorStyle 3 pt
        /Black
        1 index
        1 exch sub
      }if
    }if
    _colorStyle 2 eq{
      3 npop
    }if
    _rampSD _fillSD copySpotDict

    _colorStyle 4 eq{
      pop
      9 2 roll 3 npop 6 -2 roll
    } if

    _colorStyle 3 eq _colorStyle 4 eq or{

      _fillSD begin
        exch
        dup spot1/name get eq{
          spot1 spot2
        }{
          spot2 spot1
        }ifelse
       begin
         begin
            /name xd
            1 exch sub /tintValue xd
            4{
              tintValue mul 4 1 roll
            }repeat
            _spotColor not{
              /tintValue null def
            }if
         end
          /tintValue 0 def
       end
     end
    }if
    _fillSD nsetcustomcolor
  }def
  /renderCMYK{
    spot1/name get null eq
    spot2/name get null eq and
    dup not{
      pop
      spot1 spotConverted
    }if
    dup not{
      pop
      spot2 spotConverted
    }if
  }def
  /fill_ /fill load def
  /fillOvp{
    currentoverprint{
      _inRipSep{
        currentcolorspace 0 get
        dup /DeviceGray eq
        1 index /DeviceCMYK eq or{
          pop
          currentcmykcolor add add add 0 eq{
            newpath
          }if
        }{
          /Separation eq{
            currentcolor 0 eq{
              newpath
            }if
          }if
        }ifelse
      }{
        currentgray 1 eq{
          newpath
        }if
      }ifelse
    }if
    fill_
  }def
  /fill{
    _nCustomColorSD begin
      renderCMYK
      {
        fillOvp
      }{
        spot1 begin
          gsave
          name null ne{
            spot_C spot_M spot_Y spot_K name tintValue setCustomColor
          }{
            1 setgray
          }ifelse
          fillOvp
          grestore
       end
        spot2 begin
          name null ne{
            gsave
            true setoverprint
            spot_C spot_M spot_Y spot_K name tintValue setCustomColor
            fillOvp
            grestore
          }if
       end
        newpath
      }ifelse
   end
  }def
  /expandSpot{
    _spotColor{
      /_len xp
      _rampSD begin
        spot1 begin
          tintImage null ne{
            tintImage _len expandOne /tintImage xd
          }if
       end
        spot2 begin
          tintImage null ne{
            tintImage _len expandOne /tintImage xd
          }if
       end
     end
    }{
      pop
    }ifelse
  }def
  /rampImage{
    _rampSD begin
      _color{
        /cyanInk _cyanData 0 ne def
        /magentaInk _magentaData 0 ne def
        /yellowInk _yellowData 0 ne def
        /blackInk _blackData 0 ne def
        _nSamples setImageParms
        _nSamples expandSpot
        _cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
        true 4 _rampSD ncolorimage
      }{
        /cyanInk false def
        /magentaInk false def
        /yellowInk false def
        /blackInk true def
        _nSamples setImageParms
        _blackData _rampSD bwImage
      }ifelse
   end
  }def
  /nsetcustomcolor where{
    pop
  }{
    /nsetcustomcolor
    {
      /_nCustomColorSD xp
      _nCustomColorSD begin
        4 copy
        /black xd
        /yellow xd
        /magenta xd
        /cyan xd
        4 copy
        0 ne /blackInk xd
        0 ne /yellowInk xd
        0 ne /magentaInk xd
        0 ne /cyanInk xd
     end
      setcmykcolor
    }def
  }ifelse
  /nsetcustomcolorend where{
    pop
  }{
    /nsetcustomcolorend
    {
      /_nCustomColorSD null pt
    }def
  }ifelse
}def
/initializeSinglePassSeps{
  /_decodeNorm  [0 1] pt
  /_decodeInvert  [1 0] pt
  /spotConverted
  {
   begin
      name null eq{
        false
      }{
        tintValue null eq tintImage null eq and{
          true
        }{
          false
          currentpagedevice/SeparationOrder get{name eq or}forall
          not
        }ifelse
      }ifelse
   end
  }def
  /dictImage
  {
    20 dict dup begin
      /Dict xd
      /Decode xd
      /DataSource xd
      /ImageMatrix xd
      /BitsPerComponent xd
      /Height xd
      /Width xd
      /ImageType 1 def
      Dict
   end
    /_image load 1 execImage
  }def
  /bwImage{
   begin
      gsave
      currentoverprint{
        blackInk{
          [/Separation /Black /DeviceGray{}] setcolorspace
          _decodeInvert dictImage
        }{
          5 npop
        }ifelse
      }{
        /DeviceGray setcolorspace
        _decodeNorm dictImage
      }ifelse
      grestore
   end
  }def
  /ncolorimage where{
    pop
  }{
    /ncolorimage{
     begin
        renderCMYK
        {
          cyanInk
          magentaInk and
          yellowInk and
          blackInk and
          not
          currentoverprint
          and
          {
            pop pop
            gsave
            cyanInk{
              8 copy
              [/Separation /Cyan /DeviceGray{}] setcolorspace
              3 npop
              _decodeNorm dictImage
            }if
            magentaInk{
              8 copy
              [/Separation /Magenta /DeviceGray{}] setcolorspace
              4 -1 roll
              3 npop
              _decodeNorm dictImage
            }if
            yellowInk{
              8 copy
              [/Separation /Yellow /DeviceGray{}] setcolorspace
              4 -2 roll
              3 npop
              _decodeNorm dictImage
            }if
            blackInk{
              4 -3 roll
              [/Separation /Black /DeviceGray{}] setcolorspace
              3 npop
              _decodeNorm dictImage
            }{
              8 npop
            }ifelse
            grestore
          }{
            /_colorimage load 10 execImage
          }ifelse
        }{
          6 npop
          gsave
          spot1 begin
            name null ne tintImage null ne and{
              [/Separation name /DeviceGray{}] setcolorspace
              4 copy
              tintImage
              name /Black eq{
                _decodeNorm
              }{
                _decodeInvert
              }ifelse
              dictImage
            }{
              1 setgray fill
            }ifelse
         end
          spot2 begin
            true setoverprint
            name null ne tintImage null ne and{
              [/Separation name /DeviceGray{}] setcolorspace
              tintImage
              name /Black eq{
                _decodeNorm
              }{
                _decodeInvert
              }ifelse
              dictImage
            }{
              4 npop
              1 setgray fill
            }ifelse
         end
          grestore
        }ifelse
     end
    }def
  }ifelse
}def
/initializeMultiPassSeps{
  /_isCMYKSep
    _cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
  pt
  /invertXfer{
    [
    {
      1 exch sub
    }/exec load systemdict /currenttransfer get exec /exec load
    ] cvx systemdict /settransfer get exec
  }def
  /ccThrough{
    gsave
    1 setCustomColor
    currentcmykcolor
    grestore
    add add add 0 ne
  }def
  /spotConverted
  {
   begin
      _isCMYKSep not{
        false
      }{
        name null eq{
          false
        }{
          tintValue null eq tintImage null eq and{
            true
          }{
            spot_C spot_M spot_Y spot_K name ccThrough
          }ifelse
        }ifelse
      }ifelse
   end
  }def
  /spotChannel
  {
    _isCMYKSep{
      pop false
    }{
     begin
        name null eq{
          false
        }{
          spot_C spot_M spot_Y spot_K name ccThrough
        }ifelse
     end
    }ifelse
  }def
  /getChannelData
  {
    _isCMYKSep dup{
      pop renderCMYK
    }if
    {
      _blackPlate{
        4 1 roll 3 npop blackInk
      }{
        _yellowPlate{
          4 2 roll 3 npop yellowInk
        }{
          _magentaPlate{
            4 3 roll 3 npop magentaInk
          }{
            3 npop cyanInk
          }ifelse
        }ifelse
      }ifelse
      {
        true /nonZeroData
      }{
        true /zeroData
      }ifelse
    }{
      4 npop
      spot1/name get null ne
      spot1 spotChannel and{
        spot1/tintImage get dup null ne{
          false /nonZeroData
        }{
          pop false /noData
        }ifelse
      }{
        spot2/name get null ne
        spot2 spotChannel and{
          spot2/tintImage get dup null ne{
            false /nonZeroData
          }{
            pop false /noData
          }ifelse
        }{
          false /noData
        }ifelse
      }ifelse
    }ifelse
  }def
  /renderChannelData
  {
    /_tmp xp
    _tmp /nonZeroData ne currentoverprint and{
      pop
      _tmp /zeroData eq{pop}if
      4 npop
    }{
      _tmp /nonZeroData eq{
        {
          invertXfer
        }if
          systemdict/image
        get 5 execImage
      }{
        pop
        _tmp /zeroData eq{pop}if
        4 npop
        knockOut
      }ifelse
    }ifelse
  }def
  /bwImage{
   begin
      gsave
      dup dup dup
      getChannelData
      exch pop false exch
      renderChannelData
      grestore
   end
  }def
  /ncolorimage{
   begin
      pop pop
      gsave
      spot2/name get null ne spot2 spotChannel and{
        true setoverprint
      }if
      getChannelData
      renderChannelData
      grestore
   end
  }def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 200 dict def
/initialize
{
  AGM_Gradient begin
  AGM_Gradient_private begin
  initializeVars

  /bd systemdict/mark get def
  /ed
    _level2PS
    {
      (>>)
    }{
      (counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
    } ifelse
  cvx def

  _level2PS{
    initializeLev2
  }{
    initializeLev1
  }ifelse

  queryDevice

  initializeShading
  initializeOps
  _producingSeps{
    AGM_Gradient_Sep/initialize get exec
  }{
    initializeComposite
  }ifelse
  _illustrator{
    /f{}def
    /F{}def
    /s{}def
    /S{}def
    /b{}def
    /B{}def
  }if
  /image where{
    /image get /_image xd
  }if
  /colorimage where{
    /colorimage get /_colorimage xd
  }if
  /rectfill where dup{
    exch pop not _producingSeps or
  }{
    not
  }ifelse
  {
    /rectfill{
      gsave
      newpath
      4 2 roll moveto
      1 index 0 rlineto
      0 1 index rlineto
      1 index neg 0 rlineto
      pop pop
      closepath
      fill
      grestore
    }def
  }if
  /linealImage _noImage{
    /rectImage load
  }{
    _producingSeps{
      AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
      /rampImage load
     end
    }{
      /rampImage load
    }ifelse
  }ifelse
  def
  AGM_Gradient_private
  {
    dup xcheck 1 index type /arraytype eq and
    {
      bind
    }if
    pop pop
  }forall
  AGM_Gradient
  {
    dup xcheck 1 index type /arraytype eq and
    {
      bind
    }if
    pop pop
  }forall
 end

  currentdict readonly pop
 end
}def
/initializeAI
{
  pop pop
  AGM_Gradient/AGM_Gradient_private get /_illustrator true put
  AGM_Gradient/initialize get exec
    AGM_Gradient begin
}def
/unload{
  systemdict/languagelevel known{
    systemdict/languagelevel get 2 ge{
      userdict/AGM_Gradient_Sep 2 copy known{
        undef
      }{
        pop pop
      }ifelse
      userdict/AGM_Gradient 2 copy known{
        undef
      }{
        pop pop
      }ifelse
    }if
  }if
}def
/terminate{
  currentdict AGM_Gradient eq{
   end
  }if
}def

AGM_Gradient_private begin
/initializeVars{
  /_d255 256 array def
  0 1 255{
    _d255 exch dup 255 div put
  }bind for
  /_d255- 256 array def
  0 1 255{
    _d255- exch 1 _d255 2 index get sub put
  }bind for
  /_sSave nd
  /_dUserSpace matrix defaultmatrix def
  /_bUMatrix matrix def
  /_imageMatrix matrix def
  /_saveMatrix matrix def
  /_xm matrix def
  /_ccAry1 5 array def
  /_level2PS
    systemdict/languagelevel known dup{
      pop systemdict/languagelevel get 2 ge
    }if
  def
  /_level3PS
    _level2PS systemdict/shfill known and
  def
  currentdict /_illustrator known not{
    /_illustrator false def
  }if

}def
/initializeOps
{
  AGM_Gradient begin
  currentdict/Bc known not{
    /Bc{

      _renderFlag 2 eq{
        6 npop
      }{
        pushBSpace
        _rampIndex 0 eq{
          pop pop
          setCStop
        }if
        linealFill
        popBSpace
      }ifelse

    }def
  }if

  currentdict/Bg known not{
    /Bg{
      10 npop
      /_gradName xp
      /_renderFlag xp

      _renderFlag 2 ne{

        _illustrator{
          _of setoverprint
        }if

        _illustrator _eo and _renderFlag 3 eq or{
          eoclip
        }{
          clip
        }ifelse

        _gradNames _gradName 2 copy known{
          get
          mark exch aload pop
          /_gradType xp
          1 sub dup /_rampIndex xp
          /_maxRampIndex xp
          mark exch aload pop
          0 0
        }if
        pop pop
        getRampData
      }{
        mark mark
      }ifelse
    }def
  }if

  currentdict/Bm known not{
    /Bm{
      _renderFlag 2 ne{
        _gradType 0 eq{
          linealRamp
        }{
          radialGrad
        }ifelse
      }{
        6 npop
      }ifelse
    }def
  }if

  currentdict/Bh known not{
    /Bh{
      2 npop
      /_yHi xp
      /_xHi xp
      /_radHilite _xHi 0 ne _yHi 0 ne or pt
    }def
  }if

  currentdict/Bn known not{
    /Bn{
      AGM_Gradient_private begin
        dict /_gradNames xp
     end
    }def
  }if

  currentdict/Bd known not{
    /Bd{
      AGM_Gradient begin
      AGM_Gradient_private begin
        /_nColorsBd xp
        /_gradType xp
        /_gradName xp
    }def
  }if

  currentdict/BD known not{
    /BD{
        currentdict/_gradNames known not{
          /_gradNames 20 dict def
        }if
        ] _nColorsBd _gradType
        ]  _gradName exch /_gradNames xput
     end
     end
    }def
  }if

  currentdict/Bb known not{
    /Bb{

      AGM_Gradient begin
      AGM_Gradient_private begin
      _producingSeps{
        AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
      }if
      mySave
    }def
  }if

  currentdict/BB known not{
    /BB{

      /_tmp xp
      cleartomark cleartomark

      _tmp dup
      _renderFlag

      myRestore

      _producingSeps{
       end
      }if

      _illustrator
     end
     end

      {
        2 ne exch 0 gt and{
          2 eq{
            s
          }{
            S
          }ifelse
        }{
          pop newpath
        }ifelse
      }{
        pop newpath
      }ifelse


    }def
  }if

  currentdict/Xm known not{
    /Xm{
      _xm astore pop
    }def
  }if

 end
}def
/queryDevice{
  /_inRipSep
    _level2PS{
      currentpagedevice/Separations 2 copy known{
        get
      }{
        pop pop false
      }ifelse
    }{
      false
    }ifelse
  def
  /_noImage /lv1Fix where{
    pop lv1Fix
  }{
    false
  }ifelse
  def
  /_useShells where{
    pop
  }{
    /_useShells true def
  }ifelse

  /_useSmoothShade where{
    pop
  }{
    /_useSmoothShade false def
  }ifelse
  /_cyanPlate 1 0 0 0 testCMYKColorThrough def
  /_magentaPlate 0 1 0 0 testCMYKColorThrough def
  /_yellowPlate 0 0 1 0 testCMYKColorThrough def
  /_blackPlate 0 0 0 1 testCMYKColorThrough def
  /_compositeJob
    _cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
  def
  /_compositeSpotDevice where{
    pop
  }{
    /_compositeSpotDevice _compositeJob not _inRipSep or{
      1
    }{
      0
    }ifelse
    def
  }ifelse
  /_producingSeps _compositeSpotDevice 0 ne def
  /_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
  /_dpiThreshold where{
    pop
  }{
    /_dpiThreshold 600 def
  }ifelse
  /_screenFreqThreshold where{
    pop
  }{
    /_screenFreqThreshold 150 def
  }ifelse
  /_contoneDevice where{
    pop
  }{
    /_contoneDevice false def
  }ifelse
  /_subSampleOK
    _deviceDPI _dpiThreshold le
    currentScreenFreq _screenFreqThreshold le and
    _contoneDevice not and
    _producingSeps not and
  def
}def
/initializeLev1{
  /makeByte8{
    /_tmp 0 pt
    255 mul cvi
    8 string 8{
      dup _tmp 3 index put
      /_tmp _tmp 1 add pt
    }repeat
    exch pop
  }def
  /currentScreenFreq{
    currentscreen pop pop
  }def
  /_byte 1 string def
  /colorimage where{
    pop
  }{
    /colorimage{
      pop pop
      /_blackTmp xp
      /_yellowTmp xp
      /_magentaTmp xp
      /_cyanTmp xp
      /_cnt 0 pt
      [
      _byte dup 0
      _cyanTmp
        /_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
      _magentaTmp
        /_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
      _yellowTmp
        /_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
      _blackTmp
        /_cnt cvx /get cvx _d255 /exch cvx /get cvx
      /add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
      /dup cvx 0 /lt cvx{
        pop 0
      }/if cvx
      /dup cvx 1 /gt cvx{
        pop 1
      }/if cvx
      255 /mul cvx /cvi cvx
      256 /mod cvx
      /dup cvx 0 /lt cvx{
        pop 0
      }/if cvx
      /put cvx
      /_cnt dup cvx 1 /add cvx /pt cvx
      ] cvx
      bind
      /_image load 5 execImage
    }def
  }ifelse
}def
/initializeLev2{
  /level2ScreenFreq{
   begin
    60
    HalftoneType 1 eq{
      pop Frequency
    }if
    HalftoneType 2 eq{
      pop GrayFrequency
    }if
    HalftoneType 5 eq{
      pop Default level2ScreenFreq
    }if
     end
  }def
  /currentScreenFreq{
    currenthalftone level2ScreenFreq
  }def
}def
/initializeShading{
  _useSmoothShade _level3PS and{
    /_usingSmoothShade true pt
    initializeLev3_Ops
  }{
    /_usingSmoothShade false pt
  }ifelse
}def
/initializeLev3_Ops
{
  /initShFill{
    /_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
    /_rampFuncsArray _maxRampIndex array pt
    /_boundsArray _maxRampIndex 1 sub array pt
    /_encodeArray _maxRampIndex 2 mul array pt
    /_beginCoord _rampPoint pt
    /_colorSpace null pt
    /_firstFill _rampIndex _maxRampIndex eq pt
    /_lastFill false pt
  }def
  /getRampColorSpace{
    _nSamples 1 gt{
      /_ndx 0 pt
      [blendColor] cvx exec
    }if
    /_C0 [currentcolor] pt
    /_C0_Space currentcolorspace pt

    _nSamples 1 gt{
      /_ndx _nSamples 1 sub pt
      [blendColor] cvx exec
    }if
    /_C1 [currentcolor] pt
    /_C1_Space currentcolorspace pt

    _C0_Space _C1_Space eq{
      /_rampColorSpace _C0_Space pt
    }{
      (colorspace conflict!) ==
      showpage
      stop
    }ifelse

    _spotColor{
      nsetcustomcolorend
    }if
  }def
  /linealShFill{
    popBSpace
    _xm aload pop pushBSpace

    /_size _index 1 add pt
    _size _maxRampIndex lt {
      /_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
      /_boundsArray _boundsArray 0 _size 1 sub getinterval pt
      /_encodeArray _encodeArray 0 _size 2 mul getinterval pt
    }if

    bd
      /ShadingType 2
      /ColorSpace _colorSpace
      /Function
        bd
          /FunctionType 3
          /Domain [0 1]
          /Functions _rampFuncsArray
          /Bounds _boundsArray
          /Encode _encodeArray
        ed
      /Extend [_firstFill _lastFill]
      /Domain [0 1]
      /Coords [_beginCoord 0 _endCoord 0]
    ed
    shfill
  }def

  /radialShFill{
    /_size _maxRampIndex _index sub pt
    _size _maxRampIndex lt {
      /_rampFuncsArray _rampFuncsArray _index _size getinterval pt
      /_boundsArray _boundsArray _index _size 1 sub getinterval pt
      /_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
    }if

    /_rampLen _beginCoord _endCoord sub pt
    bd
      /ShadingType 3
      /ColorSpace _colorSpace
      /Function
        bd
          /FunctionType 3
          /Domain [0 1]
          /Functions _rampFuncsArray
          /Bounds _boundsArray
          /Encode _encodeArray
        ed
      /Extend [_lastFill _firstFill]
      /Domain [0 1]
      /Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord]
    ed
    shfill

    _radHilite{
      _xHi _rampLen mul _yHi _rampLen mul translate
    }if
  }def

  /fillRamp{


    /_invert _midPoint 0.5 lt pt
    _rampIndex _maxRampIndex eq {
      initShFill
    }if

    getRampColorSpace

    _colorSpace null eq{
      /_colorSpace _rampColorSpace pt
    }{
      _colorSpace _rampColorSpace ne{
        /_index _index 1
        _gradType 0 eq{
          sub pt
          linealShFill
        }{
          add pt
          radialShFill
        }ifelse
        initShFill
        /_colorSpace _rampColorSpace pt
      } if
    }ifelse
    /_endCoord _endPoint pt
    _rampFuncsArray _index
    bd
      /FunctionType 2
      /Domain [0 1]
      /N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
      _gradType 0 eq{
        _invert{/C1}{/C0}ifelse _C0
        _invert{/C0}{/C1}ifelse _C1
      }{
        _invert{/C0}{/C1}ifelse _C1
        _invert{/C1}{/C0}ifelse _C0
      }ifelse
    ed
    put

    _rampIndex 1 ne{
      _boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
    } if

    0 1 _invert {exch}if
    _encodeArray _index 2 mul 1 add 3 -1 roll put
    _encodeArray _index 2 mul 3 -1 roll put
    _rampIndex 1 eq {
      /_lastFill true pt
      _gradType 0 eq{
        linealShFill
      }{
        radialShFill
      }ifelse
    }if
    /_index _index 1
    _gradType 0 eq{
      add pt
    }{
      sub pt
    }ifelse
  }def

  /radialRamp
    /fillRamp load def

  /rampImage
    /fillRamp load def

  AGM_Gradient begin
  /Bc{
    6 npop
  }def

 end


}def
/initializeComposite{
  /bwImage{
    pop /_image load 5 execImage
  }def
  currentdict/rampImage known not{
    /rampImage{
      _color{
        _nSamples setImageParms


        _rgbRamp{
          _redData _greenData _blueData _nSamples 3 expandColor
          true 3 null ncolorimage
        }{
          _cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
          true 4 null ncolorimage
        }ifelse
      }{
        _nSamples setImageParms _blackData null bwImage
      }ifelse
    }def
  }if
  /setCStop{
    /_colorStyle exch pt
    _colorStyle 0 eq{
      1 exch sub
      0 0 0
      4 -1 roll
    }if

    _colorStyle 2 eq{
      setrgbcolor 4 npop
    }if

    _colorStyle 3 eq{
      1 exch sub /_tmp xp
      pop
      4{
        _tmp mul 4 1 roll
      }repeat
    }if

    _colorStyle 4 eq{
      3 -1 roll pop pop
      1 exch sub /_tmp xp
      3{
        1 exch sub _tmp mul 1 exch sub 3 1 roll
      }repeat
      setrgbcolor
      4 npop
    }if
    _colorStyle 2 ne _colorStyle 4 ne and{
      null nsetcustomcolor
    }if
  }def
  /nsetcustomcolor
  {
    pop setcmykcolor
  }def
  /nsetcustomcolorend
  {
  }def
  /ncolorimage{
    pop
    /_colorimage load 10 execImage
  }def
  _noImage not _level2PS not and{
    /linealFill{
      8 setImageParms
      _color{
        currentcmykcolor
        4{
          makeByte8 4 1 roll
        }repeat
        true 4 null ncolorimage
      }{
        currentgray makeByte8 null bwImage
      }ifelse
    }def
  }if
}def
/npop{
  {pop}repeat
}def
/xd{
  exch def
}def
/nd{
  null def
}def
/pt{
  AGM_Gradient_private 3 1 roll put
}def
/xp{
  exch pt
}def
/xput{
  dup load dup length exch maxlength eq{
    dup dup load dup
    length 2 mul dict copy def
  }if
  load begin
    def
  end
}def
/mySave{
  save /_sSave xp
}def
/myRestore{
  _sSave type /savetype eq{
    _sSave restore
  }if
}def
/gMark{
  counttomark 2 add -1 roll
}def
/execImage{
  /_tmp xp
  {
    exec
  }stopped{
    $error /errorname get /undefinedresult ne{
      stop
    }{
      _tmp npop
    }ifelse
  }if
}def
/pushBSpace{
  newpath gsave
  _bUMatrix astore concat
}def
/popBSpace{
  grestore
}def
/setImageParms{
  1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
  0 0 1 1 rectfill
}def
/testCMYKColorThrough{
  gsave
  setcmykcolor currentcmykcolor
  grestore
  add add add 0 ne
}def
/expandOne  {
  /_tmp xp
  dup type /stringtype ne{
    _tmp string
    exch
    dup 0 ne{
      255 mul cvi
      0 1 _tmp 1 sub{
        3 copy
        exch put pop
      }for
    }if
    pop
  }if
}def
/expandColor{
  /_channels xp
  /_len xp
  _channels{
    _len expandOne _channels 1 roll
  }repeat
}def
/blendColor{

  _color{
    _rgbRamp _producingSeps not and{
      _redData dup type /stringtype eq{
        /_ndx cvx /get cvx _d255 /exch cvx /get cvx
      }if
      _greenData dup type /stringtype eq{
        /_ndx cvx /get cvx _d255 /exch cvx /get cvx
      }if
      _blueData dup type /stringtype eq{
        /_ndx cvx /get cvx _d255 /exch cvx /get cvx
      }if
      /setrgbcolor cvx
    }{
      _cyanData dup type /stringtype eq{
        /_ndx cvx /get cvx _d255 /exch cvx /get cvx
      }if
      _magentaData dup type /stringtype eq{
        /_ndx cvx /get cvx _d255 /exch cvx /get cvx
      }if
      _yellowData dup type /stringtype eq{
        /_ndx cvx /get cvx _d255 /exch cvx /get cvx
      }if
      _blackData dup type /stringtype eq{
        /_ndx cvx /get cvx _d255 /exch cvx /get cvx
      }if

      _spotColor{
        _rampSD begin
          /_rampSD cvx /begin cvx

          spot1 begin
            tintImage dup type /stringtype eq{
              /_ndx cvx /get cvx _d255- /exch cvx /get cvx
            }{
              dup null ne{
                name type /nametype ne{
                  1 exch sub
                }if
              }if
            }ifelse
         end
          /spot1 cvx /tintValue 3 -1 /roll cvx /put cvx

          spot2 begin
            tintImage dup type /stringtype eq{
              /_ndx cvx /get cvx _d255- /exch cvx /get cvx
            }{
              dup null ne{
                name type /nametype ne{
                  1 exch sub
                }if
              }if
            }ifelse
         end
          /spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
          /end cvx
       end
        /_rampSD cvx
        /nsetcustomcolor cvx
      }{
        /setcmykcolor cvx
      }ifelse
    }ifelse
  }{
    _blackData /_ndx cvx /get cvx
    _d255 /exch cvx /get cvx

    _usingSmoothShade{
      1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
    }{
       /setgray cvx
    }ifelse
  }ifelse
}def
/linealRamp{
  pushBSpace
  _ramp{
    linealImage
  }{
    linealFill
  }ifelse
  popBSpace
  /_rampIndex _rampIndex 1 sub pt
  _rampIndex 0 gt{
    getRampData
  }if
}def
/radialGrad{
  /_firstShell true pt
  _usingSmoothShade not{
    fill
  }if
  pushBSpace

  _radHilite{
    _xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
    _rampPoint 1 lt{
      1 _rampPoint sub dup _xHi mul exch _yHi mul translate
    }if
  }if
  _rampIndex{
      radialRamp
    /_rampIndex _rampIndex 1 sub pt
    _rampIndex 0 gt{
      getRampData
    }if
  }repeat

  popBSpace

}def
/getNSamples{
  0 exch
  {
    dup type /stringtype eq{
      length exch pop exit
    }if
    pop
  }forall
  dup 0 eq{
    pop 1
  }if
}def
/getRampData{
  /_rampType gMark pt
  /_color _rampType 0 gt pt
  /_ccRGB _rampType 5 eq _rampType 6 eq or pt
  /_rgbRamp _rampType 4 eq _ccRGB or pt
  /_ccProcess _rampType 2 eq _rampType 3 eq or pt
  _producingSeps{
    _rampSD initSpotDict
    /_spotColor _ccProcess _ccRGB or pt
  }{
    /_spotColor false pt
  }ifelse
  /_ramp true pt
  100 div /_rampPoint xp
  100 div /_midPoint xp

  dup /_colorStyle xp
  _colorStyle 0 eq{
    2
  }{
    _colorStyle 1 eq{
      5
    }{
      _colorStyle 2 eq{
        8
      }{
        _colorStyle 3 eq{
          _producingSeps{
            _rampSD begin
              spot1 begin
                /name 3 index def
                /spot_K 4 index def
                /spot_Y 5 index def
                /spot_M 6 index def
                /spot_C 7 index def
             end
           end
          }if
          7
        }{
          _producingSeps{
            _rampSD begin
              spot1 begin
                /name 4 index def
                /spot_K 8 index def
                /spot_Y 9 index def
                /spot_M 10 index def
                /spot_C 11 index def
             end
           end
          }if
          11
        } ifelse
      }ifelse
    }ifelse
  }ifelse
  /_tmp xp
  _tmp index 100 div /_endPoint xp

  _gradType 1 eq{
    _tmp 1 add index 100 div /_midPoint xp
  }if

  _producingSeps{
    _tmp 2 add index /_nextColorStyle xp
    _nextColorStyle 3 eq{
      /_tmp _tmp 4 add pt
      _tmp index dup
      _rampSD begin
        spot1 /name get ne{
          spot2 begin
            /name xd
            /spot_K _tmp 2 add index def
            /spot_Y _tmp 3 add index def
            /spot_M _tmp 4 add index def
            /spot_C _tmp 5 add index def
         end
        }{
          pop
        }ifelse
     end
    }if
    _nextColorStyle 4 eq{
      /_tmp _tmp 5 add pt
      _tmp index dup
      _rampSD begin
        spot1 /name get ne{
          spot2 begin
            /name xd
            /spot_K _tmp 5 add index def
            /spot_Y _tmp 6 add index def
            /spot_M _tmp 7 add index def
            /spot_C _tmp 8 add index def
         end
        }{
          pop
        }ifelse
     end
    }if
  }if
  _rampType 3 eq _rampType 6 eq or{
    /_tint2Data gMark pt
  }if
  _ccProcess _ccRGB or{
    /_tint1Data gMark pt
  }if
  _rgbRamp{
    /_blueData gMark pt
    /_greenData gMark pt
    /_redData gMark pt
  }if

  _producingSeps{
    _rampSD begin
      _ccProcess _ccRGB or{
        _rampType 3 eq _rampType 6 eq or{
          spot2 begin
            /tintImage _gradType 0 eq{
              _tint2Data
            }{
              _tint1Data
            }ifelse
            def
            name null eq{
              /name /Black def
            }if
         end
        }if
        spot1 begin
          /tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
            _tint1Data
          }{
            _tint2Data
          }ifelse
          def
          _rampType 2 eq _rampType 5 eq or{
            name null eq{
              /name spot2 /name get def
              spot2 /name null put
            }if
          }{
            name null eq{
              /name /Black def
            }if
          }ifelse
       end
      }if
   end
  }if
  /_blackData gMark pt
  _rampType 0 gt{
    counttomark 4 add -3 roll
    /_yellowData xp
    /_magentaData xp
    /_cyanData xp
  }if
  _ramp{
    /_nSamples
      [
      _rampType 0 eq {_blackData}if
      _rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
      _rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
      _rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
      _rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
      _rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
      _rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
      ] getNSamples pt
    _usingSmoothShade not {/_ramp _nSamples 1 gt pt} if
  } if

  setCStop
}def
/rectImage{
  gsave
  /_sInc 1 pt
  /_bInc 1 _nSamples div pt
  /_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
  /_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
  0
  _nSamples
  [
  /dup cvx
  /_ndx /exch cvx /pt cvx
  blendColor
  0 0 _bInc 1 /rectfill cvx
  _bInc 0 /translate cvx
  _sInc /add cvx
  ] cvx
  bind
  repeat
  pop
  _spotColor{
    nsetcustomcolorend
  }if
  grestore
}def
/radialInit{
  /_nRadSamples _nSamples dup 0 eq{pop 1}if pt
  /_sInc -1 pt
  /_rampLen _rampPoint _endPoint sub pt
  /_bInc _rampLen _nSamples div neg pt
  /_optimize false pt
  _subSampleOK{
    /_uRampLen
      _rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
      0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
      2 copy lt{
        exch
      }if pop
    pt
    /_pChange
      _uRampLen 0 eq{
        0
      }{
        _nSamples _uRampLen div
      }ifelse
    pt
    _pChange .5 gt dup /_optimize xp{
      /_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
      /_bInc _rampLen _nRadSamples div neg pt
      /_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
    }if
  }if
  _radHilite{
    /_xBCInc _xHi _rampLen mul _nRadSamples div pt
    /_yBCInc _yHi _rampLen mul _nRadSamples div pt
  }if
}def
currentdict/radialRamp known not{
  /radialRamp{

    /_saveMatrix _saveMatrix currentmatrix def

    radialInit

    _rampPoint

    _nSamples 1 sub

    _nRadSamples
    [
      /dup cvx

      _optimize{
        /round cvx /cvi cvx
      }if

      /_ndx /exch cvx /pt cvx

      _useShells{
        /_firstShell cvx{
          /_firstShell false pt
        }{
          0 0 3 index 360 0 arcn fill
        }/ifelse cvx
      }if

      blendColor

      _useShells{
        0 0 3 /index cvx 0 360 /arc cvx
      }{
        0 0 3 /index cvx 0 360 /arc cvx /fill cvx
      }ifelse

      /exch cvx _bInc /add cvx /exch cvx

      _sInc /add cvx

      _radHilite{
        _xBCInc _yBCInc /translate cvx
      }if
    ] cvx bind
    repeat

    pop pop

    _saveMatrix setmatrix

    _radHilite{
      _xHi _rampLen mul _yHi _rampLen mul translate
    }if

    _useShells _rampIndex 1 eq and{
      fill
    }if
    _spotColor{
      nsetcustomcolorend
    }if


  }def
}if
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
  userdict /Adobe_ColorImage_AI6 24 dict put
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{
  Adobe_ColorImage_AI6 begin
  Adobe_ColorImage_AI6
  {
    dup type /arraytype eq
    {
      dup xcheck
      {
        bind
      } if
    } if
    pop pop
  } forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
  /Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
  /channelcount 0 def
  /sourcecount 0 def
  /sourcearray 4 array def
  /plateindex -1 def
  /XIMask 0 def
  /XIBinary 0 def
  /XIChannelCount 0 def
  /XIBitsPerPixel 0 def
  /XIImageHeight 0 def
  /XIImageWidth 0 def
  /XIImageMatrix null def
  /XIBuffer null def
  /XIDataProc null def
  /XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
  /colorimage where
  {
    /colorimage get /_colorimage exch def
  }
  {
    /_colorimage null def
  } ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
  0 3 index
  dup length 1 sub 0 3 3 -1 roll
  {
    3 getinterval { } forall
    5 index exec
    3 index
  } for

   5 { pop } repeat
} def
/WalkCMYKString
{
  0 3 index
  dup length 1 sub 0 4 3 -1 roll
  {
    4 getinterval { } forall

    6 index exec

    3 index

  } for

  5 { pop } repeat

} def
/StuffRGBIntoGrayString
{
  .11 mul exch

  .59 mul add exch

  .3 mul add

  cvi 3 copy put

  pop 1 add
} def
/RGBToGrayImageProc
{
  Adobe_ColorImage_AI6_Vars begin
    sourcearray 0 get exec
    dup length 3 idiv string
    dup 3 1 roll

    /StuffRGBIntoGrayString load exch
    WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
  exch .11 mul add

  exch .59 mul add

  exch .3 mul add

  dup 255 gt { pop 255 } if

  255 exch sub cvi 3 copy put

  pop 1 add
} def
/CMYKToGrayImageProc
{
  Adobe_ColorImage_AI6_Vars begin
    sourcearray 0 get exec
    dup length 4 idiv string
    dup 3 1 roll

    /StuffCMYKIntoGrayString load exch
    WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
  pop true eq
  {
    Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
  }
  {
    Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
    {
      Adobe_ColorImage_AI6_Vars begin
        sourcearray 0 3 -1 roll put

        channelcount 3 eq
        {
          /RGBToGrayImageProc
        }
        {
          /CMYKToGrayImageProc
        } ifelse
        load
     end
    } if
    image
  } ifelse
} def
/SeparateCMYKImageProc
{
  Adobe_ColorImage_AI6_Vars begin
    sourcecount 0 ne
    {
      sourcearray plateindex get exec
    }
    {
      sourcearray 0 get exec

      dup length 4 idiv string

      0 2 index

      plateindex 4 2 index length 1 sub
      {
        get 255 exch sub

        3 copy put pop 1 add

        2 index
      } for
      pop pop exch pop
    } ifelse
 end
} def

/FourEqual
{
  4 index ne
  {
    pop pop pop false
  }
  {
    4 index ne
    {
      pop pop false
    }
    {
      4 index ne
      {
        pop false
      }
      {
        4 index eq
      } ifelse
    } ifelse
  } ifelse
} def
/TestPlateIndex
{
  Adobe_ColorImage_AI6_Vars begin
    /plateindex -1 def
    /setcmykcolor where
    {
      pop
      gsave
      1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
      0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
      0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
      0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
      grestore
      1 0 0 0 FourEqual
      {
        /plateindex 0 def
      }
      {
        0 1 0 0 FourEqual
        {
          /plateindex 1 def
        }
        {
          0 0 1 0 FourEqual
          {
            /plateindex 2 def
          }
          {
            0 0 0 1 FourEqual
            {
              /plateindex 3 def
            }
            {
              0 0 0 0 FourEqual
              {
                /plateindex 5 def
              } if
            } ifelse
          } ifelse
        } ifelse
      } ifelse
      pop pop pop pop
    } if
    plateindex
 end
} def
/colorimage
{
  Adobe_ColorImage_AI6_Vars begin
    /channelcount 1 index def
    /sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
    4 sourcecount add index dup
    8 eq exch 1 eq or not
 end

  {
    /_colorimage load null ne
    {
      _colorimage
    }
    {
      Adobe_ColorImage_AI6_Vars /sourcecount get
      7 add { pop } repeat
    } ifelse
  }
  {
    dup 3 eq
    TestPlateIndex
    dup -1 eq exch 5 eq or or
    {
      /_colorimage load null eq
      {
        ColorImageCompositeEmulator
      }
      {
        dup 1 eq
        {
          pop pop image
        }
        {
          Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
          {
            gsave

            0 _currenttransfer exec
            1 _currenttransfer exec
            eq
            { 0 _currenttransfer exec 0.5 lt }
            { 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse

            { { pop 0 } } { { pop 1 } } ifelse
            systemdict /settransfer get exec
          } if

          _colorimage

          Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
          {
            grestore
          } if
        } ifelse
      } ifelse
    }
    {
      dup 1 eq
      {
        pop pop
        image
      }
      {
        pop pop
        Adobe_ColorImage_AI6_Vars begin
          sourcecount -1 0
          {
            exch sourcearray 3 1 roll put
          } for
          /SeparateCMYKImageProc load
       end
        systemdict /image get exec
      } ifelse
    } ifelse
  } ifelse
} def
/XG
{
  pop pop
} def
/XF
{
  13 {pop} repeat
} def
/Xh
{
  Adobe_ColorImage_AI6_Vars begin
    gsave
    /XIMask exch 0 ne def
    /XIImageHeight exch def
    /XIImageWidth exch def
    /XIImageMatrix exch def
    0 0 moveto
    XIImageMatrix concat
    XIImageWidth XIImageHeight scale

    XIMask
    {
      /_lp /null ddef
      _fc
      /_lp /imagemask ddef
    }
    if
    /XIVersion 7 def
 end
} def
/XH
{
  Adobe_ColorImage_AI6_Vars begin
    /XIVersion 6 def
    grestore
 end
} def
/XI
{
  Adobe_ColorImage_AI6_Vars begin
    gsave
    /XIMask exch 0 ne def
    /XIBinary exch 0 ne def
    pop
    pop
    /XIChannelCount exch def
    /XIBitsPerPixel exch def
    /XIImageHeight exch def
    /XIImageWidth exch def
    pop pop pop pop
    /XIImageMatrix exch def
    XIBitsPerPixel 1 eq
    {
      XIImageWidth 8 div ceiling cvi
    }
    {
      XIImageWidth XIChannelCount mul
    } ifelse
    /XIBuffer exch string def
    XIBinary
    {
      /XIDataProc { currentfile XIBuffer readstring pop } def
      XIVersion 6 le
      {
        currentfile 128 string readline pop pop
      }
      if
    }
    {
      /XIDataProc { currentfile XIBuffer readhexstring pop } def
    } ifelse

    XIVersion 6 le
    {
      0 0 moveto
      XIImageMatrix concat
      XIImageWidth XIImageHeight scale
      XIMask
      {
        /_lp /null ddef
        _fc
        /_lp /imagemask ddef
      } if
    } if

    XIMask
    {
      XIImageWidth XIImageHeight
      false
      [ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
      /XIDataProc load
      imagemask
    }
    {
      XIImageWidth XIImageHeight
      XIBitsPerPixel
      [ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
      /XIDataProc load

      XIChannelCount 1 eq
      {
        gsave
        0 setgray
        image
        grestore
      }
      {
        false
        XIChannelCount
        colorimage
      } ifelse
    } ifelse
    grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
  userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
  Adobe_Illustrator_AI5 dup begin
  Adobe_Illustrator_AI5_vars begin
  discardDict
  {
    bind pop pop
  } forall
  dup /nc get begin
  {
    dup xcheck 1 index type /operatortype ne and
    {
      bind
    } if
    pop pop
  } forall
 end
  newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
  Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
  dup load dup length exch maxlength eq
  {
    dup dup load dup
    length 2 mul dict copy def
  } if
  load begin
  def
 end
} def
/npop
{
  {
    pop
  } repeat
} def
/hswj
{
  dup stringwidth 3 2 roll
  {
    _hvwb eq { exch _hvcx add exch _hvcy add } if
    exch _hvax add exch _hvay add
  } cforall
} def
/vswj
{
  0 0 3 -1 roll
  {
    dup 255 le
    _charorientation 1 eq
    and
    {
      dup cstring stringwidth 5 2 roll
      _hvwb eq { exch _hvcy sub exch _hvcx sub } if
      exch _hvay sub exch _hvax sub
      4 -1 roll sub exch
      3 -1 roll sub exch
    }
    {
      _hvwb eq { exch _hvcy sub exch _hvcx sub } if
      exch _hvay sub exch _hvax sub
      _fontHeight sub
    } ifelse
  } cforall
} def
/swj
{
  6 1 roll
  /_hvay exch ddef
  /_hvax exch ddef
  /_hvwb exch ddef
  /_hvcy exch ddef
  /_hvcx exch ddef
  _lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
  0 0 0 6 3 roll swj
} def
/vjss
{
  4 1 roll
  {
    dup cstring
    dup length 1 eq
    _charorientation 1 eq
    and
    {
      -90 rotate
      currentpoint
      _fontRotateAdjust add
      moveto
      gsave
      false charpath currentpoint
      5 index setmatrix stroke
      grestore
      _fontRotateAdjust sub
      moveto
      _sp eq
      {
        5 index 5 index rmoveto
      } if
      2 copy rmoveto
      90 rotate
    }
    {
      currentpoint
      _fontHeight sub
      5 index sub
      3 index _sp eq
      {
        9 index sub
      } if

      currentpoint
      exch 4 index stringwidth pop 2 div sub
      exch _fontAscent sub
      moveto

      gsave
      2 index false charpath
      6 index setmatrix stroke
      grestore

      moveto pop pop
    } ifelse
  } cforall
  6 npop
} def
/hjss
{
  4 1 roll
  {
    dup cstring
    gsave
    false charpath currentpoint
    5 index setmatrix stroke
    grestore
    moveto
    _sp eq
    {
      5 index 5 index rmoveto
    } if
    2 copy rmoveto
  } cforall
  6 npop
} def
/jss
{
  _lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
  0 0 0 7 3 roll jss
} def
/vjsp
{
  4 1 roll
  {
    dup cstring
    dup length 1 eq
    _charorientation 1 eq
    and
    {
      -90 rotate
      currentpoint
      _fontRotateAdjust add
      moveto
      false charpath
            currentpoint
      _fontRotateAdjust sub
      moveto
      _sp eq
      {
        5 index 5 index rmoveto
      } if
      2 copy rmoveto
      90 rotate
    }
    {
      currentpoint
      _fontHeight sub
      5 index sub
      3 index _sp eq
      {
        9 index sub
      } if

      currentpoint
      exch 4 index stringwidth pop 2 div sub
      exch _fontAscent sub
      moveto

      2 index false charpath

      moveto pop pop
    } ifelse
  } cforall
  6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
  matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
  transform
  0.25 sub round 0.25 add exch
  0.25 sub round 0.25 add exch
  itransform
} def
/setstrokeadjust where
{
  pop true setstrokeadjust
  /c
  {
    curveto
  } def
  /C
  /c load def
  /v
  {
    currentpoint 6 2 roll curveto
  } def
  /V
  /v load def
  /y
  {
    2 copy curveto
  } def
  /Y
  /y load def
  /l
  {
    lineto
  } def
  /L
  /l load def
  /m
  {
    moveto
  } def
}
{
  /c
  {
    pl curveto
  } def
  /C
  /c load def
  /v
  {
    currentpoint 6 2 roll pl curveto
  } def
  /V
  /v load def
  /y
  {
    pl 2 copy curveto
  } def
  /Y
  /y load def
  /l
  {
    pl lineto
  } def
  /L
  /l load def
  /m
  {
    pl moveto
  } def
} ifelse
/d
{
  setdash
} def
/cf
{
} def
/i
{
  dup 0 eq
  {
    pop cf
  } if
  setflat
} def
/j
{
  setlinejoin
} def
/J
{
  setlinecap
} def
/M
{
  setmiterlimit
} def
/w
{
  setlinewidth
} def
/XR
{
  0 ne
  /_eo exch ddef
} def
/H
{
} def
/h
{
  closepath
} def
/N
{
  _pola 0 eq
  {
    _doClip 1 eq
    {
      _eo {eoclip} {clip} ifelse /_doClip 0 ddef
    } if
    newpath
  }
  {
    /CRender
    {
      N
    } ddef
  } ifelse
} def
/n
{
  N
} def
/F
{
  _pola 0 eq
  {
    _doClip 1 eq
    {
      gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
      /_doClip 0 ddef
    }
    {
      _pf
    } ifelse
  }
  {
    /CRender
    {
      F
    } ddef
  } ifelse
} def
/f
{
  closepath
  F
} def
/S
{
  _pola 0 eq
  {
    _doClip 1 eq
    {
      gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
      /_doClip 0 ddef
    }
    {
      _ps
    } ifelse
  }
  {
    /CRender
    {
      S
    } ddef
  } ifelse
} def
/s
{
  closepath
  S
} def
/B
{
  _pola 0 eq
  {
    _doClip 1 eq
    gsave F grestore
    {
      gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
      /_doClip 0 ddef
    }
    {
      S
    } ifelse
  }
  {
    /CRender
    {
      B
    } ddef
  } ifelse
} def
/b
{
  closepath
  B
} def
/W
{
  /_doClip 1 ddef
} def
/*
{
  count 0 ne
  {
    dup type /stringtype eq
    {
      pop
    } if
  } if
  newpath
} def
/u
{
} def
/U
{
} def
/q
{
  _pola 0 eq
  {
    gsave
  } if
} def
/Q
{
  _pola 0 eq
  {
    grestore
  } if
} def
/*u
{
  _pola 1 add /_pola exch ddef
} def
/*U
{
  _pola 1 sub /_pola exch ddef
  _pola 0 eq
  {
    CRender
  } if
} def
/D
{
  pop
} def
/*w
{
} def
/*W
{
} def
/`
{
  /_i save ddef
  clipForward?
  {
    nulldevice
  } if
  6 1 roll 4 npop
  concat pop
  userdict begin
  /showpage
  {
  } def
  0 setgray
  0 setlinecap
  1 setlinewidth
  0 setlinejoin
  10 setmiterlimit
  [] 0 setdash
  /setstrokeadjust where {pop false setstrokeadjust} if
  newpath
  0 setgray
  false setoverprint
} def
/~
{
 end
  _i restore
} def
/O
{
  0 ne
  /_of exch ddef
  /_lp /none ddef
} def
/R
{
  0 ne
  /_os exch ddef
  /_lp /none ddef
} def
/g
{
  /_gf exch ddef
  /_fc
  {
    _lp /fill ne
    {
      _of setoverprint
      _gf setgray
      /_lp /fill ddef
    } if
  } ddef
  /_pf
  {
    _fc
    _eo {eofill} {fill} ifelse
  } ddef
  /_psf
  {
    _fc
    hvashow
  } ddef
  /_pjsf
  {
    _fc
    hvawidthshow
  } ddef
  /_lp /none ddef
} def
/G
{
  /_gs exch ddef
  /_sc
  {
    _lp /stroke ne
    {
      _os setoverprint
      _gs setgray
      /_lp /stroke ddef
    } if
  } ddef
  /_ps
  {
    _sc
    stroke
  } ddef
  /_pss
  {
    _sc
    ss
  } ddef
  /_pjss
  {
    _sc
    jss
  } ddef
  /_lp /none ddef
} def
/k
{
  _cf astore pop
  /_fc
  {
    _lp /fill ne
    {
      _of setoverprint
      _cf aload pop setcmykcolor
      /_lp /fill ddef
    } if
  } ddef
  /_pf
  {
    _fc
    _eo {eofill} {fill} ifelse
  } ddef
  /_psf
  {
    _fc
    hvashow
  } ddef
  /_pjsf
  {
    _fc
    hvawidthshow
  } ddef
  /_lp /none ddef
} def
/K
{
  _cs astore pop
  /_sc
  {
    _lp /stroke ne
    {
      _os setoverprint
      _cs aload pop setcmykcolor
      /_lp /stroke ddef
    } if
  } ddef
  /_ps
  {
    _sc
    stroke
  } ddef
  /_pss
  {
    _sc
    ss
  } ddef
  /_pjss
  {
    _sc
    jss
  } ddef
  /_lp /none ddef
} def
/Xa
{
  _rgbf astore pop
  /_fc
  {
    _lp /fill ne
    {
      _of setoverprint
      _rgbf aload pop setrgbcolor
      /_lp /fill ddef
    } if
  } ddef
  /_pf
  {
    _fc
    _eo {eofill} {fill} ifelse
  } ddef
  /_psf
  {
    _fc
    hvashow
  } ddef
  /_pjsf
  {
    _fc
    hvawidthshow
  } ddef
  /_lp /none ddef
} def
/XA
{
  _rgbs astore pop
  /_sc
  {
    _lp /stroke ne
    {
      _os setoverprint
      _rgbs aload pop setrgbcolor
      /_lp /stroke ddef
    } if
  } ddef
  /_ps
  {
    _sc
    stroke
  } ddef
  /_pss
  {
    _sc
    ss
  } ddef
  /_pjss
  {
    _sc
    jss
  } ddef
  /_lp /none ddef
} def
/_rgbtocmyk
{
3
  {
  1 exch sub 3 1 roll
  } repeat
3 copy 1 4 1 roll
3
  {
  3 index 2 copy gt
    {
    exch
    } if
  pop 4 1 roll
  } repeat
pop pop pop
4 1 roll
3
  {
  3 index sub
  3 1 roll
  } repeat
4 -1 roll
} def
/Xx
{
  exch
  /_gf exch ddef
  0 eq
  {
    findcmykcustomcolor
  }
  {
    /findrgbcustomcolor where not {
      4 1 roll _rgbtocmyk
      5 -1 roll
      findcmykcustomcolor
    }
    {
      pop
      findrgbcustomcolor
    } ifelse
  } ifelse
  /_if exch ddef
  /_fc
  {
    _lp /fill ne
    {
      _of setoverprint
      _if _gf 1 exch sub setcustomcolor
      /_lp /fill ddef
    } if
  } ddef
  /_pf
  {
    _fc
    _eo {eofill} {fill} ifelse
  } ddef
  /_psf
  {
    _fc
    hvashow
  } ddef
  /_pjsf
  {
    _fc
    hvawidthshow
  } ddef
  /_lp /none ddef
} def
/XX
{
  exch
  /_gs exch ddef
  0 eq
  {
    findcmykcustomcolor
  }
  {
    /findrgbcustomcolor where not {
      4 1 roll _rgbtocmyk
      5 -1 roll
      findcmykcustomcolor
    }
    {
      pop
      findrgbcustomcolor
    } ifelse
  } ifelse
  /_is exch ddef
  /_sc
  {
    _lp /stroke ne
    {
      _os setoverprint
      _is _gs 1 exch sub setcustomcolor
      /_lp /stroke ddef
    } if
  } ddef
  /_ps
  {
    _sc
    stroke
  } ddef
  /_pss
  {
    _sc
    ss
  } ddef
  /_pjss
  {
    _sc
    jss
  } ddef
  /_lp /none ddef
} def
/x
{
  /_gf exch ddef
  findcmykcustomcolor
  /_if exch ddef
  /_fc
  {
    _lp /fill ne
    {
      _of setoverprint
      _if _gf 1 exch sub setcustomcolor
      /_lp /fill ddef
    } if
  } ddef
  /_pf
  {
    _fc
    _eo {eofill} {fill} ifelse
  } ddef
  /_psf
  {
    _fc
    hvashow
  } ddef
  /_pjsf
  {
    _fc
    hvawidthshow
  } ddef
  /_lp /none ddef
} def
/X
{
  /_gs exch ddef
  findcmykcustomcolor
  /_is exch ddef
  /_sc
  {
    _lp /stroke ne
    {
      _os setoverprint
      _is _gs 1 exch sub setcustomcolor
      /_lp /stroke ddef
    } if
  } ddef
  /_ps
  {
    _sc
    stroke
  } ddef
  /_pss
  {
    _sc
    ss
  } ddef
  /_pjss
  {
    _sc
    jss
  } ddef
  /_lp /none ddef
} def
/A
{
  pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
  pop pop
} def
/discard
{
  save /discardSave exch store
  discardDict begin
  /endString exch store
  gt38?
  {
    2 add
  } if
  load
  stopped
  pop
 end
  discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
  /endStringLength endString length store
  /newBuff buffer 0 endStringLength getinterval store
  /newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
  /newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
  newBuff 0 newBuffButFirst putinterval
  newBuffLast 0
  currentfile read not
  {
  stop
  } if
  put
} def
0
{
  pre38Initialize
  mark
  currentfile newBuff readstring exch pop
  {
    {
      newBuff endString eq
      {
        cleartomark stop
      } if
      shiftBuffer
    } loop
  }
  {
  stop
  } ifelse
} def
1
{
  pre38Initialize
  /beginString exch store
  mark
  currentfile newBuff readstring exch pop
  {
    {
      newBuff beginString eq
      {
        /layerCount dup load 1 add store
      }
      {
        newBuff endString eq
        {
          /layerCount dup load 1 sub store
          layerCount 0 eq
          {
            cleartomark stop
          } if
        } if
      } ifelse
      shiftBuffer
    } loop
  } if
} def
2
{
  mark
  {
    currentfile buffer readline not
    {
    stop
    } if
    endString eq
    {
      cleartomark stop
    } if
  } loop
} def
3
{
  /beginString exch store
  /layerCnt 1 store
  mark
  {
    currentfile buffer readline not
    {
    stop
    } if
    dup beginString eq
    {
      pop /layerCnt dup load 1 add store
    }
    {
      endString eq
      {
        layerCnt 1 eq
        {
          cleartomark stop
        }
        {
          /layerCnt dup load 1 sub store
        } ifelse
      } if
    } ifelse
  } loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
  /n /N /s /S /f /F /b /B
}
{
  {
    _doClip 1 eq
    {
      /_doClip 0 ddef _eo {eoclip} {clip} ifelse
    } if
    newpath
  } def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
  4 npop
  6 1 roll
  pop
  4 1 roll
  pop pop pop
  0 eq
  {
    0 eq
    {
      (%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
    }
    {

      /clipForward? true def

      /Tx /pop load def
      /Tj /pop load def

      currentdict end clipRenderOff begin begin
    } ifelse
  }
  {
    0 eq
    {
      save /discardSave exch store
    } if
  } ifelse
} bind def
/LB
{
  discardSave dup null ne
  {
    restore
  }
  {
    pop
    clipForward?
    {
      currentdict
     end
     end
     begin

      /clipForward? false ddef
    } if
  } ifelse
} bind def
/Pb
{
  pop pop
  0 (%AI5_EndPalette) discard
} bind def
/Np
{
  0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
  72 exch div
  0 dtransform dup mul exch dup mul add sqrt
  dup 1 lt
  {
    pop 1
  } if
  setflat
} def
/Mb
{
  q
} def
/Md
{
} def
/MB
{
  Q
} def
/nc 4 dict def
nc begin
/setgray
{
  pop
} bind def
/setcmykcolor
{
  4 npop
} bind def
/setrgbcolor
{
  3 npop
} bind def
/setcustomcolor
{
  2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
  Adobe_cshow begin
  Adobe_cshow
  {
    dup xcheck
    {
      bind
    } if
    pop pop
  } forall
 end
  Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
  {
 end
  } if
} def
/cforall
{
  /_lobyte 0 ddef
  /_hibyte 0 ddef
  /_cproc exch ddef
  /_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
  {
    /_lobyte exch ddef
    _hibyte 0 eq
    _cscript 1 eq
    _lobyte 129 ge _lobyte 159 le and
    _lobyte 224 ge _lobyte 252 le and or and
    _cscript 2 eq
    _lobyte 161 ge _lobyte 254 le and and
    _cscript 3 eq
    _lobyte 161 ge _lobyte 254 le and and
      _cscript 25 eq
    _lobyte 161 ge _lobyte 254 le and and
      _cscript -1 eq
    or or or or and
    {
      /_hibyte _lobyte ddef
    }
    {
      _hibyte 256 mul _lobyte add
      _cproc
      /_hibyte 0 ddef
    } ifelse
  } forall
} def
/cstring
{
  dup 256 lt
  {
    (s) dup 0 4 3 roll put
  }
  {
    dup 256 idiv exch 256 mod
    (hl) dup dup 0 6 5 roll put 1 4 3 roll put
  } ifelse
} def
/clength
{
  0 exch
  { 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
  {
    dup cstring
    show
    _hvax _hvay rmoveto
    _hvwb eq { _hvcx _hvcy rmoveto } if
  } cforall
} def
/vawidthshow
{
  {
    dup 255 le
    _charorientation 1 eq
    and
    {
      -90 rotate
      0 _fontRotateAdjust rmoveto
      cstring
      _hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
      0 _fontRotateAdjust neg rmoveto
      90 rotate
    }
    {
      currentpoint
      _fontHeight sub
      exch _hvay sub exch _hvax sub
      2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
      3 2 roll
      cstring
      dup stringwidth pop 2 div neg _fontAscent neg rmoveto
      show
      moveto
    } ifelse
  } cforall
} def
/hvawidthshow
{
  6 1 roll
  /_hvay exch ddef
  /_hvax exch ddef
  /_hvwb exch ddef
  /_hvcy exch ddef
  /_hvcx exch ddef
  _lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
  0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
  0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
  0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_blend_AI5 1.4 0
%%Title: (Adobe Illustrator (R) Version 5.0 Blend ProcSet)
%%Version: 1.4 0
%%CreationDate: (11/19/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_blend_AI5 70 dict dup begin
put
/bd
{
  bind def
} bind def
/xs
{
  exch store
} bd
/nullProc
{
  {
  }
} def
/initialize
{
  pop pop
  Adobe_blend_AI5 begin
    Adobe_blend_AI5_vars begin
      /_contoneDevice where
      {
        pop
      }
      {
        /_contoneDevice false def
      } ifelse

      /_dpiThreshold where
      {
        pop
      }
      {
        /_dpiThreshold 600 def
      } ifelse

      /_screenFreqThreshold where
      {
        pop
      }
      {
        /_screenFreqThreshold 150 def
      } ifelse

      /tRectOK? deviceDPI _dpiThreshold le currentScreenFreq _screenFreqThreshold le and _contoneDevice not and def
  /invertXfer
  {
    [
    {
      1 exch sub
        } /exec load systemdict/currenttransfer get exec /exec load
        ] cvx systemdict/settransfer get exec
      } bd
      /spotDict 3 dict dup begin
        /nSpots 2 def
        /spot1 7 dict def
        /spot2 7 dict def
     end
      def
      composite?
      {
        /_setgray_ /setgray load def
        /_fill_ /fill load def
        /_image_ /image load def
      }
      {
        /_setgray_ systemdict/setgray get def
        /_fill_ systemdict/fill get def
        /_image_ systemdict/image get def
      } ifelse
    } bd
    /terminate
    {
      currentdict Adobe_blend_AI5_vars eq
      {
     end
      currentdict Adobe_blend_AI5 eq
      {
     end
    } if
  } if
} bd
/_compositeSpotDevice where
{
 begin
    _compositeSpotDevice 0 ne {userdict /composite? true put} if
 end
}
{
  /_compositeSpotDevice 0 def
} ifelse

/nullString () def
/d255 256 array def
0 1 255
{
  d255 exch dup 255 div put
} bind for
/d255- 256 array def
0 1 255
{
  d255- exch 1 d255 2 index get sub put
} bind for
/dUserSpace matrix defaultmatrix def
currentdict /Adobe_blend_AI5_vars 89 dict dup begin
put
{
  /f /F /s /S /b /B
}
{
  null def
} bind forall
/byte 1 string def
/sSave null def
/setSSave
{
  save /sSave exch store
} bind def
/Bm null def
/doBlend null def
/startC? false def
/endC? false def
/fCMYK? null def
/startTint 0 def
/endTint 0 def
/bSMatrix matrix def
/bUMatrix matrix def
/dMatrix matrix def
/inLine? true def
/pTState? false def
/bHi? false def
/yHi 0 def
/xHi 0 def
/noImg /lv1Fix where
{
  pop lv1Fix
}
{
  false
} ifelse
def
/ccAry1 5 array def
/ccTint 0 def
/spotColor? false def
/colorimage? true def
[
/tint1Data
/tint2Data
/spotDict
/bAxis
/ubAxis
/pChange
/optimize?
/nSamples
/sInc
/blendProc
/_bn
/xBCInc
/yBCInc
/bInc
/bRender
/cBName
/cBType
/nColors
/color?
/blend?
/colorType
/cData
/cDataLen
/bDataLen
/rampPoint
/midPoint
/endPoint
/blendLength
/blackData
/yeData
/mgData
/cyData
/cnt1
/ndx
/_fill
/tmp
counttomark
{
  null def
} bind
repeat
pop
currentdict
end
currentdict
end
exch
begin
begin
/unitSq
{
  0 0 moveto 0 1 lineto 1 1 lineto 1 0 lineto closepath
} bd
/gMark
{
  counttomark 2 add -1 roll
} bd
/setCustomColor
{
  dup /ccTint exch store
  1 exch sub 6 1 roll
  ccAry1 astore
  exch setcustomcolor
} bd
/currentCustomColor
{
  ccAry1 aload pop ccTint
} bd
/nsetcustomcolor where
{
  pop
}
{
  /nsetcustomcolor
  {
    pop setcmykcolor
  } bd
} ifelse
/nsetcustomcolorend where
{
  pop
}
{
  /nsetcustomcolorend
  {
  } bd
} ifelse
/setBSpace
{
  newpath bUMatrix astore concat unitSq
} bd
/setCStop
{
  dup 0 eq
  {
    pop

    spotColor?
      {
      dup 1 exch sub /ccTint exch def
      ccAry1 4 /Black put
      } if
    setgray
  }
  {
    1 eq
    {
      setcmykcolor
    }
    {
      composite? not colorType 2 lt and
      {
        forceCMYK
      }
      {
        setCustomColor
      } ifelse
    } ifelse
  } ifelse
} bd
/makeByte
{
  /tmp 0 store
  255 mul cvi
  8 string 8
  {
    dup tmp 3 index put /tmp tmp 1 add store
  } repeat
  exch pop
} bd
/setImgSpace
{
  cDataLen 1 8
  2 index 0 0 1 0 0 dMatrix astore
} bd
/bwImage
{
  setImgSpace cData /_image_ load
  {
    exec
  } stopped
  {
    $error /errorname get /undefinedresult ne
    {
      stop
    }
    {
      pop pop pop pop pop
    } ifelse
  } if
} bd
level2?
{
  /bFill
  {
    _fill
  } def
  /bCImg
  {
    /cDataLen bDataLen store
    setImgSpace
    setSSave
    expandSpot
    cyData mgData yeData cData
    expandCMYK
    true 4 spotDict
    {
      ncolorimage
    } stopped
    {
      $error /errorname get /undefinedresult ne
      {
        stop
      }
      {
        10
        {
          pop
        } repeat
      } ifelse
    } if
    sSave restore
  } bd
} if
/expandOne
{
      dup type /stringtype ne
      {
        cDataLen string
        exch
        dup 0 ne
        {
          255 mul cvi
          0 1 cDataLen 1 sub
          {
            3 copy
            exch put pop
          } for
        } if
        pop
      } if
} bd
/expandSpot
{
  spotColor?
  {
    spotDict begin
      spot1 begin
        tintImage type /nulltype ne
        {
          tintImage expandOne /tintImage exch def
        } if
      end
      spot2 begin
        tintImage type /nulltype ne
        {
          tintImage expandOne /tintImage exch def
        } if
      end
   end
  } if
} bd
/expandCMYK
{
  4
  {
    expandOne 4 1 roll
  } repeat
} bd
/colorimage where dup
{
  exch pop

  /ncolorimage where
  {
    pop
  }
  {
    /ncolorimage {pop colorimage} bd
  } ifelse
} if
not
{
  /ncolorimage where
  {
    pop
  }
  {
    /colorimage? false store
    /ncolorimage
    {
      pop pop pop

    setSSave
    /blackData xs
    /yeData xs
    /mgData xs
    /cyData xs
    /cnt1 0 store
    [
    byte dup 0
    cyData dup type /stringtype eq
    {
      /cnt1 cvx /get cvx d255 /exch cvx /get cvx .3 /mul cvx
    }
    {
      .3 mul
    } ifelse
    mgData dup type /stringtype eq
    {
      /cnt1 cvx /get cvx d255 /exch cvx /get cvx .59 /mul cvx
    }
    {
      .59 mul
    } ifelse
    yeData dup type /stringtype eq
    {
      /cnt1 cvx /get cvx d255 /exch cvx /get cvx .11 /mul cvx
    }
    {
      .11 mul
    } ifelse
    blackData dup type /stringtype eq
    {
      /cnt1 cvx /get cvx d255 /exch cvx /get cvx
    } if
    /add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
    /dup cvx 0 /lt cvx
    {
      pop 0
    } /if cvx
    /dup cvx 1 /gt cvx
    {
      pop 1
    } /if cvx
    255 /mul cvx /cvi cvx
    256 /mod cvx
    /dup cvx 0 /lt cvx
    {
      pop 0
    } /if cvx
    /put cvx
    /cnt1 dup cvx 1 /add cvx /store cvx
    ] cvx
    bind
      _image_
    sSave restore
  } bd
  } ifelse
} if
level2? not
{
  /bCImg
  {
    /cDataLen bDataLen store
    setImgSpace
    setSSave
    expandSpot
    cyData mgData yeData cData
    colorimage?
    {
      expandCMYK
    } if
    true 4 spotDict
    {
      ncolorimage
    } stopped
    {
      $error /errorname get /undefinedresult ne
      {
        stop
      }
      {
        10
        {
          pop
        } repeat
      } ifelse
    } if
    sSave restore
  } bd
  /bwFill
  {
    setSSave
    /cDataLen 8 store
    /cData currentgray makeByte store
    bwImage
    sSave restore
  } bd
  /c1ImgFill
  {
    setSSave
    /cDataLen 8 store
    setImgSpace
    spotColor?
    {
      spotDict begin
        spot1 begin
          currentCustomColor makeByte /tintImage exch def
          /name exch def
          /spot_K exch def
          /spot_Y exch def
          /spot_M exch def
          /spot_C exch def
       end
        spot2 initSpotData
     end
    } if
    currentcmykcolor
    4
    {
      makeByte 4 1 roll
    } repeat
    true 4 spotDict
    {
      ncolorimage
    } stopped
    {
      $error /errorname get /undefinedresult ne
      {
        stop
      }
      {
        10
        {
          pop
        } repeat
      } ifelse
    } if
    sSave restore
  } bd
  /bFill
  noImg
  {
    {
      _fill
    }
  }
  {
    {
      color?
      {
        c1ImgFill
      }
      {
        bwFill
      } ifelse
    }
  } ifelse
  bd
} if
composite?
{
  /bCFun
  {
    color?
    {
      cyData dup type /stringtype eq
      {
        /ndx cvx /get cvx d255 /exch cvx /get cvx
      } if
      mgData dup type /stringtype eq
      {
        /ndx cvx /get cvx d255 /exch cvx /get cvx
      } if
      yeData dup type /stringtype eq
      {
        /ndx cvx /get cvx d255 /exch cvx /get cvx
      } if
      cData dup type /stringtype eq
      {
        /ndx cvx /get cvx d255 /exch cvx /get cvx
      } if
      spotColor?
      {
        spotDict begin
          /spotDict cvx /begin cvx
          spot1 begin
            tintImage dup type /stringtype eq
            {
              /ndx cvx /get cvx d255- /exch cvx /get cvx
            }
            {
              dup type /nulltype ne
              {
                name type /nametype ne {1 exch sub} if
              } if
            } ifelse
         end
          /spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
          spot2 begin
            tintImage dup type /stringtype eq
            {
              /ndx cvx /get cvx d255- /exch cvx /get cvx
            }
            {
              dup type /nulltype ne
              {
                name type /nametype ne {1 exch sub} if
              } if
            } ifelse
         end
          /spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
          /end cvx
       end
        /spotDict cvx
        /nsetcustomcolor cvx
      }
      {
        /setcmykcolor cvx
      } ifelse
    }
    {
      cData /ndx cvx /get cvx
      d255 /exch cvx /get cvx
      /setgray cvx
    } ifelse
  } bd
  /Bc
  {
    newpath
    gsave
    setBSpace
    nColors 1 eq
    {
      pop pop
      setCStop
    } if
    bFill
    grestore
  } bd
  /linealBm
  {
    /nColors dup load 1 sub store
    newpath
    gsave
    setBSpace
    blend?
    {
      linImg
    }
    {
      bFill
    } ifelse
    grestore
    nColors 1 gt
    {
      getRData
    } if
  } bd
  /rdBm
  {
    /nColors dup load 1 sub store
    _fill
    gsave
    bUMatrix astore concat
    bHi?
    {
      xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
      rampPoint 1 lt
      {
        1 rampPoint sub dup xHi mul exch yHi mul translate
      } if
    } if
    nColors
    {
      0 0 rampPoint 0 360 arc
      _fill
      blend? bHi? or
      {
        rdBlend
      } if
      nColors 1 gt
      {
        getRData
      } if
      /nColors dup load 1 sub store
    } repeat
    /nColors 1 store
    grestore
  } bd
  /cGetRData
  {
    setCStop
    /blend?
    cData type /stringtype eq
    dup not color? and
    {
      pop
      cyData type /stringtype eq
      mgData type /stringtype eq
      yeData type /stringtype eq
      or or
    } if
    store
  } def
  /cGetRData
} if
/eCStop
{
  mark
  1 index 3 mul 3 add dup 8 gt
  {
    pop 8
  } if
  1 roll
  cleartomark
} bd
composite? not
{
  /knockOut
  level2?
  {
    {
      0 0 0 0 setcmykcolor _fill
    }
  }
  {
    /bFill noImg
    {
      {
        _fill
      }
    }
    {
      {
        _of true eq
        {
          currentgray 1 ne
          {
            bwFill
          } if
        }
        {
          bwFill
        } ifelse
      }
    } ifelse
    def
    /whiteByte 1 makeByte def
    noImg
    {
      {
        0 0 0 0 setcmykcolor _fill
      }
    }
    {
      {
        cBType 0 eq
        {
          setSSave
          /cData whiteByte store
          /cDataLen 8 store
          bwImage
          sSave restore
        }
        {
          _fill
        } ifelse
      }
    } ifelse
  } ifelse
  bd
  /bCFun
  {
    cData dup type /stringtype ne
    {
      color?
      {
        1 exch sub
      } if
    }
    {
      /ndx cvx /get cvx
      color? customColor? not and
      {
        d255-
      }
      {
        d255
      } ifelse
      /exch cvx /get cvx
    } ifelse
    /_setgray_ cvx
  } bd
  /eCCBlend
  {
    dup 3 eq
    {
      pop
      mark 7 1 roll
      6 copy ccThrough? dup /blend? xs
      {
        /startC? true store
        setCustomColor
        customColor?
        {
          /cData tint1Data store
          setCDataLen
        } if
        /endC?
        3 index 3 eq
        {
          4 index 1 ne
        }
        {
          false
        } ifelse
        store
      } if
      cleartomark
      stop
    } if
    1 eq
    {
      pop pop pop
    } if
    pop
    /startC? false store
    6
    {
      8 index
    } repeat
    ccThrough? dup /blend? xs
    {
      /endC? true store
      blend? not
      {
        stop
      } if
      customColor?
      {
        /cData tint1Data store
        setCDataLen
      } if
    } if
  } bd
  /handleOP
  {
    _of not
    {
      knockOut
    } if
  } bd
  /handleROP
  {
    _of not
    {
      0 0 0 0 setcmykcolor _fill
    }
    {
      newpath
    } ifelse
  } bd
  /rdBm
  {
    /nColors dup load 1 sub store
    blend?
    {
      _fill
    }
    {
      handleROP
    } ifelse
    gsave
    bUMatrix astore concat
    bHi?
    {
      xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
      rampPoint 1 lt
      {
        1 rampPoint sub dup xHi mul exch yHi mul translate
      } if
    } if
    nColors
    {
      0 0 rampPoint 0 360 arc
      blend?
      {
        cData type /stringtype ne bHi? not and
        {
          cData color?
          {
            1 exch sub
          } if
          _setgray_
          _fill_
        }
        {
          cData type /stringtype ne
          {
            /cDataLen 1 store
            /bDataLen 1 store
          } if
          rdBlend
        } ifelse
      }
      {

        handleROP

        pTState?
        {
          /bAxis rampPoint endPoint sub store
          xHi bAxis mul yHi bAxis mul translate
        } if
      } ifelse

      nColors 1 gt
      {
        getRData
      } if
      /nColors dup load 1 sub store
    } repeat
    /nColors 1 store
    grestore
  } bd
  /ccThrough?
  {
    gsave
    pop 0 setCustomColor
    currentcmykcolor
    grestore
    anyColor?
  } bd
  /forceCMYK
  {
    exch pop
    1 exch sub 5 1 roll
    4
    {
      4 index mul 4 1 roll
    } repeat
    0
    cCMYKData dup /cData ne
    {
      dup /yeData eq
      {
        pop 1 add
      }
      {
        /mgData eq
        {
          2
        }
        {
          3
        } ifelse
        add
      } ifelse
      0
    } if
    pop
    index
    0 eq
    {
      pop pop pop pop 0 0 0 0
    } if
    setcmykcolor
    pop
    /fCMYK? true store
  } bd
  /endCapSepBc
  {
    pop pop
    dup 0 eq
    {
      pop
      setgray
    }
    {
      1 eq
      {
        setcmykcolor
      }
      {
        colorType 1 eq
        {
          forceCMYK
        }
        {
          fCMYK?
          {
            forceCMYK
          }
          {
            setCustomColor
          } ifelse
        } ifelse
      } ifelse
    } ifelse
    currentcmykcolor anyColor?
    blend? and
    {
      bFill
    }
    {
      handleOP
    } ifelse

  } bd
} if
/cCMYKData 0 def
composite? dup not
{
  pop customColor?
} if
not
{
  /cCMYKData
  /cyData /mgData /yeData /cData
  black? not
  {
    yellow?
    {
      exch
    }
    {
      magenta?
      {
        3
      }
      {
        4
      } ifelse
      -1 roll
    } ifelse
  } if
  4 1 roll pop pop pop
  store
  /Bc
  {
    gsave
    setBSpace
    nColors 1 gt
    {

      blend? currentcmykcolor anyColor? and
      {
        bFill
      }
      {
        handleOP
      } ifelse
    }
    {
      endCapSepBc
    } ifelse
    grestore
    newpath
  } bd
  /linealBm
  {
    /nColors dup load 1 sub store
    newpath
    gsave
    setBSpace
    blend?
    {
      cCMYKData load dup type /stringtype eq
      {
        dup length /cDataLen xs
        /cData xs
        gsave
        colorType 0 ne noImg not and
        {
          invertXfer
        } if
        linImg
        grestore
      }
      {
        pop bFill
      } ifelse
    }
    {
      handleOP
    } ifelse
    grestore
    nColors 1 gt
    {
      getRData
    } if
  } bd
  /cmykGetRData
  {
    /fCMYK? false store
    blend?
    {
      {
        cmykDataProcs colorType get exec
      } stopped
      pop
      blend?
      {
        /cData cCMYKData load store
        setCDataLen
      } if
    } if
  } def
  /cmykDataProcs
  [
  {
    pop
    black? dup /blend? xs
    {
      setgray
      0
    } if
    pop
  }
  {
    cCMYKData load dup type /stringtype ne
    {
      0 0 0
      cyan? not
      {
        4 magenta?
        {
          1
        }
        {
          yellow?
          {
            2
          }
          {
            3
          } ifelse
        } ifelse
        roll
      } if
      4 copy add add add 0 eq
      {
        /blend? false store
      } if

      setcmykcolor
      /startC? true store
      /endC? true store
      eCStop
      stop
    } if
    pop
    dup 0 eq
    {
      pop
      setgray
    }
    {
      1 eq
      {
        setcmykcolor
      }
      {
        forceCMYK
      } ifelse
    } ifelse
  } bind
  /eCCBlend load
  {
    cBType 1 eq
    {
      tint1Data tint2Data
      /tint1Data xs
      /tint2Data xs
    } if
    0 eq
    {
      black?
      {
        setgray
      }
      {
        0 0 0 4 -1 roll 1 exch sub setcmykcolor
      } ifelse
      black?
      {
        /blend? true store
      } if
      6
      {
        8 index
      } repeat
      ccThrough?
      {
        /blend? true store
      }
      {
        black?
        {
          /cData tint1Data store
          setCDataLen
        }
        {
          /blend? false store
        } ifelse
      } ifelse
    }
    {
      mark 7 1 roll
      6 copy ccThrough?
      {
        forceCMYK
        pop
        stop
      } if
      9 index 0 eq
      {
        black? dup /blend? xs
        {
          pop 1 setgray
          /cData tint2Data store
          setCDataLen
          0
        } if
        pop
      }
      {
        /blend?
        6
        {
          16 index
        } repeat
        ccThrough?
        store
        blend?
        {
          forceCMYK
        } if
      } ifelse
      cleartomark
    } ifelse
  } bind
  ] def
  /cmykGetRData
} if
composite? dup not
{
  pop isCMYKSep?
} if
not
{
  /endCapSepBc
  {
    /white? false store
    pop pop
    dup 0 eq
    {
      pop
      /white? 1 index 1 eq store
      setgray
    }
    {
      1 eq
      {
        setcmykcolor
      }
      {
        setCustomColor
      } ifelse
    } ifelse
%
    currentcmykcolor anyColor?
    endC? or
    blend? and
    {
      bFill
    }
    {
      handleOP
    } ifelse
  } bd
  /Bc
  {
    gsave
    setBSpace
    nColors 1 gt
    {
      blend? startC? and
      {
        bFill
      }
      {
        handleOP
      } ifelse
    }
    {
      endCapSepBc
    } ifelse
    grestore
    newpath
  } bd
  /linealBm
  {
    /nColors dup load 1 sub store
    newpath
    gsave
    setBSpace
    blend?
    {
      cData type /stringtype eq
      {
        linImg
      }
      {
        bFill
      } ifelse
    }
    {
      handleOP
    } ifelse
    grestore
    nColors 1 gt
    {
      getRData
    } if
  } bd
  /discardCMY
  {
    counttomark 4 add -3 roll pop pop pop
  } bd
  /testTopCC
  {
    6 copy ccThrough?
  } bd
  /getCRamp
  {
    {
      ccDataProcs colorType 2 sub get exec
    } stopped pop
    blend? cDataLen 0 eq and
    {
      /cDataLen bDataLen store
    } if
  } bd
  /ccGetRData
  {
    /fCMYK? false store
    /startC? false store
    /endC? false store
    colorType 2 lt
    {
      /blend? false def
    } if
    blend?
    {
      getCRamp
    }
    {
      setCStop
    } ifelse
    blend?
    {
      /blend? cData 1 ne store
      blend?
      {
        cData dup type /stringtype ne
        {
          1 exch sub /cData xs 0
        } if
        pop
      } if
    } if
  } def
  /ccDataProcs
  [
  /eCCBlend load
  {
    cBType 1 eq
    {
      tint1Data tint2Data
      /tint1Data xs
      /tint2Data xs
    } if
    0 eq
    {
      /blend? false store
      pop
    }
    {
      mark 7 1 roll
      testTopCC
      {
        /blend? 1 index 1 ne store
        /startC? blend? store
        /endC? false store
        blend? not
        {
          cleartomark stop
        } if
        /cData tint1Data store
        setCDataLen
        setCustomColor
        pop
        stop
      } if
      cleartomark
    } ifelse
    2 index 0 eq
    {
      /blend? false store
    }
    {
      mark 6
      {
        9 index
      } repeat
      testTopCC dup /blend? xs
      {
        /blend? 1 index 1 ne store
        /endC? blend? store
        /startC? false store
        blend? not
        {
          cleartomark stop
        } if
        /cData tint2Data store
        setCDataLen
      } if
      cleartomark
    } ifelse
  } bind
  ] def
  /ccGetRData
} if
load Adobe_blend_AI5_vars /getData 3 -1 roll put
/setCDataLen
{
  /cDataLen 0 cData dup type /stringtype eq
  {
    length exch
  } if
  pop store
} bd
/initSpotData
{
 begin
    /name null def
    /tintImage null def
    /tintValue null def
    /spot_C  null def
    /spot_M  null def
    /spot_Y  null def
    /spot_K  null def
 end
} bd
/getRData
{
  /colorType gMark store
  _compositeSpotDevice 0 ne
  {
    spotDict begin
      spot1 initSpotData
      spot2 initSpotData
   end
    /spotColor? colorType 2 eq colorType 3 eq or def
  }
  {
    /spotColor? false store
  } ifelse
  /blend? true store
  0 0 0 0 setcmykcolor
  100 div /rampPoint xs
% (between 13 and 87%)
  100 div /midPoint xs
  dup 0 eq
  {
    2
  }
  {
    dup 1 eq
    {
      5
    }
    {
      _compositeSpotDevice 0 ne
      {
        spotDict begin
          spot1 begin
            /name 3 index def
            /spot_K 4 index def
            /spot_Y 5 index def
            /spot_M 6 index def
            /spot_C 7 index def
         end
       end
      } if
      7
    } ifelse
  } ifelse
  /tmp exch def
  tmp index 100 div /endPoint xs
  _compositeSpotDevice 0 ne
  {
    tmp 2 add index 3 eq
    {
      /tmp tmp 4 add def
      tmp index dup
      spotDict begin
        spot1/name get ne
        {
          spot2 begin
            /name exch def
            /spot_K tmp 2 add index def
            /spot_Y tmp 3 add index def
            /spot_M tmp 4 add index def
            /spot_C tmp 5 add index def
         end
        }
        {
          pop
        } ifelse
     end
    } if
  } if
  /color? colorType 0 gt store

  colorType 3 eq
  {
    /tint2Data gMark store
  } if

  colorType 2 ge
  {
    /tint1Data gMark store
  } if
  _compositeSpotDevice 0 ne
  {
    spotDict begin

      colorType 2 ge
      {
        colorType 3 eq
        {
          spot2 begin
            /tintImage cBType 0 eq {tint2Data} {tint1Data} ifelse def
            name null eq {/name /Black def} if
         end
        } if
        spot1 begin
          /tintImage cBType 0 eq colorType 2 eq or {tint1Data} {tint2Data} ifelse def
          colorType 2 eq
          {
            name null eq
            {
              /name spot2/name get def
              spot2/name null put
            } if
          }
          {
            name null eq {/name /Black def} if
          } ifelse
       end
      } if
   end
  } if

  /cData gMark store
  setCDataLen
  colorType 0 gt
  {
    counttomark 4 add -3 roll
    /yeData xs
    /mgData xs
    /cyData xs
  } if
  blend?
  {
    /bDataLen
    cDataLen dup 0 eq color? and
    {
      [
      cyData mgData yeData
      ]
      {
        dup type /stringtype eq
        {
          length exch pop exit
        } if
        pop
      } forall
    } if
    store
    bDataLen 0 eq
    {
      /bDataLen 1 store
    } if
    getData
    blend?
    {
      composite? cDataLen 0 eq and
      {
        /cDataLen bDataLen store
      } if
    } if
  }
  {
    setCStop
  } ifelse
} bd
/Bg
{
  0 0 0 0 setcmykcolor
  6
  {
    pop
  } repeat
  /blendLength xs
  pop pop pop
  /cBName xs
  /bRender xs
  bRender 2 ne
  {
    composite? not
    {
      _of setoverprint
    } if
    _eo {eoclip} {clip} ifelse
    _bn cBName 2 copy known
    {
      get
      mark exch aload pop
      /cBType xs
      /nColors xs
      mark exch aload pop
      0 0
    } if
    pop pop
    getRData
    cBType 0 eq
    {
      /linealBm
    }
    {
      bHi?
      {
        /pTState? nColors 2 gt store
      } if
      /doBlend /rdBlend load store
      /rdBm
    } ifelse
  }
  {
    inLine? not
    {
      mark mark
    } if
    /Bc dup
    {
      cleartomark mark
    } bd
    /nullProc
  } ifelse
  load /Bm xs
} bd
/linImg
noImg
{
  {
    newpath doRctBlend
  }
}
{
  {
    /doBlend
    color? composite? and
    {
      /bCImg
    }
    {
      /bwImage
    } ifelse
    load
    store

    0 0 moveto
    tRectOK? composite? and
    {
      {
        mark
        0 1 dtransform atan cvi 90 mod 0 eq
        1 0 dtransform atan cvi 90 mod 0 eq
      } stopped
      {
        cleartomark
      }
      {
        and exch pop
        {
          newpath
          doRctBlend
        }
        {
          doBlend
        } ifelse
      } ifelse
    }
    {
      doBlend
    } ifelse
  }
} ifelse
bd
/doRctBlend
{
  gsave
  /sInc 1 store
  /nSamples bDataLen store
  /bInc 1 bDataLen div store
  /ubAxis 1 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt store
  /pChange ubAxis 0 eq
  {
    0
  }
  {
    bDataLen ubAxis div
  } ifelse
  store
  pChange .5 gt noImg not and dup /optimize? xs
  {
    /nSamples ubAxis 2 div round cvi dup 1 le
    {
      pop 2
    } if
    store
    /bInc 1 nSamples div store
    /sInc bDataLen 1 sub nSamples 1 sub div store
  } if
  0
  nSamples
  [
  /dup cvx
  optimize?
  {
    /round cvx /cvi cvx
  } if
  /ndx /exch cvx /store cvx
  bCFun
  /rectfill where dup
  {
    exch pop _compositeSpotDevice 1 ne and
  } if
  {
    0 0 bInc 1 /rectfill cvx
  }
  {
    0 0 /moveto cvx
    bInc 0 /lineto cvx
    bInc 1 /lineto cvx
    0 1 /lineto cvx
    /closepath cvx
    /_fill_ cvx
  } ifelse
  bInc 0 /translate cvx
  sInc /add cvx
  ] cvx
  bind
  repeat
  pop
  spotColor? {nsetcustomcolorend} if

  grestore
} bd
/rdPrep
{
  /nSamples bDataLen dup 0 eq
  {
    pop 1
  } if
  store
  /sInc -1 store
  /bAxis rampPoint endPoint sub store
  /bInc bAxis bDataLen div neg store
  /optimize? false store
  tRectOK?
  {
    /ubAxis
    bAxis 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
    0 bAxis dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
    2 copy lt
    {
      exch
    } if
    pop store
    /pChange ubAxis 0 eq
    {
      0
    }
    {
      bDataLen ubAxis div
    } ifelse
    store
    pChange .5 gt noImg not and dup /optimize? xs
    {
      /nSamples ubAxis 2 div round cvi dup 1 le
      {
        pop 2
      } if
      store
      /bInc bAxis nSamples div neg store
      /sInc bDataLen 1 sub nSamples 1 sub div neg store
    } if
  } if
  bHi?
  {
    /xBCInc xHi bAxis mul nSamples div store
    /yBCInc yHi bAxis mul nSamples div store
  } if
} bd
/rdBlend
{
  newpath
  gsave
  rdPrep
  rampPoint
  bDataLen 1 sub
  nSamples
  [
  /dup cvx
  optimize?
  {
    /round cvx /cvi cvx
  } if
  /ndx /exch cvx /store cvx
  bCFun
  0 0 3 /index cvx 0 360 /arc cvx /_fill_ cvx
  /exch cvx bInc /add cvx /exch cvx
  sInc /add cvx
  bHi?
  {
    xBCInc yBCInc /translate cvx
  } if
  ] cvx
  bind
  repeat
  pop pop
  spotColor? {nsetcustomcolorend} if
  grestore
  pTState?
  {
    xHi bAxis mul yHi bAxis mul translate
  } if
} bd
/Bh
{
  pop pop
  /pTState? false store
  2 copy 0 ne exch 0 ne or dup /bHi? xs
  {
    /yHi xs
    /xHi xs
    0 0
  } if
  pop pop
} bd
/BD
{
  inLine? not
  {
    ] nColors cBType
    ] _bn cBName 3 -1 roll put
 end
} if
} bd
/Bn
{
1 add dict
dup nullString null put
/_bn xs
} bd
/Bd
{
Adobe_blend_AI5_vars begin
  3 -1 roll dup nullString eq dup
  {
    setSSave
  } if
  /inLine? exch def
  /cBName exch def
  /nColors exch def
  /cBType exch def
} bd
/Bb
{
  sSave null eq
  {
    Adobe_blend_AI5_vars begin
    setSSave
  } if
  composite?
  {
    /_fill /fill load store
  }
  {
    /__fill /fill load store
      /_fill
      {
        _of true eq
        {
          currentgray 1 ne
          {
            __fill
          } if
        }
        {
          __fill
        } ifelse
      } def
  } ifelse
  /fill
  {
  } def
  } bd
  /BB
  {
  /cBType xs
  cleartomark cleartomark
  cBType dup
  bRender
  sSave dup type /savetype eq
  {
    restore 0
  } if
  pop
  currentdict Adobe_blend_AI5_vars eq
  {
   end
  } if
  2 ne exch 0 gt and
  {
    2 eq
    {
      s
    }
    {
      S
    } ifelse
  }
  {
    pop newpath
  } ifelse
} bd
currentdict readonly pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
  userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
  dup null eq
  {
    pop
    _dp 0 ne
    {
      0 1 _dp 1 sub _dl mod
      {
        _da exch get 3 get
      } for
      _dp 1 sub _dl mod 1 add packedarray
      _da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
      definepattern pop
    } if
  }
  {
    _dp 0 ne _dp _dl mod 0 eq and
    {
      null dp
    } if
    7 packedarray _da exch _dp _dl mod exch put
    _dp _dl mod _da 0 get 4 get 2 packedarray
    /_dp _dp 1 add def
  } ifelse
} def
/E
{
  _ed begin
  dup 0 get type /arraytype ne
  {
    0
    {
      dup 1 add index type /arraytype eq
      {
        1 add
      }
      {
        exit
      } ifelse
    } loop
    array astore
  } if
  /_dd exch def
  /_ury exch def
  /_urx exch def
  /_lly exch def
  /_llx exch def
  /_n exch def
  /_y 0 def
  /_dl 4 def
  /_dp 0 def
  /_da _dl array def
  0 1 _dd length 1 sub
  {
    /_d exch _dd exch get def
    0 2 _d length 2 sub
    {
      /_x exch def
      /_c _d _x get _ ne def
      /_r _d _x 1 add get cvlit def
      _r _ ne
      {
        _urx _llx sub _ury _lly sub
        [
        1 0 0 1 0 0
        ]
        [
        /save cvx
        _llx neg _lly neg /translate cvx
        _c
        {
          nc /begin cvx
        } if
        _r dup type /stringtype eq
        {
          cvx
        }
        {
          {
            exec
          } /forall cvx
        } ifelse
        _c
        {
          /end cvx
        } if
        /restore cvx
        ] cvx
        /_fn 12 _n length add string def
        _y _fn cvs pop
        /_y _y 1 add def
        _fn 12 _n putinterval
        _fn _c false dp
        _d exch _x 1 add exch put
      } if
    } for
  } for
  null dp
  _n _dd /_pd
 end
  xput
} def
/fc
{
  _fm dup concatmatrix pop
} def
/p
{
  /_fm exch ddef
  9 -2 roll _pm translate fc
  7 -2 roll _pm scale fc
  5 -1 roll _pm rotate fc
  4 -2 roll exch 0 ne
  {
    dup _pm rotate fc
    1 -1 _pm scale fc
    neg _pm rotate fc
  }
  {
    pop
  } ifelse
  dup _pm rotate fc
  exch dup sin exch cos div 1 0 0 1 0 6 2 roll
  _pm astore fc
  neg _pm rotate fc
  _pd exch get /_fdd exch ddef
  /_pf
  {
    save
    /_doClip 0 ddef
    0 1 _fdd length 1 sub
    {
      /_fd exch _fdd exch get ddef
      _fd
      0 2 _fd length 2 sub
      {
        gsave
        2 copy get dup _ ne
        {
          cvx exec _fc
        }
        {
          pop
        } ifelse
        2 copy 1 add get dup _ ne
        {
          aload pop findfont _fm
          patternfill
        }
        {
          pop
          fill
        } ifelse
        grestore
        pop
      } for
      pop
    } for
    restore
    newpath
  } ddef
  /_psf
  {
    save
    /_doClip 0 ddef
    0 1 _fdd length 1 sub
    {
      /_fd exch _fdd exch get ddef
      _fd
      0 2 _fd length 2 sub
      {
        gsave
        2 copy get dup _ ne
        {
          cvx exec _fc
        }
        {
          pop
        } ifelse
        2 copy 1 add get dup _ ne
        {
          aload pop findfont _fm
          9 copy 6 npop patternashow
        }
        {
          pop
          6 copy 3 npop hvashow
        } ifelse
        grestore
        pop
      } for
      pop
    } for
    restore
    sw rmoveto
  } ddef
  /_pjsf
  {
    save
    /_doClip 0 ddef
    0 1 _fdd length 1 sub
    {
      /_fd exch _fdd exch get ddef
      _fd
      0 2 _fd length 2 sub
      {
        gsave
        2 copy get dup _ ne
        {
          cvx exec _fc
        }
        {
          pop
        } ifelse
        2 copy 1 add get dup _ ne
        {
          aload pop findfont _fm
          12 copy 6 npop patternawidthshow
        }
        {
          pop 9 copy 3 npop hvawidthshow
        } ifelse
        grestore
        pop
      } for
      pop
    } for
    restore
    swj rmoveto
  } ddef
  /_lp /none ddef
} def
/sc
{
  _sm dup concatmatrix pop
} def
/P
{
  /_sm exch ddef
  9 -2 roll _pm translate sc
  7 -2 roll _pm scale sc
  5 -1 roll _pm rotate sc
  4 -2 roll exch 0 ne
  {
    dup _pm rotate sc
    1 -1 _pm scale sc
    neg _pm rotate sc
  }
  {
    pop
  } ifelse
  dup _pm rotate sc
  exch dup sin exch cos div 1 0 0 1 0 6 2 roll
  _pm astore sc
  neg _pm rotate sc
  _pd exch get /_sdd exch ddef
  /_ps
  {
    save
    /_doClip 0 ddef
    0 1 _sdd length 1 sub
    {
      /_sd exch _sdd exch get ddef
      _sd
      0 2 _sd length 2 sub
      {
        gsave
        2 copy get dup _ ne
        {
          cvx exec _sc
        }
        {
          pop
        } ifelse
        2 copy 1 add get dup _ ne
        {
          aload pop findfont _sm
          patternstroke
        }
        {
          pop stroke
        } ifelse
        grestore
        pop
      } for
      pop
    } for
    restore
    newpath
  } ddef
  /_pss
  {
    save
    /_doClip 0 ddef
    0 1 _sdd length 1 sub
    {
      /_sd exch _sdd exch get ddef
      _sd
      0 2 _sd length 2 sub
      {
        gsave
        2 copy get dup _ ne
        {
          cvx exec _sc
        }
        {
          pop
        } ifelse
        2 copy 1 add get dup _ ne
        {
          aload pop findfont _sm
          10 copy 6 npop patternashowstroke
        }
        {
          pop 7 copy 3 npop ss
        } ifelse
        grestore
        pop
      } for
      pop
    } for
    restore
    pop sw rmoveto
  } ddef
  /_pjss
  {
    save
    /_doClip 0 ddef
    0 1 _sdd length 1 sub
    {
      /_sd exch _sdd exch get ddef
      _sd
      0 2 _sd length 2 sub
      {
        gsave
        2 copy get dup _ ne
        {
          cvx exec _sc
        }
        {
          pop
        } ifelse
        2 copy 1 add get dup _ ne
        {
          aload pop findfont _sm
          13 copy 6 npop patternawidthshowstroke
        }
        {
          pop 10 copy 3 npop jss
        } ifelse
        grestore
        pop
      } for
      pop
    } for
    restore
    pop swj rmoveto
  } ddef
  /_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
  /definepattern where
  {
    pop
  }
  {
   begin
   begin
    Adobe_pattern_AI5 begin
    Adobe_pattern_AI5
    {
      dup xcheck
      {
        bind
      } if
      pop pop
    } forall
    mark
    cachestatus 7 1 roll pop pop pop pop exch pop exch
    {
      {
        10000 add
        dup 2 index gt
        {
          exit
        } if
        dup setcachelimit
      } loop
    } stopped
    cleartomark
   end

   end
   end

    Adobe_pattern_AI5 begin
  } ifelse
} def
/terminate
{
  currentdict Adobe_pattern_AI5 eq
  {
   end
  } if
} def
errordict
/nocurrentpoint
{
  pop
  stop
} put
errordict
/invalidaccess
{
  pop
  stop
} put
/patternencoding
256 array def
0 1 255
{
  patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
  17 dict begin
  /uniform exch def
  /cache exch def
  /key exch def
  /procarray exch def
  /mtx exch matrix invertmatrix def
  /height exch def
  /width exch def
  /ctm matrix currentmatrix def
  /ptm matrix def
  /str 32 string def
  /slice 9 dict def
  slice /s 1 put
  slice /q 256 procarray length div sqrt floor cvi put
  slice /b 0 put
  /FontBBox
  [
  0 0 0 0
  ] def
  /FontMatrix mtx matrix copy def
  /Encoding patternencoding def
  /FontType 3 def
  /BuildChar
  {
    exch
   begin
    /setstrokeadjust where {pop true setstrokeadjust} if
    slice begin
    dup q dup mul mod s idiv /i exch def
    dup q dup mul mod s mod /j exch def
    q dup mul idiv procarray exch get
    /xl j width s div mul def
    /xg j 1 add width s div mul def
    /yl i height s div mul def
    /yg i 1 add height s div mul def
    uniform
    {
      1 1
    }
    {
      width 0 dtransform
      dup mul exch dup mul add sqrt dup 1 add exch div
      0 height dtransform
      dup mul exch dup mul add sqrt dup 1 add exch div
    } ifelse
    width 0 cache
    {
      xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
      setcachedevice
    }
    {
      setcharwidth
    } ifelse
    gsave
    scale
    newpath
    xl yl moveto
    xg yl lineto
    xg yg lineto
    xl yg lineto
    closepath
    clip
    newpath
   end
   end
    exec
    grestore
  } def
  key currentdict definefont
 end
} def
/patterncachesize
{
  gsave
  newpath
  0 0 moveto
  width 0 lineto
  width height lineto
  0 height lineto
  closepath
  patternmatrix setmatrix
  pathbbox
  exch ceiling 4 -1 roll floor sub 3 1 roll
  ceiling exch floor sub
  mul 1 add
  grestore
} def
/patterncachelimit
{
  cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
  exch dup begin
  setfont
  ctm setmatrix
  concat
  slice exch /b exch slice /q get dup mul mul put
  FontMatrix concat
  uniform
  {
    width 0 dtransform round width div exch round width div exch
    0 height dtransform round height div exch height div exch
    0 0 transform round exch round exch
    ptm astore setmatrix
  }
  {
    ptm currentmatrix pop
  } ifelse
  {
    currentpoint
  } stopped not
  {
    2 npop
    pathbbox
    true
    4 index 3 index eq
    4 index 3 index eq
    and
    {
      pop false
      {
        {
          2 npop
        }
        {
          3 npop true
        }
        {
          7 npop true
        }
        {
          pop true
        } pathforall
      } stopped
      {
        5 npop true
      } if
    } if
    {
      height div ceiling height mul 4 1 roll
      width div ceiling width mul 4 1 roll
      height div floor height mul 4 1 roll
      width div floor width mul 4 1 roll
      2 index sub height div ceiling cvi exch
      3 index sub width div ceiling cvi exch
      4 2 roll moveto
      FontMatrix mtx invertmatrix
      dup dup 4 get exch 5 get rmoveto
      ptm ptm concatmatrix pop
      slice /s
      patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
      dup slice /q get gt
      {
        pop slice /q get
      } if
      put
      0 1 slice /s get dup mul 1 sub
      {
        slice /b get add
        gsave
        0 1 str length 1 sub
        {
          str exch 2 index put
        } for
        pop
        dup
        {
          gsave
          ptm setmatrix
          1 index str length idiv
          {
            str show
          } repeat
          1 index str length mod str exch 0 exch getinterval show
          grestore
          0 height rmoveto
        } repeat
        grestore
      } for
      2 npop
    }
    {
      4 npop
    } ifelse
  } if
 end
} def
/patternclip
{
  _eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
  strokepath
} def
/patternmatrix
matrix def
/patternfill
{
  dup type /dicttype eq
  {
    Adobe_pattern_AI5 /patternmatrix get
  } if
  gsave
  patternclip
  Adobe_pattern_AI5 /patternpath get exec
  grestore
  newpath
} def
/patternstroke
{
  dup type /dicttype eq
  {
    Adobe_pattern_AI5 /patternmatrix get
  } if
  gsave
  patternstrokepath
  true
  {
    {
      {
        newpath
        moveto
      }
      {
        lineto
      }
      {
        curveto
      }
      {
        closepath
        3 copy
        Adobe_pattern_AI5 /patternfill get exec
      } pathforall
      3 npop
    } stopped
    {
      5 npop
      patternclip
      Adobe_pattern_AI5 /patternfill get exec
    } if
  }
  {
    patternclip
    Adobe_pattern_AI5 /patternfill get exec
  } ifelse
  grestore
  newpath
} def
/vpatternawidthshow
{
  6 1 roll
  /_hvay exch ddef
  /_hvax exch ddef
  /_hvwb exch ddef
  /_hvcy exch ddef
  /_hvcx exch ddef

  {
    dup cstring
    dup length 1 eq
    _charorientation 1 eq
    and
    {
      -90 rotate
      currentpoint
      _fontRotateAdjust add
      moveto
      gsave
      false charpath currentpoint
      5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
      grestore
      _fontRotateAdjust sub
      moveto
      _hvwb eq { _hvcx _hvcy rmoveto } if
      _hvax _hvay rmoveto
      90 rotate
    }
    {
      currentpoint
      _fontHeight sub
      _hvax sub
      3 index _hvwb eq { _hvcx sub } if
      currentpoint
      exch 4 index stringwidth pop 2 div sub
      exch _fontAscent sub
      moveto
      gsave
      2 index false charpath
      6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
      grestore
      newpath moveto pop pop
    } ifelse
  } cforall
  3 npop
} def
/hpatternawidthshow
{
  {
    dup cstring exch
    gsave
    3 index eq { 5 index 5 index rmoveto } if
    false charpath currentpoint
    9 index 9 index 9 index
    Adobe_pattern_AI5 /patternfill get exec
    grestore
    newpath moveto
    2 copy rmoveto
  } cforall
  8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
  6 index type /dicttype eq
  {
    Adobe_pattern_AI5 /patternmatrix get 7 1 roll
  } if
  _lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
  7 1 roll
  6 1 roll
  /_hvay exch ddef
  /_hvax exch ddef
  /_hvwb exch ddef
  /_hvcy exch ddef
  /_hvcx exch ddef
  {
    dup cstring
    dup length 1 eq
    _charorientation 1 eq
    and
    {
      -90 rotate
      currentpoint
      _fontRotateAdjust add
      moveto
      gsave
      false charpath currentpoint
      3 index setmatrix
      6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
      grestore
      _fontRotateAdjust sub
      moveto
      _hvwb eq { _hvcx _hvcy rmoveto } if
      _hvax _hvay rmoveto
      90 rotate
    }
    {
      currentpoint
      _fontHeight sub
      _hvax sub
      3 index _hvwb eq { _hvcx sub } if
      currentpoint
      exch 4 index stringwidth pop 2 div sub
      exch _fontAscent sub
      moveto
      gsave
      2 index false charpath
      4 index setmatrix
      7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
      grestore
      newpath moveto pop pop
    } ifelse
  } cforall
  4 npop
} def
/hpatternawidthshowstroke
{
  7 1 roll
  {
    dup cstring exch
    gsave
    3 index eq { 5 index 5 index rmoveto } if
    false charpath currentpoint
    7 index setmatrix
    10 index 10 index 10 index
    Adobe_pattern_AI5 /patternstroke get exec
    grestore
    newpath moveto
    2 copy rmoveto
  } cforall
  9 npop
} def
/patternashowstroke
{
  0 0 0 7 3 roll
  patternawidthshowstroke
} def
/patternawidthshowstroke
{
  7 index type /dicttype eq
  {
    patternmatrix /patternmatrix get 8 1 roll
  } if
  _lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_screens_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_blend_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
[
39/quotesingle 96/grave 130/quotesinglbase 131/florin 132/quotedblbase
133/ellipsis 134/dagger 135/daggerdbl 136/circumflex 137/perthousand 
138/Scaron 139/guilsinglleft 140/OE 145/quoteleft 146/quoteright 
147/quotedblleft 148/quotedblright 149/bullet 150/endash 151/emdash 
152/tilde 153/trademark 154/scaron 155/guilsinglright 156/oe 157/dotlessi 
159/Ydieresis 164/currency 166/brokenbar 168/dieresis 169/copyright 
170/ordfeminine 172/logicalnot 174/registered 175/macron 176/ring 
177/plusminus 178/twosuperior 179/threesuperior 180/acute 181/mu 
183/periodcentered 184/cedilla 185/onesuperior 186/ordmasculine 
188/onequarter 189/onehalf 190/threequarters 192/Agrave 193/Aacute 
194/Acircumflex 195/Atilde 196/Adieresis 197/Aring 198/AE 199/Ccedilla 
200/Egrave 201/Eacute 202/Ecircumflex 203/Edieresis 204/Igrave 205/Iacute 
206/Icircumflex 207/Idieresis 208/Eth 209/Ntilde 210/Ograve 211/Oacute 
212/Ocircumflex 213/Otilde 214/Odieresis 215/multiply 216/Oslash 
217/Ugrave 218/Uacute 219/Ucircumflex 220/Udieresis 221/Yacute 222/Thorn 
223/germandbls 224/agrave 225/aacute 226/acircumflex 227/atilde 228/adieresis 
229/aring 230/ae 231/ccedilla 232/egrave 233/eacute 234/ecircumflex 
235/edieresis 236/igrave 237/iacute 238/icircumflex 239/idieresis 
240/eth 241/ntilde 242/ograve 243/oacute 244/ocircumflex 245/otilde 
246/odieresis 247/divide 248/oslash 249/ugrave 250/uacute 251/ucircumflex 
252/udieresis 253/yacute 254/thorn 255/ydieresis
TE
%AI3_BeginEncoding: _Helvetica Helvetica
[
/_Helvetica/Helvetica 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-Bold Helvetica-Bold
[
/_Helvetica-Bold/Helvetica-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-Oblique Helvetica-Oblique
[
/_Helvetica-Oblique/Helvetica-Oblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-BoldOblique Helvetica-BoldOblique
[
/_Helvetica-BoldOblique/Helvetica-BoldOblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[
/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Bold Times-Bold
[
/_Times-Bold/Times-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[
/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-BoldItalic Times-BoldItalic
[
/_Times-BoldItalic/Times-BoldItalic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier Courier
[
/_Courier/Courier 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-Bold Courier-Bold
[
/_Courier-Bold/Courier-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-Oblique Courier-Oblique
[
/_Courier-Oblique/Courier-Oblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-BoldOblique Courier-BoldOblique
[
/_Courier-BoldOblique/Courier-BoldOblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Symbol Symbol
[
/_Symbol/Symbol 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup

1 XR

  0.000 0.000 0.000 0.000 k
 [] 0 d
0.7500 w
  0.000 0.000 0.000 1.000 K
1 j
  0.000 0.000 0.000 0.000 k
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 0.000 k
*u
  38.7613 15.1200 m
  41.2129 15.1227  43.1980 17.1084  43.2000 19.5600 C
  43.2000 33.0000 L
  43.1980 35.4537  41.2097 37.4402  38.7561 37.4400 C
  8.0352 37.4400 L
  5.5819 37.4354  3.5947 35.4402  3.6000 32.9868 C
  3.6000 19.5574 L
  3.6034 17.1057  5.5897 15.1212  8.0413 15.1200 C
  38.7613 15.1200 L
B
*U
0 To
1.0000 0.0000 0.0000 1.0000 15.4800 22.3200 0 Tp
TP
93.617021 Tz
/_Times-Bold 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(f\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 19.0800 22.3200 0 Tp
TP
90.322581 Tz
/_Times-Bold 7.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 1.000 k
(n\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 24.1200 22.3200 0 Tp
TP
90.322581 Tz
/_Times-Bold 7.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(-\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 27.0000 22.3200 0 Tp
TP
90.322581 Tz
/_Times-Bold 7.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 0.000 k
0.7500 w
  0.000 0.000 0.000 1.000 K
1 j
u
  65.6400 15.4800 m
  99.4800 15.4800 L
  99.4800 37.8000 L
  65.6400 37.8000 L
  65.6400 15.4800 L
B
  82.5600 26.6400 m
B
U
0 To
1.0000 0.0000 0.0000 1.0000 73.9200 22.6800 0 Tp
TP
93.617021 Tz
/_Times-Bold 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(n\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 80.4000 22.6800 0 Tp
TP
93.617021 Tz
/_Times-Bold 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(-\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 84.7200 22.6800 0 Tp
TP
93.617021 Tz
/_Times-Bold 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.7500 w
  0.000 0.000 0.000 1.000 K
1 J
1 j
  43.2000 26.2800 m
  58.2000 26.5200 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  65.6400 26.6400 m
  55.5600 22.9200 L
  55.4400 30.0000 L
  65.6400 26.6400 L
B
U
  0.000 0.000 0.000 0.000 k
0.7500 w
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 0.000 k
  0.000 0.000 0.000 0.000 k
*u
  165.1213 15.4800 m
  167.5729 15.4827  169.5580 17.4684  169.5600 19.9200 C
  169.5600 33.3600 L
  169.5580 35.8137  167.5697 37.8002  165.1161 37.8000 C
  135.1152 37.8000 L
  132.6619 37.7954  130.6747 35.8002  130.6800 33.3468 C
  130.6800 19.9174 L
  130.6834 17.4657  132.6697 15.4812  135.1213 15.4800 C
  165.1213 15.4800 L
B
*U
0 To
1.0000 0.0000 0.0000 1.0000 142.2000 22.6800 0 Tp
TP
93.617021 Tz
/_Times-Bold 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(f\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 145.8000 22.6800 0 Tp
TP
90.322581 Tz
/_Times-Bold 7.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 1.000 k
(n\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 150.8400 22.6800 0 Tp
TP
90.322581 Tz
/_Times-Bold 7.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(-\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 153.7200 22.6800 0 Tp
TP
90.322581 Tz
/_Times-Bold 7.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 0.000 k
0.7500 w
  0.000 0.000 0.000 1.000 K
1 j
u
  206.8800 15.1200 m
  240.7200 15.1200 L
  240.7200 37.4400 L
  206.8800 37.4400 L
  206.8800 15.1200 L
B
  223.8000 26.2800 m
B
U
0 To
1.0000 0.0000 0.0000 1.0000 215.1600 22.3200 0 Tp
TP
93.617021 Tz
/_Times-Bold 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(n\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 221.6400 22.3200 0 Tp
TP
93.617021 Tz
/_Times-Bold 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(-\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 225.9600 22.3200 0 Tp
TP
93.617021 Tz
/_Times-Bold 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.7500 w
  0.000 0.000 0.000 1.000 K
1 j
  169.5600 26.6400 m
  199.4400 26.2800 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  206.8800 26.2800 m
  196.6800 22.8000 L
  196.8000 29.8800 L
  206.8800 26.2800 L
B
U
u
0.7500 w
  0.000 0.000 0.000 1.000 K
  99.4800 26.5200 m
  123.2400 26.6400 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  130.6800 26.6400 m
  120.6000 23.0400 L
  120.6000 30.1200 L
  130.6800 26.6400 L
B
U
u
0.7500 w
  0.000 0.000 0.000 1.000 K
  240.7200 26.2800 m
  264.9600 26.2800 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  272.1600 26.2800 m
  262.0800 22.6800 L
  262.0800 29.8800 L
  272.1600 26.2800 L
B
U
u
0.7500 w
  0.000 0.000 0.000 1.000 K
  150.1200 61.9200 m
  150.1200 45.0000 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  150.1200 37.8000 m
  146.5200 47.8800 L
  153.6000 47.8800 L
  150.1200 37.8000 L
B
U
u
0.7500 w
  0.000 0.000 0.000 1.000 K
  150.1200 61.9200 m
  254.7600 61.9200 L
S
U
u
  254.7600 61.9200 m
  254.7600 26.2800 L
S
U
u
  0.000 0.000 0.000 1.000 K
  33.2400 52.9200 m
  33.2400 44.6400 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  33.2400 37.4400 m
  29.6400 47.5200 L
  36.7200 47.5200 L
  33.2400 37.4400 L
B
U
u
0.7500 w
  0.000 0.000 0.000 1.000 K
  33.2400 52.9200 m
  110.4000 52.9200 L
S
U
u
  110.4000 52.9200 m
  110.4000 26.5200 L
S
U
u
  0.000 0.000 0.000 1.000 K
  23.4000 61.9200 m
  23.4000 44.6400 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  23.4000 37.4400 m
  19.8000 47.5200 L
  26.8800 47.5200 L
  23.4000 37.4400 L
B
U
u
0.7500 w
  0.000 0.000 0.000 1.000 K
  23.4000 61.9200 m
  150.1200 61.9200 L
S
U
  0.000 0.000 0.000 0.000 k
  0.000 0.000 0.000 0.000 K
u
  264.3600 19.0800 m
  298.2000 19.0800 L
  298.2000 41.4000 L
  264.3600 41.4000 L
  264.3600 19.0800 L
B
  281.2800 30.2400 m
B
U
0 To
1.0000 0.0000 0.0000 1.0000 270.4800 24.8400 0 Tp
TP
88.888889 Tz
/_Times-Bold 15.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(.\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 274.8000 24.8400 0 Tp
TP
88.888889 Tz
/_Times-Bold 15.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
( \r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 279.1200 24.8400 0 Tp
TP
88.888889 Tz
/_Times-Bold 15.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(.\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 283.4400 24.8400 0 Tp
TP
88.888889 Tz
/_Times-Bold 15.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
( \r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 287.7600 24.8400 0 Tp
TP
88.888889 Tz
/_Times-Bold 15.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(.\r) Tx
TO
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 0.000 k
0.7500 w
  0.000 0.000 0.000 1.000 K
1 j
  0.000 0.000 0.000 0.000 k
  0.000 0.000 0.000 0.000 k
*u
  363.9613 15.4800 m
  366.4129 15.4827  368.3980 17.4684  368.4000 19.9200 C
  368.4000 33.3600 L
  368.3980 35.8137  366.4097 37.8002  363.9561 37.8000 C
  333.2352 37.8000 L
  330.7819 37.7954  328.7947 35.8002  328.8000 33.3468 C
  328.8000 19.9174 L
  328.8034 17.4657  330.7897 15.4812  333.2413 15.4800 C
  363.9613 15.4800 L
B
*U
0 To
1.0000 0.0000 0.0000 1.0000 344.2800 22.6800 0 Tp
TP
93.617021 Tz
/_Times-Bold 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(f\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 347.8800 22.6800 0 Tp
TP
94.285714 Tz
/_Times-Bold 9.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 1.000 k
(0\r) Tx
TO
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 0.000 k
0.7500 w
  0.000 0.000 0.000 1.000 K
1 j
u
  402.8400 15.1200 m
  436.6800 15.1200 L
  436.6800 37.4400 L
  402.8400 37.4400 L
  402.8400 15.1200 L
B
  419.7600 26.2800 m
B
U
0 To
1.0000 0.0000 0.0000 1.0000 416.5200 22.3200 0 Tp
TP
93.617021 Tz
/_Times-Bold 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(0\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.7500 w
  0.000 0.000 0.000 1.000 K
1 j
  368.4000 26.6400 m
  395.4000 26.2800 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  402.8400 26.2800 m
  392.6400 22.8000 L
  392.7600 29.8800 L
  402.8400 26.2800 L
B
U
u
0.7500 w
  0.000 0.000 0.000 1.000 K
  305.7600 26.6400 m
  321.6000 26.6400 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  328.8000 26.6400 m
  318.7200 23.0400 L
  318.7200 30.2400 L
  328.8000 26.6400 L
B
U
u
0.7500 w
  0.000 0.000 0.000 1.000 K
  436.6800 26.2800 m
  478.0800 26.2800 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  485.2800 26.2800 m
  475.2000 22.6800 L
  475.2000 29.8800 L
  485.2800 26.2800 L
B
U
  0.000 0.000 0.000 0.000 k
0.7500 w
  0.000 0.000 0.000 0.000 K
u
  456.9600 3.6000 m
  502.3200 3.6000 L
  502.3200 20.8800 L
  456.9600 20.8800 L
  456.9600 3.6000 L
B
  479.6400 12.2400 m
B
U
0 To
1.0000 0.0000 0.0000 1.0000 464.5200 8.2800 0 Tp
TP
88.372093 Tz
/_Times-Bold 11.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(o\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 470.2800 8.2800 0 Tp
TP
88.372093 Tz
/_Times-Bold 11.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(u\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 476.0400 8.2800 0 Tp
TP
88.372093 Tz
/_Times-Bold 11.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(t\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 479.6400 8.2800 0 Tp
TP
88.372093 Tz
/_Times-Bold 11.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(p\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 485.4000 8.2800 0 Tp
TP
88.372093 Tz
/_Times-Bold 11.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(u\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 491.1600 8.2800 0 Tp
TP
88.372093 Tz
/_Times-Bold 11.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(t\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.7500 w
  0.000 0.000 0.000 1.000 K
1 j
  13.4400 77.4000 m
  13.4400 44.6400 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  13.4400 37.4400 m
  9.8400 47.5200 L
  16.9200 47.5200 L
  13.4400 37.4400 L
B
U
u
0.7500 w
  0.000 0.000 0.000 1.000 K
  13.4400 77.4000 m
  451.3200 77.4000 L
S
U
u
  451.3200 77.4000 m
  451.3200 26.2800 L
S
U
u
  0.000 0.000 0.000 1.000 K
  348.8400 77.4000 m
  348.8400 45.0000 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  348.8400 37.8000 m
  345.2400 47.8800 L
  352.3200 47.8800 L
  348.8400 37.8000 L
B
U
u
0.7500 w
  0.000 0.000 0.000 1.000 K
  160.9200 77.4000 m
  160.9200 44.6400 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  160.9200 37.4400 m
  157.3200 47.5200 L
  164.4000 47.5200 L
  160.9200 37.4400 L
B
U
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_blend_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_typography_AI5 /terminate get exec
Adobe_screens_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF

%%EndDocument
 @endspecial 0 TeXcolorgray 324 261 a FC(Fig.)29 b(2:)g(The)f
(Fibonacci)f(NLFSRs)p 0 TeXcolorgray 0 TeXcolorgray -192
561 a(Finally)-5 b(,)22 b(we)i(re)o(gard)c Fv(\()p Fz(n)p
FA(;)9 b Fz(k)q Fv(\))24 b FC(NFSRs)h(as)f(a)f(BN.)h(Based)f(on)g(STP)
-9 b(,)23 b Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))-192
661 y FC(NFSRs)32 b(are)e(con)m(v)o(erted)e(into)i(a)h(multi-linear)e
(forms.)g(W)-7 b(e)31 b(\002rst)h(gi)n(v)o(e)-192 760
y(some)c(notations)g(used)g(in)h(this)g(paper)-5 b(.)p
0 TeXcolorgray -109 878 a Fq(\017)p 0 TeXcolorgray 50
w Fw(D)26 b Fv(=)18 b Fy(f)p FC(0)p FA(;)9 b FC(1)p Fy(g)p
FC(.)p 0 TeXcolorgray -109 977 a Fq(\017)p 0 TeXcolorgray
50 w Fz(I)-2 989 y Fs(n)50 977 y FC(:)30 b(the)e(identity)g(matrix)g
(of)g(dimension)f Fz(n)p FC(.)p 0 TeXcolorgray -109 1077
a Fq(\017)p 0 TeXcolorgray 50 w FB(d)23 1047 y Fs(i)13
1102 y Fo(2)44 1084 y Fk(n)95 1077 y FC(:)i(the)g Fz(i)p
FC(-th)f(column)f(of)h(identity)g(matrix)g Fz(I)1353
1089 y Fs(n)1387 1077 y FC(.)p 0 TeXcolorgray -109 1176
a Fq(\017)p 0 TeXcolorgray 50 w Fx(D)23 1189 y Fo(2)54
1171 y Fk(n)105 1176 y Fv(=)18 b Fy(f)p FB(d)281 1146
y Fs(i)271 1201 y Fo(2)302 1184 y Fk(n)334 1176 y Fy(j)p
Fz(i)h Fv(=)f FC(1)p FA(;)9 b FC(2)p FA(;)g FC(3)p FA(;)g(:::;)g
FC(2)847 1146 y Fs(n)880 1176 y Fy(g)p FC(.)p 0 TeXcolorgray
-109 1276 a Fq(\017)p 0 TeXcolorgray 50 w Fw(L)45 1288
y Fs(n)p Fq(\002)p Fs(m)190 1276 y FC(:)31 b(the)f(set)h(of)f
Fz(n)12 b Fy(\002)g Fz(m)29 b FC(matrices,)h(whose)g(column)e(belong)
-28 1376 y(to)f Fx(D)115 1388 y Fs(n)149 1376 y FC(.)h(F)o(or)f(a)g
(matrix)f Fz(L)19 b Fy(2)f Fv(\()p Fz(L)p Fv(\))896 1388
y Fs(n)p Fq(\002)p Fs(m)1024 1376 y FC(,)27 b(and)f Fz(L)19
b Fv(=)e([)p FB(d)1440 1335 y Fs(i)1457 1347 y Fi(1)1430
1387 y Fs(n)1518 1376 y FB(d)1569 1335 y Fs(i)1586 1347
y Fi(2)1559 1387 y Fs(n)1647 1376 y FA(:::)28 b FB(d)1795
1346 y Fs(i)1812 1355 y Fk(m)1785 1396 y Fs(n)1856 1376
y Fv(])p FC(,)-28 1475 y(we)g(write)h Fz(L)19 b Fv(=)f
FB(d)486 1488 y Fo(2)517 1470 y Fk(n)550 1475 y Fv([)p
Fz(i)596 1488 y Fo(1)660 1475 y Fz(i)683 1488 y Fo(2)747
1475 y FA(:::)29 b Fz(i)868 1487 y Fs(m)916 1475 y Fv(])h
FC(for)d(simplicity)-5 b(.)p 0 TeXcolorgray -109 1575
a Fq(\017)p 0 TeXcolorgray 50 w Fz(col)74 1587 y Fs(i)94
1575 y Fv(\()p Fz(L)p Fv(\))20 b FC(:)29 b(the)f Fz(i)p
FC(-th)h(column)e(of)h(matrix)g Fz(L)p FC(.)p 0 TeXcolorgray
-109 1675 a Fq(\017)p 0 TeXcolorgray 50 w Fz(col)t Fv(\()p
Fz(L)p Fv(\))19 b FC(:)29 b(the)f(set)h(of)g(all)g(column)e(of)h
(matrix)g Fz(L)p FC(.)p 0 TeXcolorgray -109 1774 a Fq(\017)p
0 TeXcolorgray 50 w Fg(R)18 b FC(:)29 b(the)g(set)g(of)f(all)h(real)g
(number)-5 b(.)p 0 TeXcolorgray -109 1874 a Fq(\017)p
0 TeXcolorgray 50 w Fz(N)23 b FC(:)29 b(the)g(set)g(of)g(all)g(inte)o
(gers.)p 0 TeXcolorgray -109 1973 a Fq(\017)p 0 TeXcolorgray
50 w FA(?)18 b FC(:)29 b(the)f(least)h(common)e(multiple.)p
0 TeXcolorgray -109 2073 a Fq(\017)p 0 TeXcolorgray 50
w Fy(\005)18 b FC(:)29 b(the)f(greatest)g(common)f(di)n(visor)-5
b(.)p 0 TeXcolorgray -109 2173 a Fq(\017)p 0 TeXcolorgray
50 w Fy(\002)18 b FC(:)29 b(Cartesian)f(product.)-192
2332 y Fz(A.)41 b(Semi-tensor)28 b(pr)l(oduct)f(of)i(matrices)-109
2459 y FC(In)22 b(this)h(subsection,)e(the)h(de\002nition)f(of)h(STP)h
(is)g(gi)n(v)o(en.)d(The)i(multi-)-192 2559 y(linear)f(form)g(of)h
(nonlinear)e(Boolean)h(function)f(is)j(obtained)d(by)h(using)-192
2658 y(the)29 b(method)e(of)h(STP)-9 b(.)p 0 TeXcolorgray
-109 2758 a Fz(De\002nition)27 b(1:)p 0 TeXcolorgray
41 w FC([4)o(])e(Let)g Fz(A)17 b Fy(2)g Fg(R)821 2728
y Fs(n)p Fq(\002)p Fs(m)948 2758 y FC(,)25 b Fz(B)17
b Fy(2)g Fg(R)1199 2728 y Fs(p)p Fq(\002)p Fs(q)1312
2758 y FC(.)25 b(The)g Fz(semi-tensor)-192 2858 y(pr)l(oduct)k
FC(of)f Fz(A)h FC(and)f Fz(B)h FC(is)g(de\002ned)f(as:)428
3015 y Fz(A)12 b Fg(n)g Fz(B)17 b Fv(=)h(\()p Fz(A)12
b Fy(\012)g Fz(I)935 3021 y Fk(l)p 925 3031 36 3 v 925
3067 a(m)971 3045 y Fm(\))999 3015 y Fv(\()p Fz(B)g Fy(\012)g
Fz(I)1211 3021 y Fk(l)p 1205 3031 29 3 v 1209 3067 a(p)1248
3015 y Fv(\))523 b FC(\(1\))-192 3192 y(where)28 b Fz(l)33
b FC(is)d(the)e(least)h(common)e(multiple)h(of)g Fz(m)h
FC(and)34 b Fz(p)p FC(.)-109 3292 y(Ob)o(viously)-5 b(,)24
b(if)j Fz(m)18 b Fv(=)23 b Fz(p)k FC(in)g(De\002nition)f(1,)h(then)f
(the)g(STP)i(of)e Fz(A)h FC(and)-192 3391 y Fz(B)i FC(is)g(reduced)e
(to)i(their)f(con)m(v)o(entional)d(matrix)j(product)f
Fz(AB)p FC(.)-109 3491 y(W)-7 b(e)40 b(identify)f Fx(D)389
3504 y Fo(2)448 3491 y Fy(\030)24 b Fw(D)48 b FC(i.e)39
b Fv(\()p FB(d)852 3461 y Fo(1)842 3516 y(2)912 3491
y Fy(\030)24 b FC(1)p FA(;)9 b FB(d)1126 3461 y Fo(2)1116
3516 y(2)1185 3491 y Fy(\030)24 b FC(0)p Fv(\))p FC(,)40
b(and)e FB(d)1619 3461 y Fo(1)1609 3516 y(2)1654 3491
y Fv(\()p FB(d)1737 3461 y Fo(2)1727 3516 y(2)1773 3491
y Fv(\))i FC(is)-192 3591 y(called)28 b(the)h(v)o(ector)e(form)h(of)g
(logical)g(v)n(alue)g(1)p Fv(\()p FC(0)p Fv(\))p FC(.)p
0 TeXcolorgray -109 3691 a Fz(Lemma)g(1:)p 0 TeXcolorgray
41 w FC([4)o(])38 b(An)o(y)g(Boolean)f(function)48 b
Fz(f)12 b Fv(\()p Fz(x)1337 3704 y Fo(1)1373 3691 y FA(;)d
Fz(x)1442 3704 y Fo(2)1477 3691 y FA(;)g(:::;)g Fz(x)1647
3703 y Fs(n)1682 3691 y Fv(\))39 b FC(with)-192 3791
y(v)n(ariables)29 b Fz(x)173 3804 y Fo(1)208 3791 y FA(;)9
b Fz(x)277 3804 y Fo(2)312 3791 y FA(;)g(:::;)g Fz(x)482
3803 y Fs(n)537 3791 y Fy(2)20 b Fx(D)663 3804 y Fo(2)728
3791 y FC(can)30 b(be)g(e)o(xpressed)f(as)i(a)g(multi-linear)-192
3890 y(form:)255 3992 y Fz(f)12 b Fv(\()p Fz(x)359 4005
y Fo(1)395 3992 y FA(;)d Fz(x)464 4005 y Fo(2)499 3992
y FA(;)g(:::;)g Fz(x)669 4004 y Fs(n)704 3992 y Fv(\))18
b(=)g Fz(F)7 b(x)932 4005 y Fo(1)978 3992 y Fg(n)12 b
Fz(x)1092 4005 y Fo(2)1138 3992 y Fg(n)g FA(:::)g Fg(n)g
Fz(x)1410 4004 y Fs(n)1442 3992 y FA(:)338 b FC(\(2\))-192
4149 y(where)32 b Fz(F)c Fy(2)21 b Fw(L)272 4162 y Fo(2)p
Fq(\002)p Fo(2)382 4144 y Fk(n)448 4149 y FC(is)34 b(called)e(the)h
Fz(structur)m(e)h(matrix)f FC(of)45 b Fz(f)12 b FC(,)34
b(and)e Fz(F)-192 4249 y FC(can)c(be)h(uniquely)d(e)o(xpressed)i(as)221
4445 y Fz(F)d Fv(=)380 4328 y Ff(\024)530 4395 y Fz(s)562
4408 y Fo(1)810 4395 y Fz(s)842 4408 y Fo(2)1024 4395
y FA(:::)148 b Fz(s)1273 4408 y Fo(2)1304 4389 y Fk(n)466
4494 y FC(1)12 b Fy(\000)g Fz(s)629 4507 y Fo(1)745 4494
y FC(1)g Fy(\000)g Fz(s)908 4507 y Fo(2)1024 4494 y FA(:::)83
b FC(1)12 b Fy(\000)g Fz(s)1339 4507 y Fo(2)1370 4489
y Fk(n)1443 4328 y Ff(\025)1803 4445 y FC(\(3\))-192
4644 y(with)30 b Fv([)p Fz(s)41 4657 y Fo(1)76 4644 y
FA(;)9 b Fz(s)140 4657 y Fo(2)176 4644 y FA(;)g(:::;)g
Fz(s)341 4657 y Fo(2)372 4639 y Fk(n)405 4644 y Fv(])31
b FC(being)e(the)g(truth)h(table)f(of)42 b Fz(f)12 b
FC(,)31 b(arranged)d(in)i(the)-192 4744 y(re)n(v)o(erse)d(alphabet)h
(order)-5 b(.)-109 4844 y(In)33 b(the)g(follo)n(wing)e(of)i(this)h
(paper)m(,)d(we)j(omit)f(the)g(symbol)f Fg(n)h FC(for)-192
4943 y(simplicity)-5 b(.)-192 5103 y Fz(B.)41 b Fv(\()p
Fz(n)p FA(;)9 b Fz(k)q Fv(\))29 b Fz(NFSR)-109 5230 y
FC(An)k Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))34 b FC(NFSR)g(consists)f
Fz(n)g FC(binary)e(memories)h(de)n(vice)g(called)-192
5329 y(bits.)25 b(The)g(output)e(of)i(an)g Fv(\()p Fz(n)p
FA(;)9 b Fz(k)q Fv(\))26 b FC(NFSR)g(is)g(the)f(v)n(alue)f(of)h(the)g
(0-th)f(bit.)-192 5429 y(An)j Fv(\()p Fz(n)p FA(;)9 b
Fz(k)q Fv(\))27 b FC(NFSR)h(is)g(de\002ned)d(as)j(follo)n(ws.)e(Let)h
Fz(x)1296 5441 y Fs(i)1317 5429 y Fv(\()n Fz(t)6 b Fv(\))p
FA(;)36 b FC(0)17 b Fy(\024)g Fz(i)h Fy(\024)f Fz(n)11
b Fy(\000)g FC(1)p 0 TeXcolorgray 0 TeXcolorgray 2000
-50 a(be)26 b(v)n(ariable)f(representing)f(the)i(v)n(alue)f(at)i(time)d
Fz(t)32 b FC(of)26 b(the)g Fz(i)p FC(-th)g(bit.)g(Let)2012
49 y Fz(f)2037 61 y Fs(i)2076 49 y FC(:)18 b Fw(D)2189
19 y Fs(k)2239 49 y Fy(!)g Fw(D)8 b FA(;)27 b FC(1)17
b Fy(\024)h Fz(k)h Fy(\024)e Fz(n)p FC(,)26 b(be)h(the)g(ne)o(xt)f(v)n
(alue)g(function)f(of)i Fz(i)p FC(-th)g(bit.)2000 149
y(The)h(boolean)g(function)39 b Fz(f)2794 161 y Fs(i)2845
149 y FC(depends)28 b(on)g(the)h(bit)g Fv(\()p Fz(i)12
b Fv(+)g FC(1)p Fv(\))p Fz(mod)32 b(n)d FC(and)2000 249
y(up)f(to)g Fz(k)13 b Fy(\000)e FC(1)29 b(other)e(bits.)i(Assume)f(the)
h(inde)o(x)o(es)e(of)h(other)g Fz(k)13 b Fy(\000)e FC(1)28
b(bits)2000 348 y(relating)35 b(to)g(function)46 b Fz(f)2740
360 y Fs(i)2798 348 y FC(are)36 b Fz(i)2959 361 y Fo(1)2994
348 y FA(;)9 b Fz(i)3049 361 y Fo(2)3084 348 y FA(;)g(:::;)g
Fz(i)3240 362 y Fs(k)q Fq(\000)p Fo(1)3351 348 y FC(,)36
b Fz(i)3440 360 y Fs(j)3486 348 y Fy(2)23 b(f)p FC(0)p
FA(;)9 b FC(1)p FA(;)g(:::;)g Fz(n)j Fy(\000)i FC(1)p
Fy(g)p FC(,)2012 448 y Fz(j)26 b Fy(2)f FC(1)p FA(;)9
b FC(2)p FA(;)g(:::;)g Fz(k)k Fy(\000)f FC(1)n(,)38 b(then)g(the)g(v)n
(alue)g(function)f(of)h Fz(i)p FC(-th)g(bit)g(can)h(be)2000
547 y(e)o(xpressed)27 b(as)i(follo)n(ws:)2269 697 y Fz(x)2306
709 y Fs(i)2327 697 y Fv(\()n Fz(t)17 b Fv(+)12 b FC(1)p
Fv(\))18 b(=)30 b Fz(f)2686 709 y Fs(i)2707 697 y Fv(\()p
Fz(x)2776 715 y Fm(\()p Fs(i)p Fm(+)p Fo(1)p Fm(\))p
Fs(mod)i(n)3093 697 y Fv(\()n Fz(t)6 b Fv(\))p FA(;)j
Fz(x)3253 709 y Fs(i)3270 721 y Fi(1)3303 697 y Fv(\()n
Fz(t)d Fv(\))p FA(;)j(:::;)g Fz(x)3564 709 y Fs(i)3581
722 y Fk(k)q Fd(\000)p Fi(1)3676 697 y Fv(\()n Fz(t)d
Fv(\)\))p FA(:)173 b FC(\(4\))2000 847 y(So)21 b(an)f
Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))22 b FC(NFSR)g(can)e(be)h
(described)e(as)j(a)f(BN)h(sho)n(wn)d(as)j(follo)n(ws:)2248
933 y Ff(8)2248 1007 y(>)2248 1032 y(>)2248 1057 y(>)2248
1082 y(>)2248 1107 y(<)2248 1256 y(>)2248 1281 y(>)2248
1306 y(>)2248 1331 y(>)2248 1356 y(:)2331 987 y Fz(x)2368
1000 y Fo(0)2403 987 y Fv(\()n Fz(t)17 b Fv(+)12 b FC(1)p
Fv(\))18 b(=)30 b Fz(f)2762 1000 y Fo(0)2797 987 y Fv(\()p
Fz(x)2866 1000 y Fo(1)2901 987 y FA(;)9 b Fz(x)2970 1000
y Fo(0)3001 1012 y Fi(1)3034 987 y FA(;)g Fz(x)3103 1000
y Fo(0)3134 1012 y Fi(2)3167 987 y FA(;)g(:::;)g Fz(x)3337
1000 y Fo(0)3368 1013 y Fk(k)q Fd(\000)p Fi(1)3463 987
y Fv(\))p FA(;)2331 1112 y Fz(x)2368 1125 y Fo(1)2403
1112 y Fv(\()n Fz(t)17 b Fv(+)12 b FC(1)p Fv(\))18 b(=)30
b Fz(f)2762 1125 y Fo(1)2797 1112 y Fv(\()p Fz(x)2866
1125 y Fo(2)2901 1112 y FA(;)9 b Fz(x)2970 1125 y Fo(1)3001
1137 y Fi(1)3034 1112 y FA(;)g Fz(x)3103 1125 y Fo(1)3134
1137 y Fi(2)3167 1112 y FA(;)g(:::;)g Fz(x)3337 1125
y Fo(1)3368 1138 y Fk(k)q Fd(\000)p Fi(1)3463 1112 y
Fv(\))p FA(;)2331 1225 y FC(.)2331 1258 y(.)2331 1291
y(.)2331 1416 y Fz(x)2368 1429 y Fs(n)p Fq(\000)p Fo(1)2500
1416 y Fv(=)30 b Fz(f)2620 1429 y Fs(n)p Fq(\000)p Fo(1)2734
1416 y Fv(\()p Fz(x)2803 1429 y Fo(0)2838 1416 y FA(;)9
b Fz(x)2907 1429 y Fs(n)p Fq(\000)p Fo(1)3017 1441 y
Fi(1)3049 1416 y FA(;)g Fz(x)3118 1429 y Fs(n)p Fq(\000)p
Fo(1)3228 1441 y Fi(2)3261 1416 y FA(;)g(:::;)g Fz(x)3431
1429 y Fs(n)p Fq(\000)p Fo(1)3541 1442 y Fk(k)q Fd(\000)p
Fi(1)3635 1416 y Fv(\))p 0 TeXcolorgray 3995 1202 a FC(\(5\))p
0 TeXcolorgray 2000 1558 a(Let)37 b Fz(x)p Fv(\()n Fz(t)6
b Fv(\))23 b(=)g(\()p Fz(x)2456 1571 y Fo(0)2491 1558
y Fv(\()n Fz(t)6 b Fv(\))p FA(;)j Fz(x)2651 1571 y Fo(1)2686
1558 y Fv(\()n Fz(t)d Fv(\))p FA(;)j(:::;)g Fz(x)2947
1571 y Fs(n)p Fq(\000)p Fo(1)3061 1558 y Fv(\()n Fz(t)d
Fv(\)\))37 b FC(denote)f(the)h(state)h(of)f Fv(\()p Fz(n)p
FA(;)9 b Fz(k)q Fv(\))2000 1658 y FC(NFSR.)2083 1756
y(By)29 b(using)g(Lemma)f(1,)i(we)f(can)g(obtain)f(that)i
Fz(x)3495 1768 y Fs(i)3516 1756 y Fv(\()n Fz(t)17 b Fv(+)12
b FC(1)p Fv(\))18 b(=)h Fz(F)3882 1768 y Fs(i)3914 1756
y Fg(n)3979 1722 y Fs(n)p Fq(\000)p Fo(1)3979 1782 y
Fs(i)p Fm(=)p Fo(0)2000 1856 y Fz(x)2037 1868 y Fs(i)2058
1856 y Fv(\()n Fz(t)6 b Fv(\))p FC(,)23 b(where)f Fz(F)2462
1868 y Fs(i)2498 1856 y Fy(2)16 b Fw(L)2642 1869 y Fo(2)p
Fq(\002)p Fo(2)2752 1850 y Fk(n)2784 1856 y FC(,)23 b(then)f(the)h(BN)g
(\(5\))f(can)g(be)h(con)m(v)o(erted)d(into)2000 1955
y(follo)n(wing)27 b(system:)2662 2105 y Fz(x)p Fv(\()n
Fz(t)18 b Fv(+)12 b FC(1)p Fv(\))17 b(=)h Fz(Lx)p Fv(\()n
Fz(t)6 b Fv(\))p FA(;)h Fz(t)25 b Fy(2)18 b Fz(N)5 b
FA(;)566 b FC(\(6\))2000 2255 y(where)21 b Fz(x)p Fv(\()n
Fz(t)6 b Fv(\))15 b(=)g Fz(x)2485 2268 y Fo(0)2520 2255
y Fv(\()n Fz(t)6 b Fv(\))i Fg(n)g Fz(x)2729 2268 y Fo(1)2762
2255 y Fz(t)14 b Fg(n)8 b FA(:::)g Fg(n)g Fz(x)3059 2268
y Fs(n)p Fq(\000)p Fo(1)3172 2255 y Fv(\()n Fz(t)e Fv(\))16
b Fy(2)f Fx(D)3400 2268 y Fo(2)3431 2249 y Fk(n)3486
2255 y FC(is)23 b(the)f(state)g(at)g(time)1998 2354 y
Fz(t)6 b FC(,)28 b(and)g Fz(L)19 b Fy(2)g Fw(L)2437 2367
y Fo(2)2468 2349 y Fk(n)2496 2367 y Fq(\002)p Fo(2)2575
2349 y Fk(n)2608 2354 y FC(,)29 b Fz(col)2760 2366 y
Fs(i)2780 2354 y Fy(f)p Fz(L)p Fy(g)18 b Fv(=)g Fg(n)3076
2320 y Fs(n)p Fq(\000)p Fo(1)3076 2380 y Fs(i)p Fm(=)p
Fo(0)3189 2354 y Fz(col)3291 2366 y Fs(i)3312 2354 y
Fy(f)p Fz(F)3397 2366 y Fs(i)3417 2354 y Fy(g)p FC(.)p
0 TeXcolorgray 2083 2452 a Fz(De\002nition)27 b(2:)p
0 TeXcolorgray 0 TeXcolorgray 124 w FC(1\))p 0 TeXcolorgray
49 w(A)k(state)i Fz(x)3070 2465 y Fo(0)3124 2452 y Fy(2)21
b Fx(D)3251 2465 y Fo(2)3282 2447 y Fk(n)3346 2452 y
FC(is)33 b(a)e Fz(equil)t(ibr)r(ium)g(s)n(t)6 b(a)n(t)g(e)2202
2552 y FC(of)28 b Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))29
b FC(NFSR)h(\(6\),)e(if)h Fz(Lx)3052 2565 y Fo(0)3105
2552 y Fv(=)18 b Fz(x)3225 2565 y Fo(0)3260 2552 y FC(.)p
0 TeXcolorgray 2083 2652 a(2\))p 0 TeXcolorgray 49 w
Fz(x)2239 2665 y Fo(0)2273 2652 y FA(;)9 b Fz(Lx)2388
2665 y Fo(0)2424 2652 y FA(;)g(:::;)g Fz(L)2608 2622
y Fs(p)2643 2652 y Fz(x)2680 2665 y Fo(0)2760 2652 y
FC(is)46 b(called)f(a)g(c)o(ycle)f(of)g Fv(\()p Fz(n)p
FA(;)9 b Fz(k)q Fv(\))46 b FC(NFSR)g(\(6\))2202 2751
y(with)41 b(length)47 b Fz(p)p FC(,)41 b(if)h Fz(L)2895
2721 y Fs(p)2929 2751 y Fz(x)2966 2764 y Fo(0)3027 2751
y Fv(=)25 b Fz(x)3154 2764 y Fo(0)3189 2751 y FC(,)41
b(and)g(the)g(elements)g(in)h(set)2202 2851 y Fz(x)2239
2864 y Fo(0)2273 2851 y FA(;)9 b Fz(Lx)2388 2864 y Fo(0)2424
2851 y FA(;)g(:::;)g Fz(L)2608 2821 y Fs(p)2643 2851
y Fz(x)2680 2864 y Fo(0)2744 2851 y FC(are)28 b(distinct.)2083
2949 y(Let)33 b Fz(R)p Fv(\()p Fz(x)p Fv(\))h FC(denote)e(the)h(set)h
(of)f(states)h(which)e(can)h(reach)f(state)i Fz(x)p FC(.)2000
3049 y(Let)24 b Fz(R)2186 3019 y Fs(k)2218 3049 y Fv(\()p
Fz(x)p Fv(\))g FC(denote)f(the)g(set)i(of)e(states)h(which)f(can)h
(reach)e(state)j Fz(x)f FC(after)2000 3148 y Fz(k)30
b FC(steps.)2083 3247 y(Ne)o(xt,)43 b(we)h(gi)n(v)o(e)e(the)i
(de\002nition)e(of)h Fz(gl)t(obal)t(l)t(y)g(s)n(t)6 b(abl)t(e)p
FC(,)43 b Fz(l)t(ocal)t(l)t(y)2000 3346 y(s)n(t)6 b(abl)t(e)28
b FC(and)g(the)g(period)g(of)g Fv(\()p Fz(n)p FA(;)9
b Fz(k)q Fv(\))29 b FC(NFSR.)p 0 TeXcolorgray 2083 3445
a Fz(De\002nition)e(3:)p 0 TeXcolorgray 41 w Fv(\()p
Fz(n)p FA(;)9 b Fz(k)q Fv(\))35 b FC(NFSR)h(\(6\))e(is)i(called)f
Fz(gl)t(obal)t(l)t(y)f(s)n(t)6 b(abl)t(e)34 b FC(to)2000
3544 y(the)26 b(equilibrium)f(state)i FB(d)2773 3514
y Fs(i)2763 3569 y Fo(2)2794 3551 y Fk(n)2844 3544 y
Fy(\030)17 b Fv(\()p Fz(i)2981 3557 y Fo(0)3016 3544
y FA(;)9 b Fz(i)3071 3557 y Fo(1)3106 3544 y FA(;)g(:::;)g
Fz(i)3262 3557 y Fs(n)p Fq(\000)p Fo(1)3376 3544 y Fv(\))p
FC(,)27 b(if)g(for)e(an)o(y)h(state)h Fz(x)18 b Fy(2)2000
3644 y Fx(D)2051 3657 y Fo(2)2082 3639 y Fk(n)2115 3644
y FC(,)28 b(there)g(e)o(xist)h(a)g(positi)n(v)o(e)f(inte)o(ger)f
Fz(N)34 b FC(such)29 b(that)f Fz(L)3627 3614 y Fs(N)3676
3644 y Fz(x)19 b Fv(=)f FB(d)3866 3614 y Fs(i)3856 3669
y Fo(2)3887 3651 y Fk(n)3920 3644 y FC(.)p 0 TeXcolorgray
2083 3742 a Fz(De\002nition)27 b(4:)p 0 TeXcolorgray
41 w Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))42 b FC(NFSR)g(\(6\))f(is)i
(called)e Fz(l)t(ocal)t(l)t(y)g(s)n(t)6 b(abl)t(e)41
b FC(to)2000 3842 y(the)27 b(equilibrium)e(state)k FB(d)2776
3812 y Fs(i)2766 3867 y Fo(2)2797 3849 y Fk(n)2847 3842
y Fy(\030)18 b Fv(\()p Fz(i)2985 3855 y Fo(0)3020 3842
y FA(;)9 b Fz(i)3075 3855 y Fo(1)3110 3842 y FA(;)g(:::;)g
Fz(i)3266 3855 y Fs(n)p Fq(\000)p Fo(1)3380 3842 y Fv(\))p
FC(,)28 b(if)f(there)g(e)o(xist)h(some)2000 3941 y(states)42
b Fz(x)25 b Fy(2)h Fx(D)2420 3954 y Fo(2)2451 3936 y
Fk(n)2499 3941 y Fy(n)16 b FB(d)2608 3911 y Fs(i)2598
3966 y Fo(2)2629 3949 y Fk(n)2662 3941 y FC(,)41 b(such)g(that)g
Fz(L)3130 3911 y Fs(N)3179 3941 y Fz(x)25 b Fv(=)g FB(d)3382
3911 y Fs(i)3372 3966 y Fo(2)3403 3949 y Fk(n)3477 3941
y FC(for)41 b(some)f(positi)n(v)o(e)2000 4041 y(inte)o(ger)27
b Fz(N)5 b FC(.)p 0 TeXcolorgray 2083 4139 a Fz(De\002nition)27
b(5:)p 0 TeXcolorgray 41 w FC([1)o(])22 b(The)g(period)e(of)i(an)g
Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))23 b FC(NFSR)g(is)g(the)f(length)
2000 4239 y(of)28 b(the)h(longest)e(c)o(yclic)h(output)g(sequence)f(it)
i(produces.)2083 4337 y(F)o(or)h(better)g(study)g(of)g(the)g(period)f
(of)i Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))31 b FC(NFSR,)g(we)g
(propose)2000 4437 y(the)26 b(de\002nition)g(of)g(minimal)g(period)f
(of)h(output)f(sequence)h(of)g(a)h(state)2000 4536 y(in)h(c)o(ycle)g
(of)h(a)g Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))29 b FC(NFSR.)p
0 TeXcolorgray 2083 4635 a Fz(De\002nition)e(6:)p 0 TeXcolorgray
41 w FC(F)o(or)f(arbitrary)g(state)h Fz(x)h FC(in)f(a)h(c)o(ycle)e
Fw(C)42 b FC(with)27 b(length)2000 4734 y Fz(l)2023 4748
y Fn(C)2107 4734 y FC(of)g(an)h Fv(\()p Fz(n)p FA(;)9
b Fz(k)q Fv(\))29 b FC(NFSR,)g(the)f(minimal)g(period)e(of)i(output)f
(sequence)2000 4834 y Fz(O)2060 4846 y Fs(x)2112 4834
y Fv(=)20 b Fy(f)p Fz(O)2299 4847 y Fo(1)2333 4834 y
FA(;)9 b Fz(O)2425 4847 y Fo(2)2460 4834 y FA(;)g(:::)p
Fy(g)33 b FC(of)f Fz(x)i FC(as)f(an)f(initial)h(state)g(is)h(minimal)d
(positi)n(v)o(e)2000 4934 y(inte)o(ger)i Fz(p)2306 4946
y Fs(x)2367 4934 y FC(such)28 b(that)g Fz(O)2761 4946
y Fs(i)2801 4934 y Fv(=)18 b Fz(O)2944 4948 y Fs(i)p
Fm(+)p Fs(k)6 b(p)3073 4957 y Fk(x)3103 4934 y FC(,)29
b Fz(k)19 b Fv(=)f FC(1)p FA(;)9 b FC(2)p FA(;)g FC(3)p
FA(;)g(:::)p FC(.)p 0 TeXcolorgray 2083 5032 a Fz(Remark)28
b(1:)p 0 TeXcolorgray 41 w FC(F)o(or)k(simpli\002cation,)f(in)i(the)g
(follo)n(wing,)d(the)j(output)2000 5132 y(sequence)21
b(of)i Fz(x)g FC(means)g(that)f(the)h(output)f(sequence)f(of)i
Fz(x)g FC(as)h(an)e(initial)2000 5231 y(state,)29 b(and)f
Fz(x)h FC(is)g(in)g(a)g(c)o(ycle)f(of)g Fv(\()p Fz(n)p
FA(;)9 b Fz(k)q Fv(\))30 b FC(NFSR.)2000 5329 y(F)o(or)f(the)g(in)m(v)o
(estigation)e(of)h(c)o(ycle)h(of)g(an)g Fv(\()p Fz(n)p
FA(;)9 b Fz(k)q Fv(\))30 b FC(NFSR,)h(we)e(propose)2000
5429 y(the)f(follo)n(wing)f(de\002nitions.)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray -109 -50 a Fz(De\002nition)27
b(7:)p 0 TeXcolorgray 41 w FC(F)o(or)d(an)h Fv(\()p Fz(n)p
FA(;)9 b Fz(k)q Fv(\))25 b FC(NFSR,)h(if)f(the)g(state)g
Fz(x)h FC(is)f(shifted)g(to)-192 49 y(the)k(state)h Fz(y)p
FC(,)g(then)f(the)g(state)h Fz(x)g FC(is)g(called)f(the)36
b Fz(pr)o(ed)t(ecessor)31 b FC(of)e(state)-192 149 y
Fz(y)p FC(,)35 b(while)f(state)h Fz(y)g FC(is)h(called)e(the)h
Fz(successor)h FC(of)f(state)g Fz(x)p FC(.)g(The)f(state)-192
249 y(without)28 b(predecessor)f(is)i(called)f(a)h Fz(s)n(t)6
b(art)g(ing)28 b(s)n(t)6 b(a)n(t)g(e)p FC(.)-192 348
y(Let)29 b Fz(S)-10 360 y Fs(N)67 348 y FC(denote)e(the)i(set)g(of)g
(starting)f(states)h(of)f Fv(\()p Fz(n)p FA(;)9 b Fz(k)q
Fv(\))30 b FC(NFSR)g Fz(N)5 b FC(.)513 505 y(I)t(I)t(I)t(.)45
b FD(M)t(A)t(I)t(N)25 b(R)t(E)t(S)t(U)t(L)n(T)t(S)-109
632 y FC(In)30 b(this)g(section,)g(the)f(stability)i(of)e(system)h
(\(6\))g(is)g(\002rstly)h(in)m(v)o(esti-)-192 732 y(gated.)25
b(Then)h(the)h(minimal)f(period)g(of)g(output)g(sequence)f(of)i(system)
-192 831 y(\(6\))34 b(is)h(studied.)f(At)g(last,)h(we)g(in)m(v)o
(estigate)e(the)h(minimal)g(period)f(of)-192 931 y(out)28
b(put)g(sequence)g(of)g(an)g(composed)f Fv(\()p Fz(n)p
FA(;)9 b Fz(k)q Fv(\))29 b FC(NFSR.)-192 1088 y Fz(A.)41
b(Stability)28 b(of)g Fv(\()p Fz(n)p FA(;)9 b Fz(k)q
Fv(\))30 b Fz(NFSR)-109 1214 y FC(Clearly)-5 b(,)24 b(in)g(an)g
Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))25 b FC(NFSR,)h(the)e(equilibrium)
e(state)j(can)f(be)h(an)o(y)-192 1314 y(state,)37 b(assume)f(the)h
(equilibrium)d(state)j(of)f Fv(\()p Fz(n)p FA(;)9 b Fz(k)q
Fv(\))38 b FC(NFSR)f(is)h FB(d)1759 1284 y Fs(i)1749
1339 y Fo(2)1780 1321 y Fk(n)1836 1314 y Fy(\030)-192
1414 y Fv(\()p Fz(i)-137 1427 y Fo(0)-102 1414 y FA(;)9
b Fz(i)-47 1427 y Fo(1)-12 1414 y FA(;)g(:::;)g Fz(i)144
1427 y Fs(n)p Fq(\000)p Fo(1)258 1414 y Fv(\))p FC(.)30
b(If)g(the)g(v)n(alue)f(of)42 b Fz(j)r FC(-th)30 b(bit)g(of)f
(equilibrium)f(state)j(is)-192 1513 y(1,)d(we)h(can)f(mak)o(e)h(a)f
(coordinate)f(transformation)695 1670 y Fz(y)741 1682
y Fs(j)783 1670 y Fv(=)18 b Fy(:)p Fz(x)967 1682 y Fs(j)990
1670 y FA(;)790 b FC(\(7\))-192 1826 y(The)35 b(system)h(\(6\))f(is)i
(con)m(v)o(erted)c(into)i(a)h(system)g(with)g(equilibrium)-192
1926 y(state)29 b FB(d)40 1895 y Fo(2)71 1873 y Fk(n)30
1950 y Fo(2)61 1932 y Fk(n)123 1926 y Fy(\030)18 b Fv(\()p
FC(0)p FA(;)9 b FC(0)p FA(;)g(:::;)g FC(0)p Fv(\))28
b FC(as)i(follo)n(ws:)576 2082 y Fz(y)p Fv(\()n Fz(t)17
b Fv(+)12 b FC(1)p Fv(\))18 b(=)944 2065 y FC(\257)935
2082 y Fz(Ly)p Fv(\()n Fz(t)6 b Fv(\))p FA(;)671 b FC(\(8\))-192
2238 y(where)28 b Fz(y)p Fv(\()n Fz(t)6 b Fv(\))19 b(=)f
Fg(n)335 2205 y Fs(n)p Fq(\000)p Fo(1)335 2264 y Fs(i)p
Fm(=)p Fo(0)448 2238 y Fz(y)485 2250 y Fs(i)506 2238
y Fv(\()n Fz(t)6 b Fv(\))p FC(.)29 b(Then)f(equilibrium)e(state)k(of)e
(system)h(\(8\))-192 2339 y(is)g FB(d)-57 2309 y Fo(2)-26
2287 y Fk(n)-67 2363 y Fo(2)-36 2346 y Fk(n)26 2339 y
Fy(\030)18 b Fv(\()p FC(0)p FA(;)9 b FC(0)p FA(;)g(:::;)g
FC(0)p Fv(\))p FC(.)-109 2439 y(Since)20 b(the)h(form)e(of)h(system)h
(\(6\))f(is)h(similar)g(to)g(the)f(form)f(of)i(system)-192
2539 y(in)g([12)n(],)g(we)g(can)f(obtain)f(the)i(same)g(result)f(about)
g(the)g(global)g(stability)-192 2638 y(of)28 b(system)h(\(6\).)p
0 TeXcolorgray -109 2738 a Fz(Theor)m(em)f(1:)p 0 TeXcolorgray
41 w Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))31 b FC(NFSR)g(\(8\))e(is)i
(globally)d(stable)i(to)g(state)h FB(d)1836 2708 y Fo(2)1867
2686 y Fk(n)1826 2762 y Fo(2)1857 2745 y Fk(n)-192 2838
y FC(if)23 b(and)f(only)f(if)i(there)f(e)o(xist)h(a)g(positi)n(v)o(e)e
(inte)o(ger)h(1)15 b Fy(\024)g Fz(N)21 b Fy(\024)15 b
FC(2)1567 2808 y Fs(n)1610 2838 y Fy(\000)9 b FC(1)22
b(such)-192 2937 y(that)29 b Fz(col)t Fv(\()p Fz(L)146
2907 y Fs(N)195 2937 y Fv(\))18 b(=)g FB(d)379 2907 y
Fo(2)410 2885 y Fk(n)369 2962 y Fo(2)400 2944 y Fk(n)443
2937 y FC(.)-109 3037 y(From)28 b(Theorem)f(1,)h(we)h(can)f(obtain)g
(the)g(follo)n(wing)f(corollary)-5 b(.)p 0 TeXcolorgray
-109 3137 a Fz(Cor)l(ollary)29 b(1:)p 0 TeXcolorgray
41 w Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))36 b FC(NFSR)i(\(8\))d(is)i
(globally)e(stable)h(to)g FB(d)1728 3107 y Fo(2)1759
3084 y Fk(n)1718 3161 y Fo(2)1749 3143 y Fk(n)1792 3137
y FC(,)g(if)-192 3236 y(and)28 b(only)g(if)g Fz(R)p Fv(\()p
FB(d)347 3206 y Fo(2)378 3184 y Fk(n)337 3261 y Fo(2)368
3243 y Fk(n)411 3236 y Fv(\))19 b(=)f Fx(D)596 3249 y
Fo(2)627 3231 y Fk(n)660 3236 y FC(.)p 0 TeXcolorgray
-109 3336 a Fz(Remark)28 b(2:)p 0 TeXcolorgray 41 w FC(If)d(an)f
Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))26 b FC(NFSR)g(is)g(globally)e
(stable)h(to)g FB(d)1647 3306 y Fo(2)1678 3284 y Fk(n)1637
3361 y Fo(2)1668 3343 y Fk(n)1711 3336 y FC(,)g(then)-192
3436 y(for)j(an)o(y)g(state,)h(it)g(can)f(reach)g(state)h
FB(d)944 3406 y Fo(2)975 3383 y Fk(n)934 3460 y Fo(2)965
3442 y Fk(n)1037 3436 y FC(at)g(most)g(2)1359 3406 y
Fs(n)1422 3436 y FC(steps.)p 0 TeXcolorgray -109 3536
a Fz(Theor)m(em)f(2:)p 0 TeXcolorgray 41 w Fv(\()p Fz(n)p
FA(;)9 b Fz(k)q Fv(\))36 b FC(NFSR)h(\(8\))e(is)i(locally)e(stable)h
(to)g(state)g FB(d)1836 3506 y Fo(2)1867 3483 y Fk(n)1826
3560 y Fo(2)1857 3542 y Fk(n)-192 3635 y FC(if)f(and)f(only)g(if)g
(there)g(e)o(xist)h(state)g Fz(x)22 b Fy(2)g Fx(D)1083
3648 y Fo(2)1114 3630 y Fk(n)1161 3635 y Fy(n)14 b FB(d)1268
3605 y Fo(2)1299 3583 y Fk(n)1258 3660 y Fo(2)1289 3642
y Fk(n)1331 3635 y FC(,)35 b(such)g(that)f(there)-192
3735 y(e)o(xist)24 b(a)h(positi)n(v)o(e)e(inte)o(ger)h(1)16
b Fy(\024)g Fz(N)21 b Fy(\024)16 b FC(2)927 3705 y Fs(n)971
3735 y Fy(\000)10 b FC(1)24 b(such)g(that)g Fz(L)1484
3705 y Fs(N)1533 3735 y Fz(x)17 b Fv(=)f FB(d)1719 3705
y Fo(2)1750 3683 y Fk(n)1709 3759 y Fo(2)1740 3741 y
Fk(n)1783 3735 y FC(.)25 b(\(i.)-192 3835 y(e)33 b(there)f(e)o(xist)h
(state)g Fz(x)21 b Fy(2)g Fx(D)636 3848 y Fo(2)667 3829
y Fk(n)713 3835 y Fy(n)13 b FB(d)819 3804 y Fo(2)850
3782 y Fk(n)809 3859 y Fo(2)840 3841 y Fk(n)915 3835
y FC(which)32 b(can)h(reach)f(equilibrium)-192 3934 y(state)d
FB(d)40 3904 y Fo(2)71 3882 y Fk(n)30 3958 y Fo(2)61
3941 y Fk(n)104 3934 y FC(.\))-109 4034 y(In)d(the)g(ne)o(xt,)g(we)g
(will)h(gi)n(v)o(e)f(an)g(algorithm)f(to)h(decide)g(if)g(an)h
Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))-192 4134 y FC(NFSR)28
b(is)g(globally)e(stable)i(under)d(the)j(kno)n(wing)d(of)i(state)g
(transition)-192 4233 y(matrix)h(of)g(an)g Fv(\()p Fz(n)p
FA(;)9 b Fz(k)q Fv(\))30 b FC(NFSR.)p 0 TeXcolorgray
-109 4333 a Fz(Lemma)e(2:)p 0 TeXcolorgray 41 w FC(The)37
b(set)h(of)f(starting)g(state)i(of)e(an)g Fv(\()p Fz(n)p
FA(;)9 b Fz(k)q Fv(\))38 b FC(NFSR)h Fz(N)-192 4433 y(S)-150
4445 y Fs(N)-72 4433 y FC(is)30 b(equal)f(to)g Fx(D)368
4446 y Fo(2)399 4427 y Fk(n)444 4433 y Fy(n)12 b Fz(col)t
Fy(f)p Fz(L)692 4445 y Fs(N)739 4433 y Fy(g)p FC(,)29
b(where)g Fz(L)1110 4445 y Fs(N)1188 4433 y FC(is)h(the)g(state)f
(transition)-192 4532 y(matrix)f(of)g Fv(\()p Fz(n)p
FA(;)9 b Fz(k)q Fv(\))30 b FC(NFSR)f Fz(N)5 b FC(.)-192
4632 y(In)36 b(the)g(ne)o(xt,)f(we)i(will)f(gi)n(v)o(e)g(an)g
(algorithm)e(to)j(\002nd)e(all)i(c)o(ycles)f(of)-192
4732 y Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))29 b FC(NFSR)g(\(6\).)f(W)
-7 b(e)29 b(\002rstly)f(gi)n(v)o(e)g(some)g(notations)f(in)h(Algorithm)
-192 4831 y(2.)e Fz(S)i FC(denote)d(the)h(set)i(of)e(all)h(the)f
(starting)h(state)g(in)f Fv(\()p Fz(n)p FA(;)9 b Fz(k)q
Fv(\))28 b FC(NFSR)g(\(6\).)-192 4931 y Fz(S)-150 4943
y Fs(i)-92 4931 y FC(denote)36 b(the)h Fz(i)p FC(-th)g(state)g(in)g
(set)h Fz(S)q FC(.)33 b Fz(V)1024 4943 y Fs(i)1082 4931
y FC(denote)i(the)i(set)h(of)f(states)-192 5031 y(which)32
b(started)g(from)f(state)h Fz(S)718 5043 y Fs(i)772 5031
y FC(ha)n(v)o(e)f(been)h(visited.)27 b Fz(V)1480 5000
y Fs(k)1465 5054 y(i)1545 5031 y FC(denote)k(the)-192
5130 y Fz(k)q FC(-th)24 b(element)g(in)g(set)d Fz(V)500
5142 y Fs(i)520 5130 y FC(.)k Fw(C)621 5142 y Fs(i)667
5130 y FC(denote)e(the)h Fz(i)p FC(-th)f(c)o(ycle)h(of)g
Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))25 b FC(NFSR.)-192
5230 y(In)k(Algorithm)f(2,)i(we)g(\002rstly)g(\002nd)f(the)h(c)o(ycles)
f(which)g(started)h(from)-192 5329 y(starting)37 b(states.)g(Then)f
(the)h(c)o(ycles)g(without)f(branches)g(ha)n(v)o(e)g(been)-192
5429 y(found.)p 0 TeXcolorgray 0 TeXcolorgray 2000 18
2093 7 v 0 TeXcolorgray 2000 97 a Fc(Algorithm)30 b(1)g
FC(The)f(global)e(stability)i(of)f(an)h Fv(\()p Fz(n)p
FA(;)9 b Fz(k)q Fv(\))29 b FC(NFSR.)p 0 TeXcolorgray
2000 138 2093 4 v 0 TeXcolorgray 0 TeXcolorgray 2048
233 a FD(1:)p 0 TeXcolorgray 42 w FC(initial)g(set)g
Fx(D)18 b Fv(=)g Fy(f)p FC(1)p FA(;)9 b FC(2)p FA(;)g(:::;)g
FC(2)2970 203 y Fs(n)3004 233 y Fy(g)p 0 TeXcolorgray
2048 332 a FD(2:)p 0 TeXcolorgray 42 w Fc(f)n(or)57 b
Fz(i)19 b Fv(=)e FC(1)29 b(to)g(2)2634 302 y Fs(n)2697
332 y Fc(do)p 0 TeXcolorgray 2048 432 a FD(3:)p 0 TeXcolorgray
125 w Fc(f)n(or)69 b Fz(j)21 b Fv(=)d FC(1)29 b(to)f(2)2731
402 y Fs(n)2795 432 y Fc(do)p 0 TeXcolorgray 2048 532
a FD(4:)p 0 TeXcolorgray 208 w Fc(if)h Fz(col)2498 544
y Fs(j)2520 532 y Fv(\()p Fz(L)p Fv(\))19 b(=)f FB(d)2783
501 y Fo(2)2814 479 y Fk(n)2773 556 y Fo(2)2804 538 y
Fk(n)2877 532 y Fc(then)p 0 TeXcolorgray 2048 638 a FD(5:)p
0 TeXcolorgray 291 w Fz(R)2441 608 y Fs(i)2462 638 y
Fv(\()p FB(d)2545 608 y Fo(2)2576 586 y Fk(n)2535 662
y Fo(2)2566 645 y Fk(n)2609 638 y Fv(\))h(=)f Fz(R)2794
608 y Fs(i)2815 638 y Fv(\()p FB(d)2898 608 y Fo(2)2929
586 y Fk(n)2888 662 y Fo(2)2919 645 y Fk(n)2962 638 y
Fv(\))12 b Fy([)g FB(d)3133 597 y Fs(j)3114 664 y Fo(2)3145
646 y Fk(n)p 0 TeXcolorgray 2048 738 a FD(6:)p 0 TeXcolorgray
208 w Fc(end)29 b(if)p 0 TeXcolorgray 2048 837 a FD(7:)p
0 TeXcolorgray 125 w Fc(end)g(f)n(or)p 0 TeXcolorgray
2048 937 a FD(8:)p 0 TeXcolorgray 125 w Fc(if)g Fz(R)2355
903 y Fs(i)p Fq(\000)p Fo(1)2355 979 y Fu(d)2393 958
y Fi(2)2418 944 y Fk(n)2385 1004 y Fi(2)2410 990 y Fk(n)2473
937 y Fv(=)18 b Fz(R)2607 907 y Fs(i)2607 978 y Fu(d)2645
957 y Fi(2)2670 943 y Fk(n)2637 1003 y Fi(2)2662 989
y Fk(n)2736 937 y Fc(then)p 0 TeXcolorgray 2048 1059
a FD(9:)p 0 TeXcolorgray 208 w Fz(num)f Fv(=)h Fz(i)12
b Fy(\000)g FC(1)p 0 TeXcolorgray 2015 1159 a FD(10:)p
0 TeXcolorgray 208 w Fc(br)o(eak)p FC(.)p 0 TeXcolorgray
2015 1258 a FD(11:)p 0 TeXcolorgray 125 w Fc(end)29 b(if)p
0 TeXcolorgray 2015 1358 a FD(12:)p 0 TeXcolorgray 42
w Fc(end)g(f)n(or)p 0 TeXcolorgray 2015 1458 a FD(13:)p
0 TeXcolorgray 42 w Fc(if)g Fz(R)2272 1427 y Fs(num)2272
1499 y Fu(d)2310 1477 y Fi(2)2335 1463 y Fk(n)2302 1523
y Fi(2)2327 1509 y Fk(n)2400 1458 y Fv(=)18 b Fx(D)2534
1471 y Fo(2)2565 1452 y Fk(n)2627 1458 y Fc(then)p 0
TeXcolorgray 2015 1586 a FD(14:)p 0 TeXcolorgray 125
w FC(the)28 b Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))30
b FC(NFSR)g(is)f(globally)e(stable.)p 0 TeXcolorgray
2015 1685 a FD(15:)p 0 TeXcolorgray 42 w Fc(else)p 0
TeXcolorgray 2015 1785 a FD(16:)p 0 TeXcolorgray 125
w FC(the)h Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))30 b
FC(NFSR)g(is)f(not)f(globally)f(stable.)p 0 TeXcolorgray
2015 1885 a FD(17:)p 0 TeXcolorgray 42 w Fc(end)i(if)p
0 TeXcolorgray 2000 1922 V 2000 2327 2093 7 v 0 TeXcolorgray
2000 2406 a(Algorithm)h(2)g FC(All)g(c)o(ycles)e(of)g
Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))30 b FC(NFSR)f(\(6\))p
0 TeXcolorgray 2000 2446 2093 4 v 0 TeXcolorgray 0 TeXcolorgray
2048 2536 a FD(1:)p 0 TeXcolorgray 42 w FC(Initialize)f(set)d
Fz(V)2629 2548 y Fs(i)2669 2536 y Fv(=)17 b Fg(?)p 0
TeXcolorgray 2048 2636 a FD(2:)p 0 TeXcolorgray 42 w
Fc(f)n(or)28 b Fz(i)18 b Fv(=)g FC(1)29 b(to)g Fy(j)p
Fz(S)q Fy(j)f Fc(do)p 0 TeXcolorgray 2048 2735 a FD(3:)p
0 TeXcolorgray 121 w Fz(V)2267 2747 y Fs(i)2306 2735
y Fv(=)18 b Fz(S)2431 2747 y Fs(i)p 0 TeXcolorgray 2048
2835 a FD(4:)p 0 TeXcolorgray 125 w Fz(x)g Fv(=)g Fz(S)2404
2847 y Fs(i)p 0 TeXcolorgray 2048 2935 a FD(5:)p 0 TeXcolorgray
125 w Fc(f)n(or)40 b Fz(j)21 b Fv(=)d FC(1)29 b(to)f(2)2702
2905 y Fs(n)2766 2935 y Fc(do)p 0 TeXcolorgray 2048 3034
a FD(6:)p 0 TeXcolorgray 208 w Fz(x)19 b Fv(=)e Fz(Lx)p
0 TeXcolorgray 2048 3134 a FD(7:)p 0 TeXcolorgray 208
w Fc(if)29 b Fz(x)e FA(=)-51 b Fy(2)15 b Fz(V)2559 3146
y Fs(i)2609 3134 y Fc(then)p 0 TeXcolorgray 2048 3234
a FD(8:)p 0 TeXcolorgray 287 w Fz(V)2433 3246 y Fs(i)2472
3234 y Fv(=)f Fz(V)2598 3246 y Fs(i)2630 3234 y Fy([)e
Fz(x)p 0 TeXcolorgray 2048 3333 a FD(9:)p 0 TeXcolorgray
291 w Fc(if)29 b Fz(i)18 b FA(>)g FC(1)29 b(and)f Fz(x)18
b Fy(2)d Fz(V)2986 3346 y Fs(i)p Fq(\000)p Fo(1)3097
3333 y Fy([)8 b Fz(V)3207 3346 y Fs(i)p Fq(\000)p Fo(2)3317
3333 y Fy([)k FA(:::)g Fy([)c Fz(V)3575 3346 y Fo(1)3638
3333 y Fc(then)p 0 TeXcolorgray 2015 3433 a FD(10:)p
0 TeXcolorgray 374 w Fc(continue)p 0 TeXcolorgray 2015
3532 a FD(11:)p 0 TeXcolorgray 291 w Fc(end)29 b(if)p
0 TeXcolorgray 2015 3632 a FD(12:)p 0 TeXcolorgray 208
w Fc(else)p 0 TeXcolorgray 2015 3732 a FD(13:)p 0 TeXcolorgray
291 w FC(There)f(e)o(xist)c Fz(V)2854 3702 y Fs(k)2840
3755 y(i)2916 3732 y FC(such)k(that)d Fz(V)3308 3702
y Fs(k)3294 3755 y(i)3369 3732 y FC(equal)j(to)h Fz(x)p
0 TeXcolorgray 2015 3831 a FD(14:)p 0 TeXcolorgray 291
w FC(The)128 b Fz(i)p FC(-th)h(c)o(ycle)f(of)g Fv(\()p
Fz(n)p FA(;)9 b Fz(k)q Fv(\))130 b FC(NFSR)g(is)2390
3935 y Fw(C)2445 3947 y Fs(i)2485 3935 y Fv(=)18 b Fy(f)l
Fz(V)2667 3904 y Fs(k)2653 3958 y(i)2699 3935 y FA(;)5
b Fz(V)2788 3901 y Fs(k)q Fm(+)p Fo(1)2774 3959 y Fs(i)2899
3935 y FA(;)k(:::;)c Fz(V)3099 3893 y Fs(j)r Fq(\000)p
Fo(1)3075 3959 y Fs(i)3200 3935 y Fy(g)p FC(.)p 0 TeXcolorgray
2015 4034 a FD(15:)p 0 TeXcolorgray 291 w Fc(continue)p
0 TeXcolorgray 2015 4134 a FD(16:)p 0 TeXcolorgray 208
w Fc(end)29 b(if)p 0 TeXcolorgray 2015 4233 a FD(17:)p
0 TeXcolorgray 125 w Fc(end)g(f)n(or)p 0 TeXcolorgray
2015 4333 a FD(18:)p 0 TeXcolorgray 42 w Fc(end)g(f)n(or)p
0 TeXcolorgray 2015 4433 a FD(19:)p 0 TeXcolorgray 42
w Fz(Re)18 b Fv(=)g Fx(D)2381 4446 y Fo(2)2412 4428 y
Fk(n)2456 4433 y Fy(n)8 b Fz(V)2553 4446 y Fo(1)2598
4433 y Fy([)g Fz(V)2708 4446 y Fo(2)2754 4433 y Fy([)k
FA(:::)g Fy([)c Fz(V)3012 4450 y Fq(j)p Fs(S)p Fq(j)p
0 TeXcolorgray 2015 4532 a FD(20:)p 0 TeXcolorgray 42
w Fz(i)18 b Fv(=)g FC(0)p 0 TeXcolorgray 2015 4632 a
FD(21:)p 0 TeXcolorgray 42 w Fc(while)29 b Fz(Re)18 b
Fy(6)p Fv(=)g Fg(?)29 b Fc(do)p 0 TeXcolorgray 2015 4732
a FD(22:)p 0 TeXcolorgray 125 w Fz(i)18 b Fv(=)g Fz(i)12
b Fv(+)g(+)p 0 TeXcolorgray 2015 4831 a FD(23:)p 0 TeXcolorgray
125 w FC(Let)20 b Fz(x)h FC(denote)e(the)h(\002rst)h(number)e(of)h(set)
h Fz(Re)p FC(,)f(there)g(e)o(xist)g Fz(L)3943 4801 y
Fs(k)3976 4831 y Fz(x)14 b Fv(=)2224 4931 y Fz(x)p FC(.)p
0 TeXcolorgray 2015 5030 a FD(24:)p 0 TeXcolorgray 125
w FC(The)28 b Fy(j)p Fz(S)q Fy(j)12 b Fv(+)g Fz(i)p FC(-th)26
b(c)o(ycle)i(is)i Fw(C)3045 5048 y Fq(j)p Fs(S)p Fq(j)p
Fm(+)p Fs(i)3198 5030 y Fv(=)18 b Fy(f)p Fz(x)p FA(;)9
b Fz(Lx)p FA(;)g(:::;)g Fz(L)3654 5000 y Fs(k)q Fq(\000)p
Fo(1)3766 5030 y Fz(x)p Fy(g)p 0 TeXcolorgray 2015 5130
a FD(25:)p 0 TeXcolorgray 125 w Fz(Re)18 b Fv(=)g Fz(Re)12
b Fy(n)g Fw(C)2622 5147 y Fq(j)p Fs(S)p Fq(j)p Fm(+)p
Fs(i)p 0 TeXcolorgray 2015 5230 a FD(26:)p 0 TeXcolorgray
42 w Fc(end)29 b(while)p 0 TeXcolorgray 2000 5267 V 0
TeXcolorgray 0 TeXcolorgray eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -192 -50 a Fz(B.)41 b(The)29 b(period)e(of)i
Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))30 b Fz(NFSR)-109
94 y FC(In)i(this)i(section,)e(before)f(the)i(in)m(v)o(estigation)d(of)
j(period)e(of)i Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))-192
194 y FC(NFSR,)29 b(we)g(\002rstly)g(gi)n(v)o(e)f(the)g(follo)n(wing)f
(lemma.)-109 299 y(Since)33 b(the)h(state)g(of)f(an)g
Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))35 b FC(NFSR)f(is)g(\002nite,)g
(we)f(can)h(obtain)-192 399 y(the)29 b(follo)n(wing)d(lemma.)p
0 TeXcolorgray -109 504 a Fz(Lemma)i(3:)p 0 TeXcolorgray
41 w FC(F)o(or)f(arbitrary)f(initial)h(state)h FB(d)1183
474 y Fs(i)1173 529 y Fo(2)1204 511 y Fk(n)1265 504 y
FC(of)e(an)i Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))28
b FC(NFSR,)-192 603 y FB(d)-141 573 y Fs(i)-151 628 y
Fo(2)-120 611 y Fk(n)-58 603 y FC(al)o(w)o(ays)h(can)f(reach)g(a)h(c)o
(ycle)f(or)g(an)h(equilibrium)d(point.)-109 709 y(From)35
b(Lemma)g(3,)h(in)g(the)g(ne)o(xt,)f(we)h(only)f(need)g(to)h(in)m(v)o
(estigate)-192 808 y(the)31 b(output)f(sequence)g(of)h(state)h(in)f(a)h
(c)o(ycle.)f(So)g(in)g(this)h(paper)m(,)e(the)-192 908
y(minimal)g(period)f(of)h(output)g(sequence)f(of)h(a)h(state)g(in)g
Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))32 b FC(NFSR)-192
1007 y(means)i(that)g(the)g(minimal)f(period)g(is)i(for)e(the)h(state)h
(in)f(a)g(c)o(ycle)g(of)-192 1107 y Fv(\()p Fz(n)p FA(;)9
b Fz(k)q Fv(\))26 b FC(NFSR.)g(In)f(the)g(follo)n(wing,)e(we)i
(\002rstly)h(gi)n(v)o(e)e(the)h(de\002nition)f(of)-192
1207 y(minimal)31 b(period)f(of)h(output)f(sequence)g(of)h(the)g(state)
h(in)g(a)f(c)o(ycle)g(of)-192 1306 y Fv(\()p Fz(n)p FA(;)9
b Fz(k)q Fv(\))29 b FC(NFSR.)-109 1411 y(In)j([1],)g(E.Dubro)o(v)n(a)e
Fz(et)j(al.)g FC(proposed)e(that)h(the)h(minimal)f(period)-192
1511 y(of)38 b(the)g(output)g(sequence)f(of)h(an)g Fv(\()p
Fz(n)p FA(;)9 b Fz(k)q Fv(\))40 b FC(NFSR)f(is)g(not)f(necessary)-192
1611 y(equal)g(to)g(the)g(length)f(of)h(the)g(c)o(ycle)g(of)g(its)h
(state.)f(But)h(the)o(y)f(only)-192 1710 y(pro)o(vide)25
b(a)i(method)f(to)h(compute)e(the)i(c)o(ycle)f(of)h(an)g
Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))28 b FC(NFSR,)f(so)-192
1810 y(in)e(the)g(follo)n(wing,)d(we)k(will)f(pro)o(vide)e(an)h
(algorithm)g(to)g(compute)g(the)-192 1909 y(period)29
b(of)i(the)g(output)e(sequence)h(of)g(an)h Fv(\()p Fz(n)p
FA(;)9 b Fz(k)q Fv(\))32 b FC(NFSR.)f(Before)g(the)-192
2009 y(proposal)c(of)i(the)g(algorithm,)e(we)i(pro)o(vide)e(a)i
(theorem)f(to)h(sho)n(w)g(the)-192 2109 y(relationship)20
b(between)h(the)h(period)f(of)g(output)g(sequence)g(of)g(the)h(state)
-192 2208 y(in)29 b(a)g(c)o(ycle)f(and)f(the)i(length)f(of)g(the)g(c)o
(ycle)g(of)h(an)f Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))29
b FC(NFSR.)p 0 TeXcolorgray -109 2313 a Fz(Theor)m(em)f(3:)p
0 TeXcolorgray 41 w FC(If)36 b(the)h(length)e(of)h(a)h(c)o(ycle)f
Fw(C)h Fv(=)22 b Fy(f)p Fz(e)1447 2326 y Fo(0)1482 2313
y FA(;)9 b Fz(e)1551 2326 y Fo(1)1586 2313 y FA(;)g(:::;)g
Fz(e)1756 2327 y Fs(l)s Fq(\000)p Fo(1)1859 2313 y Fy(g)-192
2413 y FC(of)35 b Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))36
b FC(NFSRs)g(is)g Fz(l)t FC(,)g(then)f(the)g(period)e(of)i(output)f
(sequence)g(of)-192 2513 y(c)o(ycle)d Fw(C)14 b FC(\))32
b(is)g(one)f(of)g(the)g(di)n(visor)g(of)g Fz(l)t FC(,)h(and)e(the)i
(period)e(of)h(output)-192 2612 y(sequence)c(of)h(e)n(v)o(ery)e
(initial)j(state)g Fz(e)889 2624 y Fs(i)910 2612 y FA(;)g
FC(0)17 b Fy(\024)h Fz(i)g Fy(\024)g Fz(l)e Fy(\000)11
b FC(1)28 b(is)h(equal)e(to)i(the)-192 2712 y(period)e(of)h(output)g
(sequence)f(of)h(c)o(ycle)g Fw(C)14 b FC(.)-26 2817 y
Fz(Pr)l(oof:)30 b FC(Let)36 b Fz(p)407 2831 y Fn(C)493
2817 y FC(denote)29 b(the)i(period)e(of)h(the)g(output)f(sequence)-192
2917 y(of)j(c)o(ycle)h Fw(C)14 b FC(,)33 b(and)f(let)40
b Fz(p)559 2929 y Fs(i)613 2917 y FC(denote)32 b(the)g(period)g(of)g
(output)g(sequence)-192 3016 y(of)d(initial)h(state)h
Fz(e)351 3028 y Fs(i)372 3016 y FC(,)f(and)f Fz(l)596
3028 y Fs(i)647 3016 y FC(denote)g(the)g(output)g(sequence)f(of)h
(initial)-192 3116 y(state)i Fz(e)28 3128 y Fs(i)49 3116
y FC(.)f(Let)g Fz(O)301 3130 y Fn(C)376 3116 y Fv(=)19
b Fy(f)p Fz(O)562 3086 y Fo(0)562 3143 y Fn(C)617 3116
y FA(;)640 3086 y Fo(1)640 3142 y Fn(C)704 3116 y FA(;)9
b(:::;)g Fz(O)897 3082 y Fs(l)s Fq(\000)p Fo(1)897 3143
y Fn(C)1000 3116 y Fy(g)31 b FC(with)f(length)f Fz(l)35
b FC(denote)29 b(the)-192 3216 y(output)e(sequence)h(of)g(c)o(ycle)g
Fw(C)43 b FC(which)28 b(start)h(at)g(state)g Fz(e)1493
3229 y Fo(0)1528 3216 y FC(.)-109 3321 y(Because)k Fw(C)48
b FC(is)34 b(a)f(c)o(ycle,)f(so)i Fz(l)k FC(is)c(one)e(of)h(period)e
(of)i(the)g(output)-192 3420 y(sequence)18 b(of)i(c)o(ycle)f
Fw(C)14 b FC(.)20 b(Apparently)-5 b(,)17 b(the)j(multiple)f(of)g
Fz(l)25 b FC(is)20 b(the)g(period)-192 3520 y(of)26 b(output)f
(sequence)g(of)g(c)o(ycle)h Fw(C)14 b FC(.)27 b(W)-7
b(e)27 b(also)f(can)g(kno)n(w)f(that)h(one)g(of)-192
3619 y(the)k(di)n(visor)f(of)h Fz(l)35 b FC(is)c(the)f(period)e(of)i
(the)g(output)f(sequence)g(of)g(c)o(ycle)-192 3719 y
Fw(C)14 b FC(.)36 b(Since)f Fz(e)191 3731 y Fs(i)235
3719 y Fy(2)22 b Fw(C)14 b FC(,)36 b(so)42 b Fz(p)596
3731 y Fs(i)653 3719 y FC(must)35 b(be)g(a)h(di)n(visors)f(of)g
Fz(l)t FC(.)h(The)f(output)-192 3819 y(sequence)d(of)h
Fz(e)286 3831 y Fs(i)341 3819 y FC(is)h(equi)n(v)n(alent)e(to)h(the)g
(output)f(sequence)g(of)h(c)o(ycle)-192 3918 y Fw(C)45
b FC(after)29 b Fz(i)i FC(times)g(shifts.)f(So)g(the)g(period)f(of)h
(output)e(sequence)h Fz(e)1793 3930 y Fs(i)1845 3918
y FC(is)-192 4018 y(equal)f(to)35 b Fz(p)159 4032 y Fn(C)214
4018 y FC(.)p 1852 4018 49 49 v -109 4123 a(From)k(Theorem)e(3,)i(we)h
(can)f(kno)n(w)f(that)h(the)g(minimal)g(period)-192 4223
y(of)32 b(e)n(v)o(ery)g(state)h(in)g(a)g(c)o(ycle)f(is)h(the)g(same,)f
(so)h(the)g(in)m(v)o(estigation)d(of)-192 4322 y(minimal)23
b(period)f(of)i(output)e(sequence)g(of)i(a)g(state)g(can)g(be)f(called)
h(the)-192 4422 y(in)m(v)o(estigation)h(of)i(minimal)f(period)g(of)h(a)
h(c)o(ycle)e(of)h(an)h Fv(\()p Fz(n)p FA(;)9 b Fz(k)q
Fv(\))28 b FC(NFSR.)-109 4527 y(No)n(w)-5 b(,)19 b(based)f(on)h
(Theorem)f(\(3\),)g(we)i(gi)n(v)o(e)e(a)i(algorithm)e(to)h(compute)-192
4627 y(the)24 b(period)e(of)i(output)e(sequence)h(of)g(a)h(initial)g
(state)h(of)e Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))25
b FC(NFSR.)-192 4726 y(The)i(follo)n(wing)f(algorithm)g(is)j(based)e
(on)g(all)h(c)o(ycle)g(of)f Fv(\()p Fz(n)p FA(;)9 b Fz(k)q
Fv(\))29 b FC(NFSR)-192 4826 y(is)39 b(kno)n(wn,)e(the)h(length)g(of)g
(the)h(c)o(ycle)f(is)h(denoted)e(by)h Fz(l)t FC(,)h(and)f(the)-192
4926 y(period)33 b(of)g(the)h(output)f(sequence)f(of)i(the)g(c)o(ycle)f
(is)i(denoted)d(by)40 b Fz(p)p FC(.)-192 5025 y(Algorithm)30
b(2)h(only)f(can)h(compute)e(the)i(minimal)g(period)e(of)i(output)-192
5125 y(sequence)21 b(of)h(a)h(c)o(ycle.)f(So)g(if)h(we)g(w)o(ant)f(to)g
(compute)f(minimal)h(period)-192 5224 y(of)28 b(all)h(c)o(ycle,)f
(Algorithm)f(2)i(should)e(be)i(used)f(repeatedly)-5 b(.)-109
5329 y(So)24 b(the)f(period)f(of)h Fv(\()p Fz(n)p FA(;)9
b Fz(k)q Fv(\))24 b FC(NFSR)g(can)g(be)f(found)e(by)i(the)g(follo)n
(wing)-192 5429 y(steps:)p 0 TeXcolorgray 0 TeXcolorgray
2000 -143 2093 7 v 0 TeXcolorgray 2000 -64 a Fc(Algorithm)d(3)h
FC(The)e(period)g(of)h(output)f(sequence)g(of)h(a)h(c)o(ycle)f(of)g
Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))2000 35 y FC(NFSR.)p
0 TeXcolorgray 2000 56 2093 4 v 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 2141 147 a(initial)35 b Fz(p)18 b Fv(=)g
Fz(l)p 0 TeXcolorgray 2048 246 a FD(2:)p 0 TeXcolorgray
42 w Fc(f)n(or)57 b Fz(i)19 b Fv(=)e FC(1)29 b(to)g Fz(s)g
Fc(do)p 0 TeXcolorgray 0 TeXcolorgray 2224 346 a FC(\003ag=true)p
0 TeXcolorgray 2048 445 a FD(4:)p 0 TeXcolorgray 125
w Fc(if)g Fz(i)g FC(is)g(a)g(di)n(visor)f(of)g Fz(l)33
b Fc(then)p 0 TeXcolorgray 0 TeXcolorgray 2307 545 a
Fz(I)2333 558 y Fo(1)2388 545 y FC(is)22 b(a)f(subsequence)d(which)i
(formed)f(by)h(the)g(1-th)g(element)2307 645 y(to)29
b Fz(i)p FC(-th)f(element)g(of)g(c)o(ycle)g Fw(C)p 0
TeXcolorgray 2048 744 a FD(6:)p 0 TeXcolorgray 208 w
Fc(f)n(or)40 b Fz(j)21 b Fv(=)d FC(1)29 b(to)f Fz(l)t
FA(=)6 b Fz(p)12 b Fy(\000)g FC(1)27 b Fc(do)p 0 TeXcolorgray
0 TeXcolorgray 2390 844 a Fz(I)2416 857 y Fo(2)2485 844
y FC(is)36 b(a)f(subsequence)e(which)h(formed)e(by)i(the)47
b Fz(j)16 b Fy(\003)e Fz(i)p FC(-th)2390 944 y(element)28
b(to)h Fv(\()12 b Fz(j)i Fv(+)e FC(1)p Fv(\))g Fy(\003)g
Fz(i)g Fy(\000)g FC(1-th)24 b(element)k(of)g(c)o(ycle)g
Fw(C)14 b FC(.)p 0 TeXcolorgray 2048 1043 a FD(8:)p 0
TeXcolorgray 291 w Fc(if)29 b Fz(I)2496 1056 y Fo(1)2549
1043 y Fy(6)p Fv(=)18 b Fz(I)2658 1056 y Fo(2)2721 1043
y Fc(then)p 0 TeXcolorgray 0 TeXcolorgray 2473 1143 a
FC(\003ag=f)o(alse)p 0 TeXcolorgray 2015 1242 a FD(10:)p
0 TeXcolorgray 291 w Fc(end)29 b(if)p 0 TeXcolorgray
0 TeXcolorgray 2307 1342 a(end)g(f)n(or)p 0 TeXcolorgray
2015 1442 a FD(12:)p 0 TeXcolorgray 125 w Fc(end)g(if)p
0 TeXcolorgray 0 TeXcolorgray 2224 1541 a(if)g FC(\003ag=true)e
Fc(then)p 0 TeXcolorgray 2015 1641 a FD(14:)p 0 TeXcolorgray
208 w Fc(if)i Fz(i)18 b FA(<)24 b Fz(p)29 b Fc(then)p
0 TeXcolorgray 0 TeXcolorgray 2396 1741 a Fz(p)18 b Fv(=)g
Fz(i)p 0 TeXcolorgray 2015 1840 a FD(16:)p 0 TeXcolorgray
208 w Fc(end)29 b(if)p 0 TeXcolorgray 0 TeXcolorgray
2224 1940 a(end)g(if)p 0 TeXcolorgray 2015 2039 a FD(18:)p
0 TeXcolorgray 42 w Fc(end)g(f)n(or)p 0 TeXcolorgray
2000 2077 V 0 TeXcolorgray 2083 2350 a Fq(\017)p 0 TeXcolorgray
49 w FC(Finding)f(all)h(c)o(ycle)f(of)g(the)h Fv(\()p
Fz(n)p FA(;)9 b Fz(k)q Fv(\))29 b FC(NFSR.)p 0 TeXcolorgray
2083 2450 a Fq(\017)p 0 TeXcolorgray 49 w FC(Finding)19
b(the)g(minimal)g(period)f(of)h(all)h(c)o(ycle)f(of)g(the)g
Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))20 b FC(NFSR)2163
2549 y(by)28 b(using)g(Algorithm)f(1.)p 0 TeXcolorgray
2083 2649 a Fq(\017)p 0 TeXcolorgray 49 w FC(Finding)33
b(the)g(max)g(minimal)f(period)g(of)h(all)h(the)g(c)o(ycle)e(of)h(the)
2163 2749 y Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))30 b
FC(NFSR.)2000 2917 y Fz(C.)41 b(The)29 b(period)f(of)g(synthesis)h(of)g
Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))p Fz(-NFSR)28 b(by)h(composition)
2083 3048 y FC(In)h(this)i(subsection,)d(in)i(order)f(to)g(increase)h
(the)g(period)e(of)i Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))2000
3147 y FC(NFSR,)24 b(a)f(method)e(is)j(pro)o(vided)c(in)j([1)o(].)g(In)
f([1],)g(the)o(y)g(constructed)g(an)2000 3247 y Fv(\()p
Fz(n)p FA(;)9 b Fz(k)q Fv(\))20 b FC(NFSR)g(with)f(guaranteed)e(long)i
(period)e(by)i(composing)e(se)n(v)o(eral)2000 3347 y(smaller)26
b(NFSR)h(w)o(orking)d(in)i(parallel)f(and)h(combining)d(their)j(output)
2000 3446 y(using)i(operator)e Fy(\010)p FC(.)2083 3547
y(Let)36 b Fz(N)2283 3560 y Fo(1)2318 3547 y FA(;)9 b
Fz(N)2403 3560 y Fo(2)2438 3547 y FA(;)g(:::)p Fz(N)2592
3559 y Fs(m)2678 3547 y FC(be)35 b Fv(\()p Fz(n)2866
3560 y Fo(1)2901 3547 y FA(;)9 b Fz(k)2970 3560 y Fo(1)3005
3547 y Fv(\))p FA(;)g Fv(\()p Fz(n)3143 3560 y Fo(2)3178
3547 y FA(;)g Fz(k)3247 3560 y Fo(2)3282 3547 y Fv(\))p
FA(;)g(:::;)g Fv(\()p Fz(n)3521 3559 y Fs(m)3570 3547
y FA(;)g Fz(k)3639 3559 y Fs(m)3687 3547 y Fv(\))37 b
FC(NFSR)g(re-)2000 3647 y(specti)n(v)o(ely)-5 b(.)18
b(Let)j Fz(R)g FC(be)f(an)h Fv(\()p Fz(n)p FA(;)9 b Fz(k)q
Fv(\))21 b FC(NFSR)h(composed)d(by)h Fz(N)3713 3660 y
Fo(1)3748 3647 y FA(;)9 b Fz(N)3833 3660 y Fo(2)3868
3647 y FA(;)g(:::)p Fz(N)4022 3659 y Fs(m)4071 3647 y
FC(,)2000 3747 y(where)20 b Fz(n)15 b Fv(=)f Fz(n)2402
3760 y Fo(1)2445 3747 y Fv(+)8 b Fz(n)2560 3760 y Fo(2)2602
3747 y Fv(+)g FA(:::)g Fv(+)g Fz(n)2867 3759 y Fs(m)2914
3747 y FC(,)21 b(and)g Fz(k)16 b Fv(=)f Fz(max)p Fy(f)p
Fz(k)3449 3760 y Fo(1)3483 3747 y FA(;)9 b Fz(k)3552
3760 y Fo(2)3587 3747 y FA(;)g(:::;)g Fz(k)3757 3759
y Fs(m)3805 3747 y Fy(g)p FC(.)21 b(Let)d Fz(C)4071 3759
y Fs(i)2000 3846 y FC(denote)24 b(the)h(number)f(of)h
Fz(N)2802 3858 y Fs(i)2823 3846 y FC(')-5 b(s)26 b(c)o(ycles.)f(Let)h
Fz(L)3340 3858 y Fs(i)9 b(j)3415 3846 y FC(denote)24
b(length)g(of)h(the)2012 3946 y Fz(j)r FC(-th)f(c)o(ycle)g
Fw(C)2408 3958 y Fs(i)9 b(j)2482 3946 y FC(of)24 b(states)h(in)g
Fz(N)2928 3958 y Fs(i)2949 3946 y FC(,)g Fz(i)16 b Fy(2)h(f)p
FC(1)p FA(;)9 b FC(2)p FA(;)g(:::;)g Fz(m)p Fy(g)p FC(,)35
b Fz(j)19 b Fy(2)e(f)p FC(1)p FA(;)9 b FC(2)p FA(;)g(:::;)c
Fz(C)4009 3958 y Fs(i)4030 3946 y Fy(g)p FC(.)2083 4047
y(The)27 b(ne)n(w)h(composed)d Fv(\()p Fz(n)p FA(;)9
b Fz(k)q Fv(\))29 b FC(NFSR)g(can)e(be)h(e)o(xpressed)e(as)j(a)f(BN)
2000 4147 y(as)h(follo)n(wing:)2045 4243 y Ff(8)2045
4317 y(>)2045 4342 y(>)2045 4367 y(>)2045 4392 y(>)2045
4417 y(>)2045 4442 y(>)2045 4467 y(>)2045 4492 y(>)2045
4517 y(>)2045 4542 y(>)2045 4566 y(>)2045 4591 y(>)2045
4616 y(>)2045 4641 y(>)2045 4666 y(>)2045 4691 y(<)2045
4840 y(>)2045 4865 y(>)2045 4890 y(>)2045 4915 y(>)2045
4940 y(>)2045 4965 y(>)2045 4990 y(>)2045 5015 y(>)2045
5040 y(>)2045 5065 y(>)2045 5090 y(>)2045 5114 y(>)2045
5139 y(>)2045 5164 y(>)2045 5189 y(>)2045 5214 y(:)2186
4297 y Fz(x)2223 4309 y Fs(i)2244 4297 y Fv(\()n Fz(t)17
b Fv(+)12 b FC(1)p Fv(\))17 b(=)30 b Fz(f)2602 4309 y
Fs(i)2624 4297 y Fv(\()p Fz(x)2693 4314 y Fm(\()p Fs(i)p
Fm(+)p Fo(1)p Fm(\))p Fs(mod)h(n)3009 4297 y FA(;)9 b
Fz(x)3078 4309 y Fs(i)3095 4321 y Fi(1)3129 4297 y FA(;)g(:::;)g
Fz(x)3299 4309 y Fs(i)3316 4322 y Fk(k)3338 4339 y Fi(1)3367
4322 y Fd(\000)p Fi(1)3439 4297 y Fv(\))p FA(;)g FC(0)18
b Fy(\024)g Fz(i)h Fy(\024)f Fz(n)3813 4310 y Fo(1)3847
4297 y FA(;)2174 4433 y Fz(x)2211 4445 y Fs(i)2232 4433
y Fv(\()n Fz(t)f Fv(+)12 b FC(1)p Fv(\))17 b(=)30 b Fz(f)2590
4445 y Fs(i)2612 4433 y Fv(\()p Fz(x)2681 4451 y Fm(\()p
Fs(i)p Fm(+)p Fo(1)p Fm(\))p Fs(mod)i(n)2997 4433 y FA(;)9
b Fz(x)3066 4445 y Fs(i)3083 4457 y Fi(1)3117 4433 y
FA(;)g(:::;)g Fz(x)3287 4445 y Fs(i)3304 4458 y Fk(k)3326
4475 y Fi(2)3355 4458 y Fd(\000)p Fi(1)3427 4433 y Fv(\))p
FA(;)g Fz(n)3533 4446 y Fo(1)3586 4433 y Fy(\024)18 b
Fz(i)h Fy(\024)f Fz(n)3836 4446 y Fo(1)3577 4570 y Fv(+)p
Fz(n)3684 4583 y Fo(2)3730 4570 y Fy(\000)12 b FC(1)p
FA(;)3850 4683 y FC(.)3850 4716 y(.)3850 4749 y(.)2128
4942 y Fz(x)2165 4954 y Fs(i)2186 4942 y Fv(\()n Fz(t)18
b Fv(+)12 b FC(1)p Fv(\))17 b(=)30 b Fz(f)2545 4954 y
Fs(i)2567 4942 y Fv(\()p Fz(x)2636 4960 y Fm(\()p Fs(i)p
Fm(+)p Fo(1)p Fm(\))p Fs(mod)h(n)2952 4942 y FA(;)9 b
Fz(x)3021 4954 y Fs(i)3038 4966 y Fi(1)3071 4942 y FA(;)g(:::;)g
Fz(x)3241 4954 y Fs(i)3258 4967 y Fk(k)3280 4974 y(m)3321
4967 y Fd(\000)p Fi(1)3393 4942 y Fv(\))p FA(;)3457 4853
y Fs(m)p Fq(\000)p Fo(1)3476 4960 y Fe(\345)3475 5028
y Fs(j)r Fm(=)p Fo(1)3589 4942 y Fz(n)3640 4954 y Fs(j)3681
4942 y Fy(\024)18 b Fz(i)h Fy(\024)3560 5109 y Fs(m)3540
5215 y Fe(\345)3538 5283 y Fs(j)r Fm(=)p Fo(1)3645 5198
y Fz(n)3696 5210 y Fs(j)3730 5198 y Fy(\000)12 b FC(1)p
FA(;)p 0 TeXcolorgray 3995 4786 a FC(\(9\))p 0 TeXcolorgray
2000 5429 a(where)28 b Fz(x)2269 5441 y Fs(i)2290 5429
y Fv(\()n Fz(t)6 b Fv(\))18 b Fy(2)h Fw(D)8 b FC(.)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -109 -50 a FC(Let)30 b Fz(y)p Fv(\()n Fz(t)6
b Fv(\))31 b FC(denote)d(the)i(output)f(of)h Fv(\()p
Fz(n)p FA(;)9 b Fz(k)q Fv(\))31 b FC(NFSR)g(at)f(time)e
Fz(t)6 b FC(,)30 b(it)h(can)-192 49 y(be)d(e)o(xpressed)g(as)h(follo)n
(ws:)117 222 y Fz(y)p Fv(\()n Fz(t)6 b Fv(\))19 b(=)f
Fz(x)384 235 y Fo(0)418 222 y Fv(\()n Fz(t)6 b Fv(\))12
b Fy(\010)g Fz(x)635 236 y Fs(k)662 248 y Fi(1)694 222
y Fv(\()n Fz(t)6 b Fv(\))12 b Fy(\010)g Fz(x)911 236
y Fs(k)938 248 y Fi(1)966 236 y Fm(+)p Fs(k)1041 248
y Fi(2)1086 222 y Fy(\010)g FA(:::)g Fy(\010)g Fz(x)1358
256 y Fp(\345)1399 227 y Fk(m)p Fd(\000)p Fi(1)1406 274
y Fk(j)q Fh(=)p Fi(1)1510 252 y Fs(k)1544 263 y Fk(j)1568
222 y FA(;)171 b FC(\(10\))-192 419 y(where)28 b Fz(y)p
Fv(\()n Fz(t)6 b Fv(\))18 b Fy(2)h Fw(D)8 b FC(.)-109
522 y(By)35 b(using)f(Lemma)g(1,)g(system)h(\(9\))f(and)g(equation)f
(\(10\))g(can)i(be)-192 622 y(e)o(xpressed)27 b(as)i(follo)n(ws:)560
794 y Fz(x)p Fv(\()n Fz(t)18 b Fv(+)12 b FC(1)p Fv(\))17
b(=)h Fz(L)965 806 y Fs(c)997 794 y Fz(x)p Fv(\()n Fz(t)6
b Fv(\))p FA(;)614 b FC(\(11\))-192 967 y(with)29 b(output)e(as)i
(follo)n(ws:)631 1139 y Fz(y)p Fv(\()n Fz(t)6 b Fv(\))18
b(=)g Fz(H)6 b(x)p Fv(\()n Fz(t)g Fv(\))p FA(;)685 b
FC(\(12\))-192 1311 y(where)38 b Fz(x)p Fv(\()n Fz(t)6
b Fv(\))25 b(=)e Fg(n)356 1278 y Fs(n)p Fq(\000)p Fo(1)356
1337 y Fs(i)p Fm(=)p Fo(0)469 1311 y Fz(x)506 1323 y
Fs(i)527 1311 y Fv(\()n Fz(t)6 b Fv(\))25 b Fy(2)f Fx(D)773
1324 y Fo(2)804 1306 y Fk(n)837 1311 y FC(,)39 b Fz(y)p
Fv(\()n Fz(t)6 b Fv(\))24 b Fy(2)g Fx(D)p FC(,)39 b Fz(L)1285
1323 y Fs(c)1341 1311 y Fy(2)25 b Fw(L)1494 1324 y Fo(2)1525
1306 y Fk(n)1553 1324 y Fq(\002)p Fo(2)1632 1306 y Fk(n)1704
1311 y FC(is)40 b(the)-192 1411 y(state)d(transition)f(matrix)g(of)g
(system)h(\(9\),)e(and)h Fz(H)29 b Fy(2)23 b Fw(L)1527
1424 y Fo(2)p Fq(\002)p Fo(2)1637 1406 y Fk(n)1706 1411
y FC(is)38 b(the)-192 1511 y(structure)28 b(matrix)f(of)i(equation)e
(\(10\).)p 0 TeXcolorgray -109 1614 a Fz(Lemma)h(4:)p
0 TeXcolorgray 41 w FC([1)o(])20 b(The)f(total)h(number)d(of)i(c)o
(ycles)h(of)f(states)h(produced)-192 1714 y(by)28 b(composed)f
Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))29 b FC(NFSR)h(\(9\))e(is)h(gi)n
(v)o(en)e(by)-144 1930 y Fz(N)c Fv(=)142 1948 y Fe(\345)17
2021 y Fq(8)p Fm(\()p Fs(i)92 2033 y Fi(1)121 2021 y
Ft(;:::;)p Fs(i)223 2030 y Fk(m)264 2021 y Fm(\))p Fq(2)p
Fs(I)392 1842 y(m)365 1949 y Fe(\325)370 2016 y Fs(j)r
Fm(=)p Fo(2)468 1930 y Fv(\(\(\()p Fz(L)610 1943 y Fo(1)p
Fs(i)658 1955 y Fi(1)703 1930 y FA(?)12 b Fz(L)803 1943
y Fo(2)p Fs(i)851 1955 y Fi(2)895 1930 y FA(?)g Fz(L)995
1943 y Fo(3)p Fs(i)1043 1955 y Fi(3)1075 1930 y FA(:::)g(?)g
Fz(L)1265 1943 y Fs(j)r Fq(\000)p Fo(1)p Fs(i)1387 1955
y Fk(j)q Fd(\000)p Fi(1)1472 1930 y Fv(\))g Fy(\005)g
Fz(L)1625 1942 y Fs(j)r(i)1668 1953 y Fk(j)1691 1930
y FA(;)48 b FC(\(13\))-109 2178 y(where)24 b(the)h(set)g
Fz(I)389 2190 y Fs(i)436 2178 y FC(represents)e(inde)o(x)o(es)h(of)g(c)
o(ycles)h(of)f(states)i(of)f(the)-192 2277 y(NFSR)30
b Fz(N)98 2289 y Fs(i)119 2277 y FC(,)f Fz(I)22 b Fv(=)c
Fz(I)328 2290 y Fo(1)374 2277 y Fy(\002)12 b Fz(I)477
2290 y Fo(2)522 2277 y Fy(\002)g FA(:::)g Fy(\002)g Fz(I)783
2289 y Fs(m)829 2277 y FC(.)p 0 TeXcolorgray -109 2381
a Fz(Lemma)28 b(5:)p 0 TeXcolorgray 41 w FC(F)o(or)19
b(the)h(ne)n(w)f(composed)e Fv(\()p Fz(n)p FA(;)9 b Fz(k)q
Fv(\))21 b FC(NFSR)f(\(9\),)f(the)g(c)o(ycle)-192 2480
y(of)29 b(states)i(can)f(be)g(composed)e(by)h Fz(l)880
2493 y Fo(1)p Fs(i)928 2505 y Fi(1)961 2480 y FA(;)9
b Fz(l)1016 2493 y Fo(2)p Fs(i)1064 2505 y Fi(2)1097
2480 y FA(;)g(:::;)g Fz(l)1253 2492 y Fs(mi)1314 2501
y Fk(m)1360 2480 y FC(,)30 b(and)f(the)h(length)-192
2580 y(of)e(composed)f(c)o(ycle)h(is)h Fz(l)t(cm)p Fy(f)p
Fz(L)771 2593 y Fo(1)p Fs(i)819 2605 y Fi(1)852 2580
y FA(;)9 b Fz(L)930 2593 y Fo(2)p Fs(i)978 2605 y Fi(2)1012
2580 y FA(;)g(:::;)g Fz(L)1191 2592 y Fs(mi)1252 2601
y Fk(m)1297 2580 y Fy(g)p FC(.)-109 2683 y(Since)37 b(the)h(form)e(of)h
(composed)f Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))39 b
FC(NFSR)f(\(9\))f(is)h(same)g(as)-192 2783 y Fv(\()p
Fz(n)p FA(;)9 b Fz(k)q Fv(\))28 b FC(NFSR)h(\(8\),)d(the)h(only)f(dif)n
(ference)f(between)i Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))28
b FC(NFSR)g(\(8\))-192 2883 y(and)19 b Fv(\()p Fz(n)p
FA(;)9 b Fz(k)q Fv(\))20 b FC(NFSR)g(\(9\))f(is)h(the)f(output)f(of)h
(the)g(systems.)g(W)-7 b(e)21 b(can)e(obtain)-192 2982
y(a)38 b(similar)g(result)g(about)f(the)h(relationship)e(between)h(the)
h(minimal)-192 3082 y(period)33 b(of)h(output)f(sequence)g(of)h(c)o
(ycle)g Fw(C)49 b FC(and)33 b(the)h(length)g(of)g(the)-192
3182 y(c)o(ycle)28 b Fw(C)14 b FC(.)p 0 TeXcolorgray
-109 3285 a Fz(Theor)m(em)28 b(4:)p 0 TeXcolorgray 41
w FC(If)36 b(the)h(length)e(of)h(a)h(c)o(ycle)f Fw(C)h
Fv(=)22 b Fy(f)p Fz(e)1447 3298 y Fo(0)1482 3285 y FA(;)9
b Fz(e)1551 3298 y Fo(1)1586 3285 y FA(;)g(:::;)g Fz(e)1756
3299 y Fs(l)s Fq(\000)p Fo(1)1859 3285 y Fy(g)-192 3385
y FC(of)38 b Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))39
b FC(NFSR)g(\(9\))e(is)i Fz(l)t FC(,)g(then)e(the)h(minimal)g(period)e
(of)i(output)-192 3484 y(sequence)20 b(of)h(c)o(ycle)g
Fw(C)37 b FC(is)22 b(one)f(of)g(the)g(di)n(visor)g(of)g
Fz(l)t FC(,)h(and)f(the)g(minimal)-192 3584 y(period)g(of)i(output)e
(sequence)h(of)g(e)n(v)o(ery)g(initial)h(state)g Fz(e)1425
3596 y Fs(i)1446 3584 y FA(;)g FC(0)16 b Fy(\024)f Fz(i)h
Fy(\024)f Fz(l)e Fy(\000)c FC(1)-192 3683 y(is)29 b(equal)f(to)h(the)f
(period)g(of)g(output)f(sequence)g(of)i(c)o(ycle)f Fw(C)14
b FC(.)-192 3787 y(W)-7 b(e)26 b(also)e(can)g(obtain)g(a)h(result)f
(about)g(the)g(relationship)f(between)h(the)-192 3886
y(minimal)k(period)f(of)h(the)h(c)o(ycles)f(in)h Fz(m)g
FC(NFSRs.)-109 3990 y(Similar)22 b(to)g(Theorem)f(4,)g(we)i(can)f
(obtain)f(the)h(follo)n(wing)e(theorem.)p 0 TeXcolorgray
-109 4093 a Fz(Theor)m(em)28 b(5:)p 0 TeXcolorgray 41
w FC(F)o(or)47 b(a)i(c)o(ycle)f Fw(C)62 b FC(of)48 b(an)g(composed)e
Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))49 b FC(NF-)-192
4193 y(SR)d(\(11\),)d(c)o(ycle)h Fw(C)60 b FC(is)45 b(composed)e(by)h
Fw(C)1158 4206 y Fo(1)1194 4193 y FA(;)54 b Fw(C)1326
4206 y Fo(2)1361 4193 y FA(;)9 b(:::;)55 b Fw(C)1595
4205 y Fs(m)1689 4193 y FC(in)45 b(the)-192 4292 y Fz(N)-139
4305 y Fo(1)-104 4292 y FA(;)9 b Fz(N)-19 4305 y Fo(2)17
4292 y FA(;)g(:::;)g Fz(N)203 4304 y Fs(m)303 4292 y
FC(NFSRs)52 b(respecti)n(v)o(ely)-5 b(,)49 b(then)h(the)h(least)h
(common)-192 4392 y(multiple)40 b(of)f(the)i(minimal)e(period)g(of)h(c)
o(ycle)g Fw(C)1328 4405 y Fo(1)1363 4392 y FA(;)50 b
Fw(C)1491 4405 y Fo(2)1526 4392 y FA(;)9 b(:::;)50 b
Fw(C)1755 4404 y Fs(m)1845 4392 y FC(is)-192 4492 y(a)29
b(period)e(of)h(output)g(sequence)f(of)h(the)h(c)o(ycle)f
Fw(C)14 b FC(.)p 0 TeXcolorgray -109 4595 a Fz(Remark)28
b(3:)p 0 TeXcolorgray 41 w FC(Since)i(arbitrary)e(c)o(ycle)h(in)h
(composed)e Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))31 b
FC(NFSR)-192 4695 y(\(11\))45 b(is)i(composed)d(by)i
Fw(C)663 4708 y Fo(1)698 4695 y FA(;)56 b Fw(C)832 4708
y Fo(2)867 4695 y FA(;)9 b(:::;)56 b Fw(C)1102 4707 y
Fs(m)1197 4695 y FC(in)46 b(the)g Fz(N)1509 4708 y Fo(1)1545
4695 y FA(;)9 b Fz(N)1630 4708 y Fo(2)1665 4695 y FA(;)g(:::;)g
Fz(N)1851 4707 y Fs(m)-192 4794 y FC(NFSRs)60 b(respecti)n(v)o(ely)-5
b(,)57 b(b)n(ut)i(these)g(c)o(ycle)f Fw(C)1262 4807 y
Fo(1)1298 4794 y FA(;)68 b Fw(C)1444 4807 y Fo(2)1479
4794 y FA(;)9 b(:::;)69 b Fw(C)1727 4806 y Fs(m)1836
4794 y FC(in)-192 4894 y Fz(N)-139 4907 y Fo(1)-104 4894
y FA(;)9 b Fz(N)-19 4907 y Fo(2)17 4894 y FA(;)g(:::;)g
Fz(N)203 4906 y Fs(m)293 4894 y FC(NFSRs)41 b(respecti)n(v)o(ely)e(can)
h(composed)f(more)g(than)-192 4994 y(one)28 b(c)o(ycle)g(in)h(composed)
d Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))30 b FC(NFSR)f(\(11\).)589
5181 y(I)t(V)-7 b(.)45 b FD(E)t(X)t(A)t(M)t(P)t(L)t(E)t(S)-109
5329 y FC(In)h(this)i(section,)e(we)h(gi)n(v)o(e)f(tw)o(o)h(e)o
(xamples)f(to)h(illustrate)f(our)-192 5429 y(theoretical)27
b(results.)p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
2083 -50 a Fz(Example)g(1:)p 0 TeXcolorgray 41 w FC(Consider)f(an)g
Fv(\()p FC(3)p FA(;)9 b FC(3)p Fv(\))26 b FC(NFSR)i(with)e(follo)n
(wing)f(equa-)2000 49 y(tions:)2085 125 y Ff(8)2085 199
y(>)2085 224 y(>)2085 249 y(>)2085 274 y(>)2085 299 y(>)2085
324 y(>)2085 349 y(<)2085 498 y(>)2085 523 y(>)2085 548
y(>)2085 573 y(>)2085 598 y(>)2085 623 y(>)2085 648 y(:)2344
194 y Fz(x)2381 207 y Fo(0)2415 194 y Fv(\()n Fz(t)18
b Fv(+)12 b FC(1)p Fv(\))17 b(=)h(\()p Fz(x)2806 207
y Fo(0)2841 194 y Fv(\()n Fz(t)6 b Fv(\))12 b Fy(^)g
Fz(x)3048 207 y Fo(2)3082 194 y Fv(\()n Fz(t)6 b Fv(\)\))12
b Fy(_)g Fv(\()p Fy(:)p Fz(x)3408 207 y Fo(0)3443 194
y Fv(\()n Fz(t)6 b Fv(\))12 b Fy(^)g Fz(x)3650 207 y
Fo(1)3684 194 y Fv(\()n Fz(t)6 b Fv(\)\))p FA(;)2168
319 y Fz(x)2205 332 y Fo(1)2240 319 y Fv(\()n Fz(t)18
b Fv(+)12 b FC(1)p Fv(\))17 b(=)h(\()p Fz(x)2631 332
y Fo(0)2666 319 y Fv(\()n Fz(t)6 b Fv(\))12 b Fy(^)g
Fv(\()p Fy(:)p Fz(x)2960 332 y Fo(1)2994 319 y Fv(\()n
Fz(t)6 b Fv(\))12 b Fy(_)g(:)p Fz(x)3256 332 y Fo(2)3291
319 y Fv(\()n Fz(t)6 b Fv(\)\)\))12 b Fy(_)g Fv(\()p
Fy(:)p Fz(x)3649 332 y Fo(0)3684 319 y Fv(\()n Fz(t)6
b Fv(\))p Fy(^)3251 443 y Fv(\()p Fy(:)p Fz(x)3375 456
y Fo(1)3411 443 y Fv(\()n Fz(t)g Fv(\))12 b Fy(^)g Fz(x)3618
456 y Fo(2)3652 443 y Fv(\()n Fz(t)6 b Fv(\)\)\))p FA(;)2168
568 y Fz(x)2205 581 y Fo(2)2240 568 y Fv(\()n Fz(t)18
b Fv(+)12 b FC(1)p Fv(\))17 b(=)h(\()p Fz(x)2631 581
y Fo(0)2666 568 y Fv(\()n Fz(t)6 b Fv(\))12 b Fy(^)g
Fv(\()p Fy(:)p Fz(x)2960 581 y Fo(2)2994 568 y Fv(\()n
Fz(t)6 b Fv(\))12 b Fy(^)g(:)p Fz(x)3256 581 y Fo(1)3291
568 y Fv(\()n Fz(t)6 b Fv(\)\)\))12 b Fy(_)g Fv(\()p
Fy(:)p Fz(x)3649 581 y Fo(0)3684 568 y Fv(\()n Fz(t)6
b Fv(\))p Fy(^)3219 692 y Fv(\()p Fy(:)p Fz(x)3343 705
y Fo(1)3378 692 y Fv(\()n Fz(t)g Fv(\))12 b Fy(_)g(:)p
Fz(x)3640 705 y Fo(2)3675 692 y Fv(\()n Fz(t)6 b Fv(\)\)\))p
0 TeXcolorgray 3954 444 a FC(\(14\))p 0 TeXcolorgray
2000 853 a(By)36 b(using)f(the)g(method)g(of)g(STP)-9
b(,)35 b(we)h(can)g(turn)f(system)g(\(14\))g(into)2000
953 y(follo)n(wing)27 b(multi-linear)g(form:)2750 1127
y Fz(x)p Fv(\()n Fz(t)18 b Fv(+)12 b FC(1)p Fv(\))17
b(=)h Fz(L)3155 1140 y Fo(1)3190 1127 y Fz(x)p Fv(\()n
Fz(t)6 b Fv(\))p FA(;)613 b FC(\(15\))2000 1301 y(where)28
b Fz(L)2278 1314 y Fo(1)2331 1301 y Fv(=)18 b FB(d)2455
1314 y Fo(8)2490 1301 y Fv([)p FC(4)29 b(6)f(2)h(5)f(8)h(7)f(1)h(3)p
Fv(])p FC(,)f Fz(x)p Fv(\()n Fz(t)6 b Fv(\))19 b(=)f
Fz(x)3388 1314 y Fo(0)3423 1301 y Fv(\()n Fz(t)6 b Fv(\))p
Fz(x)3551 1314 y Fo(1)3585 1301 y Fv(\()n Fz(t)g Fv(\))p
Fz(x)3713 1314 y Fo(2)3748 1301 y Fv(\()n Fz(t)g Fv(\))19
b Fy(2)f Fx(D)3982 1323 y Fo(2)4013 1305 y Fi(3)4046
1301 y FC(.)2083 1404 y(In)31 b Fv(\()p Fz(n)p FA(;)9
b Fz(k)q Fv(\))33 b FC(NFSR)g(\(14\),)e(there)g(is)i(no)e(equilibrium)f
(state,)j(so)f(it)h(is)2000 1504 y(not)28 b(globally)f(stable)i(or)f
(locally)g(stable.)2083 1608 y(W)-7 b(e)24 b(can)f(kno)n(w)f(there)g
(is)i(a)g(c)o(ycle)e(of)h Fv(\()p Fz(n)p FA(;)9 b Fz(k)q
Fv(\))24 b FC(NFSR)g(\(14\),)e(the)h(c)o(ycle)2000 1707
y(is)38 b FB(d)2144 1677 y Fo(1)2134 1732 y(8)2202 1707
y Fy(!)24 b FB(d)2360 1677 y Fo(4)2350 1732 y(8)2418
1707 y Fy(!)f FB(d)2575 1677 y Fo(5)2565 1733 y(8)2634
1707 y Fy(!)g FB(d)2791 1677 y Fo(8)2781 1733 y(8)2849
1707 y Fy(!)h FB(d)3007 1677 y Fo(3)2997 1733 y(8)3065
1707 y Fy(!)f FB(d)3222 1677 y Fo(2)3212 1732 y(8)3281
1707 y Fy(!)g FB(d)3438 1677 y Fo(6)3428 1733 y(8)3496
1707 y Fy(!)h FB(d)3654 1677 y Fo(7)3644 1732 y(8)3712
1707 y Fy(!)f FB(d)3869 1677 y Fo(1)3859 1732 y(8)3904
1707 y FC(.)38 b(The)2000 1807 y(output)27 b(sequence)h(of)g(the)h(c)o
(ycle)f(is)i(11001100.)25 b(The)j(period)g(of)g(this)2000
1907 y(output)33 b(sequence)g(is)j(4,)e(which)g(is)i(coincident)d(with)
i(the)f(result)h(of)2000 2006 y(Theorem)c(3.So)h(we)h(can)f(obtain)g
(that)h(the)f(period)f(of)i Fv(\()p Fz(n)p FA(;)9 b Fz(k)q
Fv(\))33 b FC(NFSR)2000 2106 y(\(14\))27 b(is)j(3.)p
0 TeXcolorgray 2083 2210 a Fz(Example)d(2:)p 0 TeXcolorgray
41 w FC(Consider)f(an)g Fv(\()p FC(3)p FA(;)9 b FC(3)p
Fv(\))26 b FC(NFSR)i(with)e(follo)n(wing)f(equa-)2000
2309 y(tions:)2085 2384 y Ff(8)2085 2459 y(>)2085 2484
y(>)2085 2509 y(>)2085 2534 y(>)2085 2559 y(>)2085 2584
y(>)2085 2609 y(<)2085 2758 y(>)2085 2783 y(>)2085 2808
y(>)2085 2833 y(>)2085 2858 y(>)2085 2883 y(>)2085 2908
y(:)2168 2454 y Fz(x)2205 2467 y Fo(0)2240 2454 y Fv(\()n
Fz(t)18 b Fv(+)12 b FC(1)p Fv(\))17 b(=)h(\()p Fz(x)2631
2467 y Fo(0)2666 2454 y Fv(\()n Fz(t)6 b Fv(\))12 b Fy(^)g(:)p
Fz(x)2928 2467 y Fo(2)2962 2454 y Fv(\()n Fz(t)6 b Fv(\)\))12
b Fy(_)g Fv(\()p Fy(:)p Fz(x)3288 2467 y Fo(0)3323 2454
y Fv(\()n Fz(t)6 b Fv(\))12 b Fy(^)g Fz(x)3530 2467 y
Fo(1)3564 2454 y Fv(\()n Fz(t)6 b Fv(\))12 b Fy(^)g FC(1)p
Fv(\))p FA(;)2224 2579 y Fz(x)2261 2592 y Fo(1)2295 2579
y Fv(\()n Fz(t)18 b Fv(+)12 b FC(1)p Fv(\))17 b(=)h(\()p
Fz(x)2686 2592 y Fo(0)2721 2579 y Fv(\()n Fz(t)6 b Fv(\))12
b Fy(^)g Fv(\()p Fy(:)p Fz(x)3015 2592 y Fo(1)3050 2579
y Fv(\()n Fz(t)6 b Fv(\))12 b Fy(_)g Fz(x)3257 2592 y
Fo(2)3291 2579 y Fv(\()n Fz(t)6 b Fv(\)\)\))12 b Fy(_)g
Fv(\()p Fy(:)p Fz(x)3649 2592 y Fo(0)3684 2579 y Fv(\()n
Fz(t)6 b Fv(\))p Fy(^)3307 2703 y Fv(\()p Fz(x)3376 2716
y Fo(1)3411 2703 y Fv(\()n Fz(t)g Fv(\))12 b Fy(^)g Fz(x)3618
2716 y Fo(2)3652 2703 y Fv(\()n Fz(t)6 b Fv(\)\)\))p
FA(;)2224 2828 y Fz(x)2261 2841 y Fo(2)2295 2828 y Fv(\()n
Fz(t)18 b Fv(+)12 b FC(1)p Fv(\))17 b(=)h(\()p Fz(x)2686
2841 y Fo(0)2721 2828 y Fv(\()n Fz(t)6 b Fv(\))12 b Fy(^)g
Fv(\()p Fz(x)2960 2841 y Fo(1)2994 2828 y Fv(\()n Fz(t)6
b Fv(\))12 b Fy(_)g(:)p Fz(x)3256 2841 y Fo(2)3291 2828
y Fv(\()n Fz(t)6 b Fv(\)\)\))12 b Fy(_)g Fv(\()p Fy(:)p
Fz(x)3649 2841 y Fo(0)3684 2828 y Fv(\()n Fz(t)6 b Fv(\))p
Fy(^)3219 2952 y Fv(\()p Fy(:)p Fz(x)3343 2965 y Fo(1)3378
2952 y Fv(\()n Fz(t)g Fv(\))12 b Fy(^)g(:)p Fz(x)3640
2965 y Fo(2)3675 2952 y Fv(\()n Fz(t)6 b Fv(\)\)\))p
0 TeXcolorgray 3954 2704 a FC(\(16\))p 0 TeXcolorgray
2000 3113 a(By)36 b(using)f(the)g(method)g(of)g(STP)-9
b(,)35 b(we)h(can)g(turn)f(system)g(\(14\))g(into)2000
3213 y(follo)n(wing)27 b(multi-linear)g(form:)2750 3387
y Fz(x)p Fv(\()n Fz(t)18 b Fv(+)12 b FC(1)p Fv(\))17
b(=)h Fz(L)3155 3400 y Fo(2)3190 3387 y Fz(x)p Fv(\()n
Fz(t)6 b Fv(\))p FA(;)613 b FC(\(17\))2000 3561 y(where)30
b Fz(L)2280 3574 y Fo(2)2334 3561 y Fv(=)19 b FB(d)2459
3574 y Fo(8)2494 3561 y Fv([)p FC(5)31 b(3)f(6)h(1)g(2)f(4)h(8)f(7)p
Fv(])p FC(,)h Fz(x)p Fv(\()n Fz(t)6 b Fv(\))20 b(=)f
Fz(x)3411 3574 y Fo(0)3445 3561 y Fv(\()n Fz(t)6 b Fv(\))p
Fz(x)3573 3574 y Fo(1)3608 3561 y Fv(\()n Fz(t)g Fv(\))p
Fz(x)3736 3574 y Fo(2)3771 3561 y Fv(\()n Fz(t)g Fv(\))20
b Fy(2)f Fx(D)4007 3583 y Fo(2)4038 3565 y Fi(3)4071
3561 y FC(.)2000 3660 y(In)35 b Fv(\()p Fz(n)p FA(;)9
b Fz(k)q Fv(\))37 b FC(NFSR)g(\(16\),)e(there)g(is)i(no)f(equilibrium)e
(state,)i(so)h Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))2000
3760 y FC(NFSR)29 b(\(16\))f(is)h(not)f(globally)g(stable)g(or)h
(locally)f(stable.)2083 3864 y(W)-7 b(e)28 b(can)e(kno)n(w)g(that)h
(there)f(are)h(tw)o(o)g(c)o(ycle)f(denoted)f(by)h Fw(C)3852
3877 y Fo(21)3918 3864 y FA(;)9 b Fw(C)4005 3877 y Fo(22)4071
3864 y FC(.)2000 3963 y Fw(C)2055 3976 y Fo(21)2144 3963
y Fv(=)22 b FB(d)2282 3933 y Fo(1)2272 3987 y(8)2341
3963 y Fy(!)h FB(d)2498 3933 y Fo(5)2488 3988 y(8)2556
3963 y Fy(!)g FB(d)2713 3933 y Fo(2)2703 3987 y(8)2771
3963 y Fy(!)h FB(d)2929 3933 y Fo(3)2919 3988 y(8)2987
3963 y Fy(!)f FB(d)3144 3933 y Fo(6)3134 3988 y(8)3202
3963 y Fy(!)g FB(d)3359 3933 y Fo(4)3349 3987 y(8)3418
3963 y Fy(!)g FB(d)3575 3933 y Fo(1)3565 3987 y(8)3610
3963 y FC(,)37 b Fw(C)3723 3976 y Fo(22)3812 3963 y Fv(=)23
b FB(d)3951 3933 y Fo(7)3941 3988 y(8)4009 3963 y Fy(!)2000
4063 y FB(d)2051 4033 y Fo(8)2041 4088 y(8)2102 4063
y Fy(!)16 b FB(d)2252 4033 y Fo(7)2242 4088 y(8)2287
4063 y FC(.)23 b(The)g(output)f(sequence)g(of)h Fw(C)3196
4076 y Fo(21)3285 4063 y FC(is)h(101101)p FA(:::)p FC(.)d(The)i(output)
2000 4163 y(sequence)33 b(of)h Fw(C)2498 4176 y Fo(22)2599
4163 y FC(is)h(00)p FA(:::)p FC(.)f(So)h(we)g(can)f(kno)n(w)f(that)i
(the)f(minimal)2000 4262 y(period)23 b(of)h(output)g(sequence)f(of)h
Fw(C)3047 4275 y Fo(21)3138 4262 y FC(is)i(3,)e(and)g(the)h(minimal)f
(period)2000 4362 y(of)38 b(output)f(sequence)g(of)h
Fw(C)2865 4375 y Fo(22)2969 4362 y FC(is)i(1.)e(So)g(we)h(can)f(obtain)
f(that)h(the)2000 4461 y(period)27 b(of)h Fv(\()p Fz(n)p
FA(;)9 b Fz(k)q Fv(\))30 b FC(NFSR)f(\(16\))f(is)h(3.)p
0 TeXcolorgray 2083 4565 a Fz(Example)e(3:)p 0 TeXcolorgray
41 w FC(Consider)f(an)g Fv(\()p FC(3)p FA(;)9 b FC(3)p
Fv(\))26 b FC(NFSR)i(with)e(follo)n(wing)f(equa-)2000
4665 y(tions:)2113 4752 y Ff(8)2113 4827 y(>)2113 4852
y(>)2113 4877 y(>)2113 4902 y(>)2113 4927 y(>)2113 4952
y(>)2113 4977 y(>)2113 5002 y(>)2113 5026 y(<)2113 5176
y(>)2113 5201 y(>)2113 5226 y(>)2113 5251 y(>)2113 5275
y(>)2113 5300 y(>)2113 5325 y(>)2113 5350 y(>)2113 5375
y(:)2251 4810 y Fz(x)2288 4823 y Fo(0)2323 4810 y Fv(\()n
Fz(t)17 b Fv(+)12 b FC(1)p Fv(\))18 b(=)g(\()p Fz(x)2714
4823 y Fo(0)2749 4810 y Fv(\()n Fz(t)6 b Fv(\))12 b Fy(^)g
Fv(\()p Fz(x)2988 4823 y Fo(1)3022 4810 y Fv(\()n Fz(t)6
b Fv(\))12 b Fy(_)g Fz(x)3229 4823 y Fo(2)3263 4810 y
Fv(\()n Fz(t)6 b Fv(\)\)\))12 b Fy(_)g Fv(\()p Fy(:)p
Fz(x)3621 4823 y Fo(0)3656 4810 y Fv(\()n Fz(t)6 b Fv(\))p
Fy(^)2557 4934 y Fv(\(\()p Fz(x)2658 4947 y Fo(1)2693
4934 y Fv(\()n Fz(t)g Fv(\))12 b Fy(^)g Fz(x)2900 4947
y Fo(2)2935 4934 y Fv(\()n Fz(t)6 b Fv(\)\))12 b Fy(_)g
Fv(\()p Fy(:)p Fz(x)3261 4947 y Fo(1)3295 4934 y Fv(\()n
Fz(t)6 b Fv(\))12 b Fy(^)g(:)p Fz(x)3557 4947 y Fo(2)3592
4934 y Fv(\()n Fz(t)6 b Fv(\)\)\)\))p FA(;)2196 5059
y Fz(x)2233 5072 y Fo(1)2268 5059 y Fv(\()n Fz(t)17 b
Fv(+)12 b FC(1)p Fv(\))17 b(=)h(\()p Fz(x)2658 5072 y
Fo(0)2693 5059 y Fv(\()n Fz(t)6 b Fv(\))12 b Fy(^)g Fv(\(\()p
Fz(x)2964 5072 y Fo(1)2999 5059 y Fv(\()n Fz(t)6 b Fv(\))12
b Fy(_)g(:)p Fz(x)3261 5072 y Fo(2)3295 5059 y Fv(\()n
Fz(t)6 b Fv(\)\))12 b Fy(_)g Fv(\()p Fy(:)p Fz(x)3621
5072 y Fo(1)3656 5059 y Fv(\()n Fz(t)6 b Fv(\))p Fy(^)2557
5183 y Fz(x)2594 5196 y Fo(2)2629 5183 y Fv(\()n Fz(t)g
Fv(\)\)\)\))12 b Fy(_)g Fv(\()p Fy(:)p Fz(x)3019 5196
y Fo(0)3054 5183 y Fv(\()n Fz(t)6 b Fv(\))12 b Fy(^)g
Fv(\()p Fy(:)p Fz(x)3348 5196 y Fo(1)3383 5183 y Fv(\()n
Fz(t)6 b Fv(\))12 b Fy(^)g Fz(x)3590 5196 y Fo(2)3624
5183 y Fv(\()n Fz(t)6 b Fv(\)\)\))p FA(;)2196 5308 y
Fz(x)2233 5321 y Fo(2)2268 5308 y Fv(\()n Fz(t)17 b Fv(+)12
b FC(1)p Fv(\))17 b(=)h(\()p Fz(x)2658 5321 y Fo(0)2693
5308 y Fv(\()n Fz(t)6 b Fv(\))12 b Fy(^)g Fv(\()p Fy(:)p
Fz(x)2987 5321 y Fo(1)3022 5308 y Fv(\()n Fz(t)6 b Fv(\))12
b Fy(_)g Fz(x)3229 5321 y Fo(2)3263 5308 y Fv(\()n Fz(t)6
b Fv(\)\)\))12 b Fy(_)g Fv(\()p Fy(:)p Fz(x)3621 5321
y Fo(0)3656 5308 y Fv(\()n Fz(t)6 b Fv(\))p Fy(^)2668
5432 y Fv(\(\()p Fz(x)2769 5445 y Fo(1)2804 5432 y Fv(\()n
Fz(t)g Fv(\))12 b Fy(^)g Fz(x)3011 5445 y Fo(2)3045 5432
y Fv(\()n Fz(t)6 b Fv(\)\))12 b Fy(_)g Fv(\()p Fy(:)p
Fz(x)3371 5445 y Fo(1)3406 5432 y Fv(\()n Fz(t)6 b Fv(\))12
b Fy(^)g Fz(x)3613 5445 y Fo(2)3647 5432 y Fv(\()n Fz(t)6
b Fv(\)\)\))p 0 TeXcolorgray 3954 5122 a FC(\(18\))p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 6 6
TeXDict begin 6 5 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -192 -50 a FC(By)36 b(using)f(the)h(method)e(of)h(STP)-9
b(,)36 b(we)g(can)f(turn)g(system)h(\(14\))e(into)-192
49 y(follo)n(wing)27 b(multi-linear)g(form:)559 216 y
Fz(x)p Fv(\()n Fz(t)17 b Fv(+)12 b FC(1)p Fv(\))17 b(=)h
Fz(L)963 229 y Fo(3)998 216 y Fz(x)p Fv(\()n Fz(t)6 b
Fv(\))p FA(;)613 b FC(\(19\))-192 383 y(where)19 b Fz(L)77
396 y Fo(3)126 383 y Fv(=)14 b FB(d)246 396 y Fo(8)281
383 y Fv([)p FC(3)20 b(6)g(1)f(7)h(2)g(8)g(5)f(4)p Fv(])p
FC(,)h Fz(x)p Fv(\()n Fz(t)6 b Fv(\))15 b(=)e Fz(x)1100
396 y Fo(0)1135 383 y Fv(\()n Fz(t)6 b Fv(\))p Fz(x)1263
396 y Fo(1)1298 383 y Fv(\()n Fz(t)g Fv(\))p Fz(x)1426
396 y Fo(2)1461 383 y Fv(\()n Fz(t)g Fv(\))14 b Fy(2)h
Fx(D)1687 406 y Fo(2)1718 388 y Fi(3)1751 383 y FC(.)20
b(W)-7 b(e)-192 483 y(can)25 b(kno)n(w)g(that)h(there)f(are)g(tw)o(o)h
(c)o(ycle)f(denoted)g(by)g Fw(C)1432 496 y Fo(31)1498
483 y FA(;)9 b Fw(C)1585 496 y Fo(32)1651 483 y FC(.)26
b Fw(C)1753 496 y Fo(31)1836 483 y Fv(=)-192 582 y FB(d)-141
552 y Fo(5)-151 608 y(8)-89 582 y Fy(!)17 b FB(d)62 552
y Fo(2)52 607 y(8)115 582 y Fy(!)g FB(d)266 552 y Fo(6)256
608 y(8)318 582 y Fy(!)g FB(d)469 552 y Fo(8)459 608
y(8)521 582 y Fy(!)h FB(d)673 552 y Fo(4)663 607 y(8)725
582 y Fy(!)f FB(d)876 552 y Fo(7)866 607 y(8)928 582
y Fy(!)g FB(d)1079 552 y Fo(5)1069 608 y(8)1115 582 y
FC(.)26 b Fw(C)1217 595 y Fo(32)1300 582 y Fv(=)16 b
FB(d)1432 552 y Fo(1)1422 607 y(8)1486 582 y Fy(!)i FB(d)1638
552 y Fo(3)1628 608 y(8)1692 582 y Fy(!)g FB(d)1844 552
y Fo(1)1834 607 y(8)1879 582 y FC(.)-192 682 y(The)23
b(output)f(sequence)h(of)g Fw(C)674 695 y Fo(31)764 682
y FC(is)i(010010)p FA(:::)p FC(.)20 b(The)k(output)e(sequence)-192
782 y(of)33 b Fw(C)-34 795 y Fo(32)66 782 y FC(is)i(111)p
FA(:::)p FC(.)d(The)h(minimal)g(periods)f(of)h Fw(C)1314
795 y Fo(31)1414 782 y FC(and)g Fw(C)1623 795 y Fo(32)1723
782 y FC(are)h(3)-192 881 y(and)29 b(1)g(respecti)n(v)o(ely)-5
b(.)27 b(So)i(we)h(can)e(obtain)h(that)g(the)g(period)f(of)h
Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))-192 981 y FC(NFSR)30
b(\(18\))d(is)i(3.)-109 1083 y(Ne)o(xt,)43 b(we)g(composed)f
Fv(\()p FC(3)p FA(;)9 b FC(3)p Fv(\))43 b FC(NFSR)i(\(16\))d(and)h
Fv(\()p FC(18)p Fv(\))g FC(into)g(an)-192 1183 y Fv(\()p
FC(6)p FA(;)9 b FC(3)p Fv(\))44 b FC(NFSR.)h(W)-7 b(e)45
b(can)e(obtain)g(the)h(state)h(transition)e(matrix)g(of)-192
1282 y Fv(\()p FC(6)p FA(;)9 b FC(3)p Fv(\))29 b FC(NFSR)g(denoted)e
(by)h Fz(L)703 1294 y Fs(c)735 1282 y FC(.)h Fz(L)831
1294 y Fs(c)881 1282 y Fv(=)18 b FB(d)1005 1295 y Fo(64)1070
1282 y Fv([)p FC(35)28 b(38)h(33)f(39)g(34)g(40)g(37)-192
1382 y(36)19 b(19)f(22)h(17)g(23)f(18)h(24)g(21)f(20)h(43)f(46)h(41)g
(47)f(42)h(48)g(45)f(44)h(3)g(6)g(1)g(7)h(2)f(8)-192
1482 y(5)g(4)f(11)g(14)g(9)h(15)f(10)g(16)g(13)h(12)f(27)g(30)g(25)g
(31)g(26)g(32)g(29)g(28)h(59)f(62)g(57)g(63)-192 1581
y(58)28 b(64)g(61)g(60)g(51)g(54)g(49)h(55)f(50)g(56)g(53)g(52)p
Fv(])p FC(.)-109 1683 y(From)39 b(Lemma)f(4,)h(we)g(can)g(kno)n(w)f
(that)h(the)g(number)e(of)i(c)o(ycle)-192 1783 y(of)32
b Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))32 b FC(NFSR)h(is)g(6)13
b Fv(+)g FC(2)g Fv(+)g FC(2)g Fv(+)g FC(2)j Fv(=)j FC(12.)32
b(W)-7 b(e)33 b(only)e(pick)g(3)h(c)o(ycles)-192 1883
y(denoted)25 b(by)h Fw(C)263 1896 y Fo(1)298 1883 y FA(;)9
b Fw(C)385 1896 y Fo(2)421 1883 y FA(;)g Fw(C)508 1896
y Fo(3)543 1883 y FC(.)27 b Fw(C)646 1896 y Fo(1)708
1883 y FC(is)g(composed)e(by)h Fw(C)1319 1896 y Fo(21)1412
1883 y FC(and)g Fw(C)1614 1896 y Fo(31)1680 1883 y FC(.)h
Fw(C)1783 1896 y Fo(1)1836 1883 y Fv(=)-192 1982 y FB(d)-141
1952 y Fo(5)-151 2008 y(64)-63 1982 y Fy(!)22 b FB(d)93
1952 y Fo(34)83 2008 y(64)180 1982 y Fy(!)g FB(d)336
1952 y Fo(14)326 2007 y(64)424 1982 y Fy(!)g FB(d)580
1952 y Fo(24)570 2007 y(64)668 1982 y Fy(!)g FB(d)824
1952 y Fo(44)814 2007 y(64)912 1982 y Fy(!)g FB(d)1068
1952 y Fo(31)1058 2008 y(64)1155 1982 y Fy(!)g FB(d)1311
1952 y Fo(5)1301 2008 y(64)1367 1982 y FC(.)35 b(W)-7
b(e)36 b(can)f(kno)n(w)-192 2082 y(the)j(output)f(sequence)g(of)h
Fw(C)705 2095 y Fo(1)779 2082 y FC(is)h(1111111)p FA(:::)d
FC(with)i(period)f(1.)h Fw(C)1865 2095 y Fo(2)-192 2181
y FC(is)e(composed)d(by)h Fw(C)444 2194 y Fo(21)546 2181
y FC(and)g Fw(C)756 2194 y Fo(32)857 2181 y FC(and)h
Fw(C)1068 2194 y Fo(2)1125 2181 y Fv(=)21 b FB(d)1262
2151 y Fo(1)1252 2207 y(64)1340 2181 y Fy(!)h FB(d)1496
2151 y Fo(35)1486 2208 y(64)1584 2181 y Fy(!)g FB(d)1740
2151 y Fo(9)1730 2208 y(64)1817 2181 y Fy(!)-192 2281
y FB(d)-141 2251 y Fo(19)-151 2308 y(64)-51 2281 y Fy(!)h
FB(d)106 2251 y Fo(41)96 2306 y(64)196 2281 y Fy(!)h
FB(d)354 2251 y Fo(27)344 2307 y(64)443 2281 y Fy(!)g
FB(d)601 2251 y Fo(1)591 2306 y(64)657 2281 y FC(.)38
b(and)f(the)i(output)d(sequence)h(of)h Fw(C)1771 2294
y Fo(2)1845 2281 y FC(is)-192 2381 y(010010,)22 b(the)j(minimal)f
(period)g(of)g(output)g(sequence)f(of)i Fw(C)1581 2394
y Fo(2)1642 2381 y FC(is)g(3.)g Fw(C)1865 2394 y Fo(3)-192
2480 y FC(is)g(composed)c(by)j Fw(C)411 2493 y Fo(21)501
2480 y FC(and)f Fw(C)700 2493 y Fo(31)766 2480 y FC(.)h
Fw(C)866 2493 y Fo(3)917 2480 y Fv(=)16 b FB(d)1049 2450
y Fo(2)1039 2505 y(64)1120 2480 y Fy(!)h FB(d)1271 2450
y Fo(36)1261 2506 y(64)1353 2480 y Fy(!)f FB(d)1503 2450
y Fo(16)1493 2506 y(64)1585 2480 y Fy(!)g FB(d)1735 2450
y Fo(20)1725 2506 y(64)1817 2480 y Fy(!)-192 2580 y FB(d)-141
2550 y Fo(47)-151 2606 y(64)-57 2580 y Fy(!)j FB(d)96
2550 y Fo(29)86 2606 y(64)180 2580 y Fy(!)g FB(d)333
2550 y Fo(2)323 2605 y(64)388 2580 y FC(.)29 b(The)g(output)e(sequence)
h(of)g Fw(C)1325 2593 y Fo(3)1390 2580 y FC(is)h(001001)e(with)-192
2680 y(minimal)h(period)f(3.)-109 2782 y(The)19 b(abo)o(v)o(e)f
(analysis)i(is)g(coincident)e(with)i(the)f(results)h(of)f(Theorem)-192
2881 y(4)29 b(and)f(Theorem)e(5.)562 3059 y(V)-7 b(.)45
b FD(C)t(O)t(N)t(C)t(L)t(U)t(S)t(I)t(O)t(N)-109 3200
y FC(This)d(paper)e(in)m(v)o(estigated)f(the)j(stability)g(of)f
Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))42 b FC(NFSR,)h(the)-192
3299 y(period)h(of)h Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))46
b FC(NFSR)g(and)f(the)g(period)f(of)g(composed)g Fv(\()p
Fz(n)p FA(;)9 b Fz(k)q Fv(\))-192 3399 y FC(NFSR.)33
b(First,)h(we)e(treated)g(the)h Fv(\()p Fz(n)p FA(;)9
b Fz(k)q Fv(\))33 b FC(NFSR)h(as)f(a)g(BN.)g(By)g(using)-192
3499 y(the)g(method)f(of)h(STP)-9 b(,)33 b(the)g Fv(\()p
Fz(n)p FA(;)9 b Fz(k)q Fv(\))34 b FC(NFSR)h(w)o(as)f(transformed)c
(into)j(a)-192 3598 y(multi-linear)22 b(system.)i(Then)f(an)h
(algorithm)e(w)o(as)j(proposed)d(to)i(judge)-192 3698
y(the)37 b(stability)f(of)g(an)h Fv(\()p Fz(n)p FA(;)9
b Fz(k)q Fv(\))37 b FC(NFSR.)h(After)e(that,)g(we)h(proposed)e(an)-192
3797 y(algorithm)27 b(to)i(\002nd)g(the)f(minimal)h(period)e(of)i
(output)e(sequence)h(of)g(a)-192 3897 y(c)o(ycle)e(of)h(an)g
Fv(\()p Fz(n)p FA(;)9 b Fz(k)q Fv(\))28 b FC(NFSR.)g(At)f(last,)h(the)f
(relationship)f(between)g(the)-192 3997 y(minimal)g(period)e(of)i
(output)f(sequence)g(of)h(an)g(c)o(ycle)g(and)f(the)i(length)-192
4096 y(of)h(the)h(c)o(ycle)f(in)g(an)h(composed)d Fv(\()p
Fz(n)p FA(;)9 b Fz(k)q Fv(\))30 b FC(NFSR.)492 4274 y(A)q
FD(C)t(K)t(N)t(O)r(W)t(L)t(E)t(D)t(G)t(M)t(E)t(N)t(T)-109
4415 y FC(This)47 b(w)o(ork)g(w)o(as)h(supported)e(by)g(the)i(National)
f(Natural)f(Sci-)-192 4514 y(ence)39 b(F)o(oundation)f(of)h(China)h
(under)e(Grant)i(No.)f(61573102,)d(and)-192 4614 y(China)57
b(Postdoctoral)e(Science)h(F)o(oundation)e(under)i(Grant)g(No.)-192
4713 y(2014M560377)25 b(and)j(2015T80483,)d(Jiangsu)k(Pro)o(vince)f
(Six)i(T)-7 b(alent)-192 4813 y(Peaks)29 b(Project)f(under)f(Grant)h
(2015-ZND)n(W)-5 b(-002.)622 4990 y(R)t FD(E)t(F)t(E)t(R)t(E)t(N)t(C)t
(E)t(S)p 0 TeXcolorgray -159 5129 a([1])p 0 TeXcolorgray
42 w(E.)20 b(Dubro)o(v)n(a,)h(M.)g(T)-5 b(eslenk)o(o,)22
b(and)f(H.)f(T)-5 b(enhunen,)22 b(\223On)f(analysis)h(and)g(synthesis)
-40 5204 y(of)i(\(n,k\)-non-linear)i(feedback)g(shift)f(re)o(gisters,)
-5 b(\224)25 b Fa(Design)g(A)o(utomation)g(&)e(T)-6 b(est)-40
5278 y(in)24 b(Eur)m(ope)p FD(,)f(pp.)h(1286\2261291,)g(2008.)p
0 TeXcolorgray -159 5354 a([2])p 0 TeXcolorgray 42 w(D.)d(Cheng,)i(H.)e
(Qi,)h(and)g(Y)-9 b(.)22 b(Zhao,)g Fa(An)f(Intr)m(oduction)k(to)d
(Semi-T)-6 b(ensor)23 b(Pr)m(oduct)-40 5429 y(of)h(Matrices)h(and)f
(Its)g(Applications)p FD(.)33 b(W)o(ORLD)23 b(SCIENTIFIC,)g(2012.)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 2033 -50
a([3])p 0 TeXcolorgray 42 w(D.)h(Cheng)i(and)g(H.)e(Qi,)h(\223)-5
b(A)25 b(linear)i(representation)i(of)c(dynamics)h(of)g(Boolean)2152
24 y(netw)o(orks,)-5 b(\224)31 b Fa(A)o(utomatic)g(Contr)m(ol)g(IEEE)d
(T)l(r)o(ansactions)j(on)p FD(,)e(v)o(ol.)h(55,)f(no.)g(10,)2152
99 y(pp.)23 b(2251\2262258,)i(2010.)p 0 TeXcolorgray
2033 174 a([4])p 0 TeXcolorgray 42 w(D.)20 b(Cheng,)h(H.)e(Qi,)h(and)h
(Z.)e(Li,)h Fa(Analysis)h(and)g(Contr)m(ol)g(of)g(Boolean)g(Networks)p
FD(.)2152 249 y(Springer)k(London,)e(2011.)p 0 TeXcolorgray
2033 323 a([5])p 0 TeXcolorgray 42 w(Y)-9 b(.)32 b(Zhao,)g(J.)g(Kim,)g
(and)h(M.)f(Filippone,)i(\223)-5 b(Aggre)o(gation)35
b(algorithm)g(to)n(w)o(ards)2152 398 y(lar)o(ge-scale)23
b(Boolean)e(netw)o(ork)h(analysis,)-5 b(\224)22 b Fa(IEEE)c(T)l(r)o
(ansactions)j(on)f(A)o(utomatic)2152 473 y(Contr)m(ol)p
FD(,)k(v)o(ol.)g(58,)f(no.)g(8,)g(pp.)h(1976\2261985,)g(2013.)p
0 TeXcolorgray 2033 547 a([6])p 0 TeXcolorgray 42 w(Y)-9
b(.)24 b(Zhao,)h(B.)f(K.)g(Ghosh,)h(and)g(D.)f(Cheng,)i(\223Control)h
(of)e(lar)o(ge-scale)j(Boolean)2152 622 y(netw)o(orks)e(via)g(netw)o
(ork)g(aggre)o(gation,)-5 b(\224)28 b Fa(IEEE)23 b(T)l(r)o(ansactions)k
(on)e(Neur)o(al)h(Net-)2152 697 y(works)e(and)g(Learning)h(Systems)p
FD(,)f(v)o(ol.)f(27,)g(no.)h(7,)f(pp.)g(1527\2261536,)i(2016.)p
0 TeXcolorgray 2033 772 a([7])p 0 TeXcolorgray 42 w(Y)-9
b(.)30 b(W)-5 b(ang,)30 b(C.)f(Zhang,)h(and)h(Z.)e(Liu,)h(\223)-5
b(A)30 b(matrix)h(approach)h(to)f(graph)g(maxi-)2152
846 y(mum)26 b(stable)j(set)e(and)g(coloring)i(problems)f(with)g
(application)i(to)e(multi-agent)2152 921 y(systems,)-5
b(\224)24 b Fa(A)o(utomatica)p FD(,)h(v)o(ol.)e(48,)g(no.)h(7,)f(pp.)g
(1227\2261236,)i(2012.)p 0 TeXcolorgray 2033 996 a([8])p
0 TeXcolorgray 42 w(J.)c(Zhong,)g(J.)g(Lu,)g(C.)h(Huang,)g(L.)f(Li,)g
(and)h(J.)f(Cao,)h(\223Finding)i(graph)f(minimum)2152
1070 y(stable)f(set)f(and)g(core)h(via)f(semi-tensor)i(product)f
(approach,)-5 b(\224)23 b Fa(Neur)m(ocomputing)p FD(,)2152
1145 y(v)o(ol.)g(174,)h(pp.)f(588\226596,)h(2015.)p 0
TeXcolorgray 2033 1220 a([9])p 0 TeXcolorgray 42 w(X.)j(Han,)h(Z.)f
(Chen,)h(Z.)f(Liu,)h(and)g(Q.)f(Zhang,)h(\223Calculation)k(of)c
(siphons)h(and)2152 1295 y(minimal)19 b(siphons)g(in)g(Petri)g(nets)g
(based)g(on)g(semi-tensor)g(product)h(of)e(matrices,)-5
b(\224)2152 1369 y Fa(IEEE)31 b(T)l(r)o(ansactions)k(on)e(Systems)h
(Man)f(&Cybernetics)j(Systems)p FD(,)d(pp.)g(1\2266,)2152
1444 y(2015.)p 0 TeXcolorgray 2000 1519 a([10])p 0 TeXcolorgray
42 w(Y)-9 b(.)16 b(Guo,)h(P)-7 b(.)15 b(W)-5 b(ang,)17
b(W)-6 b(.)15 b(Gui,)i(and)h(C.)e(Y)-7 b(ang,)17 b(\223Set)h(stability)
i(and)d(set)g(stabilization)2152 1593 y(of)26 b(Boolean)h(control)h
(netw)o(orks)f(based)g(on)e(in)m(v)n(ariant)k(subsets)e(,)-5
b(\224)25 b Fa(A)o(utomatica)p FD(,)2152 1668 y(v)o(ol.)e(61,)h(pp.)f
(106\226112,)h(2015.)p 0 TeXcolorgray 2000 1743 a([11])p
0 TeXcolorgray 42 w(E.)18 b(F)o(ornasini)j(and)e(M.)g(E.)e(V)-7
b(alcher)m(,)21 b(\223On)e(the)h(periodic)i(trajectories)g(of)e
(Boolean)2152 1818 y(control)25 b(netw)o(orks)g(,)-5
b(\224)24 b Fa(A)o(utomatica)p FD(,)h(v)o(ol.)e(49,)h(no.)f(5,)g(p.)g
(1506C1509,)i(2013.)p 0 TeXcolorgray 2000 1892 a([12])p
0 TeXcolorgray 42 w(J.)h(Zhong)i(and)g(D.)f(Lin,)f(\223Stability)31
b(of)d(nonlinear)i(feedback)f(shift)f(re)o(gisters,)-5
b(\224)2152 1967 y(in)41 b Fa(IEEE)e(International)44
b(Confer)n(ence)f(on)d(Information)j(and)e(A)o(utomation)p
FD(,)2152 2042 y(pp.)23 b(671\226676,)i(2014.)p 0 TeXcolorgray
2000 2117 a([13])p 0 TeXcolorgray 42 w(D.)17 b(W)-6 b(.)16
b(Zhao,)i(H.)f(P)-7 b(.)16 b(Peng,)i(L.)e(X.)h(Li,)g(S.)g(L.)g(Hui,)g
(and)h(Y)-9 b(.)18 b(X.)f(Y)-7 b(ang,)18 b(\223No)o(v)o(el)h(w)o(ay)
2152 2191 y(to)f(research)i(nonlinear)g(feedback)g(shift)e(re)o(gister)
m(,)-5 b(\224)21 b Fa(Science)f(China)f(Information)2152
2266 y(Sciences)p FD(,)25 b(v)o(ol.)f(57,)f(no.)g(9,)g(pp.)h(1\22614,)f
(2014.)p 0 TeXcolorgray 2000 2341 a([14])p 0 TeXcolorgray
42 w(D.)35 b(Cheng,)h(H.)e(Qi,)i(Z.)e(Li,)h(and)h(J.)e(B.)h(Liu,)g
(\223Stability)k(and)d(stabilization)2152 2415 y(of)e(Boolean)i(netw)o
(orks,)-5 b(\224)35 b Fa(International)i(J)n(ournal)f(of)e(Rob)o(ust)f
(&)h(Nonlinear)2152 2490 y(Contr)m(ol)p FD(,)24 b(v)o(ol.)g(21,)f(no.)g
(2,)g(pp.)h(134\226156,)g(2011.)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
